{
    "Application": [
        {
            "name": "Provider",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Provider.html",
            "examples": [
                {
                    "source": "import {Button, defaultTheme, Provider} from '@adobe/react-spectrum';\n\nfunction App() {\n  return (\n    <Provider theme={defaultTheme}>\n      <Button variant=\"accent\">\n        Hello React Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  Button,\n  defaultTheme,\n  Provider\n} from '@adobe/react-spectrum';\n\nfunction App() {\n  return (\n    <Provider theme={defaultTheme}>\n      <Button variant=\"accent\">\n        Hello React Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  Button,\n  defaultTheme,\n  Provider\n} from '@adobe/react-spectrum';\n\nfunction App() {\n  return (\n    <Provider\n      theme={defaultTheme}\n    >\n      <Button variant=\"accent\">\n        Hello React\n        Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "<Provider theme={theme} colorScheme=\"light\">\n  <ActionButton margin=\"size-100\">I'm a light button</ActionButton>\n</Provider>",
                    "name": "Color Schemes#"
                },
                {
                    "source": "<Provider theme={theme} colorScheme=\"light\">\n  <ActionButton margin=\"size-100\">\n    I'm a light button\n  </ActionButton>\n</Provider>",
                    "name": "Color Schemes#"
                },
                {
                    "source": "<Provider\n  theme={theme}\n  colorScheme=\"light\"\n>\n  <ActionButton margin=\"size-100\">\n    I'm a light button\n  </ActionButton>\n</Provider>",
                    "name": "Color Schemes#"
                },
                {
                    "source": "<Provider theme={theme} locale={appSettings.locale}>\n  <YourApp />\n</Provider>",
                    "name": "Locales#"
                },
                {
                    "source": "<Provider theme={theme} locale={appSettings.locale}>\n  <YourApp />\n</Provider>",
                    "name": "Locales#"
                },
                {
                    "source": "<Provider\n  theme={theme}\n  locale={appSettings\n    .locale}\n>\n  <YourApp />\n</Provider>",
                    "name": "Locales#"
                },
                {
                    "source": "<Provider theme={theme} breakpoints={{ tablet: 640, desktop: 1024 }}>\n  <View\n    height=\"size-1000\"\n    backgroundColor={{\n      base: 'celery-600',\n      tablet: 'blue-600',\n      desktop: 'magenta-600'\n    }}\n  />\n</Provider>",
                    "name": "Breakpoints#"
                },
                {
                    "source": "<Provider\n  theme={theme}\n  breakpoints={{ tablet: 640, desktop: 1024 }}\n>\n  <View\n    height=\"size-1000\"\n    backgroundColor={{\n      base: 'celery-600',\n      tablet: 'blue-600',\n      desktop: 'magenta-600'\n    }}\n  />\n</Provider>",
                    "name": "Breakpoints#"
                },
                {
                    "source": "<Provider\n  theme={theme}\n  breakpoints={{\n    tablet: 640,\n    desktop: 1024\n  }}\n>\n  <View\n    height=\"size-1000\"\n    backgroundColor={{\n      base:\n        'celery-600',\n      tablet:\n        'blue-600',\n      desktop:\n        'magenta-600'\n    }}\n  />\n</Provider>",
                    "name": "Breakpoints#"
                },
                {
                    "source": "let navigate = useNavigateFromYourRouter();\n\n<Provider theme={theme} router={{navigate}}>\n  <YourApp />\n</Provider>",
                    "name": "Client side routing#"
                },
                {
                    "source": "let navigate = useNavigateFromYourRouter();\n\n<Provider theme={theme} router={{navigate}}>\n  <YourApp />\n</Provider>",
                    "name": "Client side routing#"
                },
                {
                    "source": "let navigate =\n  useNavigateFromYourRouter();\n\n<Provider\n  theme={theme}\n  router={{ navigate }}\n>\n  <YourApp />\n</Provider>",
                    "name": "Client side routing#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-100\" alignItems=\"start\">\n  <Provider isDisabled>\n    <RadioGroup label=\"Favorite animal\">\n      <Radio value=\"dogs\">Dogs</Radio>\n      <Radio value=\"cats\">Cats</Radio>\n      <Radio value=\"horses\">Horses</Radio>\n    </RadioGroup>\n    <Checkbox>I agree</Checkbox>\n    <Button variant=\"primary\">Submit</Button>\n  </Provider>\n</Flex>",
                    "name": "Property groups#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-100\" alignItems=\"start\">\n  <Provider isDisabled>\n    <RadioGroup label=\"Favorite animal\">\n      <Radio value=\"dogs\">Dogs</Radio>\n      <Radio value=\"cats\">Cats</Radio>\n      <Radio value=\"horses\">Horses</Radio>\n    </RadioGroup>\n    <Checkbox>I agree</Checkbox>\n    <Button variant=\"primary\">Submit</Button>\n  </Provider>\n</Flex>",
                    "name": "Property groups#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-100\"\n  alignItems=\"start\"\n>\n  <Provider isDisabled>\n    <RadioGroup label=\"Favorite animal\">\n      <Radio value=\"dogs\">\n        Dogs\n      </Radio>\n      <Radio value=\"cats\">\n        Cats\n      </Radio>\n      <Radio value=\"horses\">\n        Horses\n      </Radio>\n    </RadioGroup>\n    <Checkbox>\n      I agree\n    </Checkbox>\n    <Button variant=\"primary\">\n      Submit\n    </Button>\n  </Provider>\n</Flex>",
                    "name": "Property groups#"
                },
                {
                    "source": "function Register() {\n  let [email, setEmail] = React.useState('');\n\n  return (\n    <Flex direction=\"column\" gap=\"size-100\" alignItems=\"start\">\n      <Provider isQuiet>\n        <TextField\n          label=\"Email\"\n          value={email}\n          onChange={setEmail} />\n        <Provider isDisabled={email.length === 0}>\n          <Picker label=\"Favorite color\">\n            <Item key=\"magenta\">Magenta</Item>\n            <Item key=\"indigo\">Indigo</Item>\n            <Item key=\"chartreuse\">Chartreuse</Item>\n          </Picker>\n          <Button variant=\"primary\">Submit</Button>\n        </Provider>\n      </Provider>\n    </Flex>\n  );\n}",
                    "name": "Property groups#"
                },
                {
                    "source": "function Register() {\n  let [email, setEmail] = React.useState('');\n\n  return (\n    <Flex\n      direction=\"column\"\n      gap=\"size-100\"\n      alignItems=\"start\"\n    >\n      <Provider isQuiet>\n        <TextField\n          label=\"Email\"\n          value={email}\n          onChange={setEmail}\n        />\n        <Provider isDisabled={email.length === 0}>\n          <Picker label=\"Favorite color\">\n            <Item key=\"magenta\">Magenta</Item>\n            <Item key=\"indigo\">Indigo</Item>\n            <Item key=\"chartreuse\">Chartreuse</Item>\n          </Picker>\n          <Button variant=\"primary\">Submit</Button>\n        </Provider>\n      </Provider>\n    </Flex>\n  );\n}\n",
                    "name": "Property groups#"
                },
                {
                    "source": "function Register() {\n  let [email, setEmail] =\n    React.useState('');\n\n  return (\n    <Flex\n      direction=\"column\"\n      gap=\"size-100\"\n      alignItems=\"start\"\n    >\n      <Provider isQuiet>\n        <TextField\n          label=\"Email\"\n          value={email}\n          onChange={setEmail}\n        />\n        <Provider\n          isDisabled={email\n            .length ===\n            0}\n        >\n          <Picker label=\"Favorite color\">\n            <Item key=\"magenta\">\n              Magenta\n            </Item>\n            <Item key=\"indigo\">\n              Indigo\n            </Item>\n            <Item key=\"chartreuse\">\n              Chartreuse\n            </Item>\n          </Picker>\n          <Button variant=\"primary\">\n            Submit\n          </Button>\n        </Provider>\n      </Provider>\n    </Flex>\n  );\n}\n",
                    "name": "Property groups#"
                },
                {
                    "source": "import {useProvider} from '@adobe/react-spectrum';\nimport Light from '@spectrum-icons/workflow/Light';\nimport Moon from '@spectrum-icons/workflow/Moon';\n\nfunction Example() {\n  let { colorScheme } = useProvider();\n\n  return colorScheme === 'dark'\n    ? <Moon aria-label=\"In dark theme\" />\n    : <Light aria-label=\"In light theme\" />;\n}\n\n<Example />",
                    "name": "useProvider#"
                },
                {
                    "source": "import {useProvider} from '@adobe/react-spectrum';\nimport Light from '@spectrum-icons/workflow/Light';\nimport Moon from '@spectrum-icons/workflow/Moon';\n\nfunction Example() {\n  let { colorScheme } = useProvider();\n\n  return colorScheme === 'dark'\n    ? <Moon aria-label=\"In dark theme\" />\n    : <Light aria-label=\"In light theme\" />;\n}\n\n<Example />",
                    "name": "useProvider#"
                },
                {
                    "source": "import {useProvider} from '@adobe/react-spectrum';\nimport Light from '@spectrum-icons/workflow/Light';\nimport Moon from '@spectrum-icons/workflow/Moon';\n\nfunction Example() {\n  let { colorScheme } =\n    useProvider();\n\n  return colorScheme ===\n      'dark'\n    ? (\n      <Moon aria-label=\"In dark theme\" />\n    )\n    : (\n      <Light aria-label=\"In light theme\" />\n    );\n}\n\n<Example />",
                    "name": "useProvider#"
                }
            ]
        }
    ],
    "Layout": [
        {
            "name": "Flex",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Flex.html",
            "examples": [
                {
                    "source": "<Flex direction=\"column\" width=\"size-2000\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>",
                    "name": "Vertical stack#"
                },
                {
                    "source": "<Flex direction=\"column\" width=\"size-2000\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>",
                    "name": "Vertical stack#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  width=\"size-2000\"\n  gap=\"size-100\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"blue-600\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"magenta-600\"\n    height=\"size-800\"\n  />\n</Flex>",
                    "name": "Vertical stack#"
                },
                {
                    "source": "<Flex direction=\"row\" height=\"size-800\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" width=\"size-800\" />\n  <View backgroundColor=\"blue-600\" width=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" width=\"size-800\" />\n</Flex>",
                    "name": "Horizontal stack#"
                },
                {
                    "source": "<Flex direction=\"row\" height=\"size-800\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" width=\"size-800\" />\n  <View backgroundColor=\"blue-600\" width=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" width=\"size-800\" />\n</Flex>",
                    "name": "Horizontal stack#"
                },
                {
                    "source": "<Flex\n  direction=\"row\"\n  height=\"size-800\"\n  gap=\"size-100\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    width=\"size-800\"\n  />\n  <View\n    backgroundColor=\"blue-600\"\n    width=\"size-800\"\n  />\n  <View\n    backgroundColor=\"magenta-600\"\n    width=\"size-800\"\n  />\n</Flex>",
                    "name": "Horizontal stack#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <Flex direction=\"row\" height=\"size-3000\" gap=\"size-100\">\n    <View backgroundColor=\"indigo-600\" width=\"size-2000\" />\n    <View backgroundColor=\"seafoam-600\" flex />\n  </Flex>\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>",
                    "name": "Nesting#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <Flex direction=\"row\" height=\"size-3000\" gap=\"size-100\">\n    <View backgroundColor=\"indigo-600\" width=\"size-2000\" />\n    <View backgroundColor=\"seafoam-600\" flex />\n  </Flex>\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>",
                    "name": "Nesting#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-100\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    height=\"size-800\"\n  />\n  <Flex\n    direction=\"row\"\n    height=\"size-3000\"\n    gap=\"size-100\"\n  >\n    <View\n      backgroundColor=\"indigo-600\"\n      width=\"size-2000\"\n    />\n    <View\n      backgroundColor=\"seafoam-600\"\n      flex\n    />\n  </Flex>\n  <View\n    backgroundColor=\"magenta-600\"\n    height=\"size-800\"\n  />\n</Flex>",
                    "name": "Nesting#"
                },
                {
                    "source": "<Flex direction=\"row\" gap=\"size-100\" wrap>\n  {colors.map((color) => (\n    <View\n      key={color}\n      backgroundColor={color}\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n  ))}\n</Flex>",
                    "name": "Wrapping#"
                },
                {
                    "source": "<Flex direction=\"row\" gap=\"size-100\" wrap>\n  {colors.map((color) => (\n    <View\n      key={color}\n      backgroundColor={color}\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n  ))}\n</Flex>",
                    "name": "Wrapping#"
                },
                {
                    "source": "<Flex\n  direction=\"row\"\n  gap=\"size-100\"\n  wrap\n>\n  {colors.map(\n    (color) => (\n      <View\n        key={color}\n        backgroundColor={color}\n        width=\"size-800\"\n        height=\"size-800\"\n      />\n    )\n  )}\n</Flex>",
                    "name": "Wrapping#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-100\" alignItems=\"center\">\n  <View backgroundColor=\"celery-600\" width=\"size-800\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" width=\"size-2000\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" width=\"size-800\" height=\"size-800\" />\n</Flex>",
                    "name": "Alignment#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-100\"\n  alignItems=\"center\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    width=\"size-800\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"blue-600\"\n    width=\"size-2000\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"magenta-600\"\n    width=\"size-800\"\n    height=\"size-800\"\n  />\n</Flex>",
                    "name": "Alignment#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-100\"\n  alignItems=\"center\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    width=\"size-800\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"blue-600\"\n    width=\"size-2000\"\n    height=\"size-800\"\n  />\n  <View\n    backgroundColor=\"magenta-600\"\n    width=\"size-800\"\n    height=\"size-800\"\n  />\n</Flex>",
                    "name": "Alignment#"
                },
                {
                    "source": "<View height=\"size-3000\" borderWidth=\"thin\" borderColor=\"dark\">\n  <Flex direction=\"column\" gap=\"size-100\" justifyContent=\"center\" height=\"100%\">\n    <View backgroundColor=\"celery-600\" width=\"size-800\" height=\"size-800\" />\n    <View backgroundColor=\"blue-600\" width=\"size-2000\" height=\"size-800\" />\n    <View backgroundColor=\"magenta-600\" width=\"size-800\" height=\"size-800\" />\n  </Flex>\n</View>",
                    "name": "Justification#"
                },
                {
                    "source": "<View\n  height=\"size-3000\"\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n>\n  <Flex\n    direction=\"column\"\n    gap=\"size-100\"\n    justifyContent=\"center\"\n    height=\"100%\"\n  >\n    <View\n      backgroundColor=\"celery-600\"\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n    <View\n      backgroundColor=\"blue-600\"\n      width=\"size-2000\"\n      height=\"size-800\"\n    />\n    <View\n      backgroundColor=\"magenta-600\"\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n  </Flex>\n</View>",
                    "name": "Justification#"
                },
                {
                    "source": "<View\n  height=\"size-3000\"\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n>\n  <Flex\n    direction=\"column\"\n    gap=\"size-100\"\n    justifyContent=\"center\"\n    height=\"100%\"\n  >\n    <View\n      backgroundColor=\"celery-600\"\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n    <View\n      backgroundColor=\"blue-600\"\n      width=\"size-2000\"\n      height=\"size-800\"\n    />\n    <View\n      backgroundColor=\"magenta-600\"\n      width=\"size-800\"\n      height=\"size-800\"\n    />\n  </Flex>\n</View>",
                    "name": "Justification#"
                }
            ]
        },
        {
            "name": "Grid",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Grid.html",
            "examples": [
                {
                    "source": "<Grid\n  areas={[\n    'header  header',\n    'sidebar content',\n    'footer  footer'\n  ]}\n  columns={['1fr', '3fr']}\n  rows={['size-1000', 'auto', 'size-1000']}\n  height=\"size-6000\"\n  gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" gridArea=\"header\" />\n  <View backgroundColor=\"blue-600\" gridArea=\"sidebar\" />\n  <View backgroundColor=\"purple-600\" gridArea=\"content\" />\n  <View backgroundColor=\"magenta-600\" gridArea=\"footer\" />\n</Grid>",
                    "name": "Explicit grids#"
                },
                {
                    "source": "<Grid\n  areas={[\n    'header  header',\n    'sidebar content',\n    'footer  footer'\n  ]}\n  columns={['1fr', '3fr']}\n  rows={['size-1000', 'auto', 'size-1000']}\n  height=\"size-6000\"\n  gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" gridArea=\"header\" />\n  <View backgroundColor=\"blue-600\" gridArea=\"sidebar\" />\n  <View backgroundColor=\"purple-600\" gridArea=\"content\" />\n  <View backgroundColor=\"magenta-600\" gridArea=\"footer\" />\n</Grid>",
                    "name": "Explicit grids#"
                },
                {
                    "source": "<Grid\n  areas={[\n    'header  header',\n    'sidebar content',\n    'footer  footer'\n  ]}\n  columns={[\n    '1fr',\n    '3fr'\n  ]}\n  rows={[\n    'size-1000',\n    'auto',\n    'size-1000'\n  ]}\n  height=\"size-6000\"\n  gap=\"size-100\"\n>\n  <View\n    backgroundColor=\"celery-600\"\n    gridArea=\"header\"\n  />\n  <View\n    backgroundColor=\"blue-600\"\n    gridArea=\"sidebar\"\n  />\n  <View\n    backgroundColor=\"purple-600\"\n    gridArea=\"content\"\n  />\n  <View\n    backgroundColor=\"magenta-600\"\n    gridArea=\"footer\"\n  />\n</Grid>",
                    "name": "Explicit grids#"
                },
                {
                    "source": "<Grid\n  columns={repeat('auto-fit', 'size-800')}\n  autoRows=\"size-800\"\n  justifyContent=\"center\"\n  gap=\"size-100\">\n  {colors.map(color =>\n    <View key={color} backgroundColor={color} />\n  )}\n</Grid>",
                    "name": "Implicit grids#"
                },
                {
                    "source": "<Grid\n  columns={repeat('auto-fit', 'size-800')}\n  autoRows=\"size-800\"\n  justifyContent=\"center\"\n  gap=\"size-100\">\n  {colors.map(color =>\n    <View key={color} backgroundColor={color} />\n  )}\n</Grid>",
                    "name": "Implicit grids#"
                },
                {
                    "source": "<Grid\n  columns={repeat(\n    'auto-fit',\n    'size-800'\n  )}\n  autoRows=\"size-800\"\n  justifyContent=\"center\"\n  gap=\"size-100\"\n>\n  {colors.map(\n    (color) => (\n      <View\n        key={color}\n        backgroundColor={color}\n      />\n    )\n  )}\n</Grid>",
                    "name": "Implicit grids#"
                }
            ]
        }
    ],
    "Buttons": [
        {
            "name": "ActionButton",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ActionButton.html",
            "examples": [
                {
                    "source": "<ActionButton>Edit</ActionButton>",
                    "name": "Example#"
                },
                {
                    "source": "<ActionButton>Edit</ActionButton>",
                    "name": "Example#"
                },
                {
                    "source": "<ActionButton>\n  Edit\n</ActionButton>",
                    "name": "Example#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Edit from '@spectrum-icons/workflow/Edit';\n\n<ActionButton>\n  <Edit />\n  <Text>Icon + Label</Text>\n</ActionButton>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Edit from '@spectrum-icons/workflow/Edit';\n\n<ActionButton>\n  <Edit />\n  <Text>Icon + Label</Text>\n</ActionButton>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Edit from '@spectrum-icons/workflow/Edit';\n\n<ActionButton>\n  <Edit />\n  <Text>\n    Icon + Label\n  </Text>\n</ActionButton>",
                    "name": "Content#"
                },
                {
                    "source": "<ActionButton aria-label=\"Icon only\">\n  <Edit />\n</ActionButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ActionButton aria-label=\"Icon only\">\n  <Edit />\n</ActionButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ActionButton aria-label=\"Icon only\">\n  <Edit />\n</ActionButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] = React.useState(0);\n\n  return (\n    <ActionButton onPress={() => setCount((c) => c + 1)}>\n      {count} Edits\n    </ActionButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] = React.useState(0);\n\n  return (\n    <ActionButton onPress={() => setCount((c) => c + 1)}>\n      {count} Edits\n    </ActionButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] =\n    React.useState(0);\n\n  return (\n    <ActionButton\n      onPress={() =>\n        setCount((c) =>\n          c + 1\n        )}\n    >\n      {count} Edits\n    </ActionButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ActionButton isQuiet>Action!</ActionButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionButton isQuiet>Action!</ActionButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionButton isQuiet>\n  Action!\n</ActionButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionButton isDisabled>Action!</ActionButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionButton isDisabled>Action!</ActionButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionButton\n  isDisabled\n>\n  Action!\n</ActionButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <ActionButton staticColor=\"white\">\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <ActionButton staticColor=\"black\" isQuiet>\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ActionButton staticColor=\"white\">\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ActionButton staticColor=\"black\" isQuiet>\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ActionButton staticColor=\"white\">\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ActionButton\n      staticColor=\"black\"\n      isQuiet\n    >\n      <Edit />\n      <Text>Edit</Text>\n    </ActionButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                }
            ]
        },
        {
            "name": "ActionGroup",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ActionGroup.html",
            "examples": [
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionGroup onAction={setAction}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionGroup onAction={setAction}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [\n    action,\n    setAction\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <ActionGroup\n        onAction={setAction}\n      >\n        <Item key=\"add\">\n          Add\n        </Item>\n        <Item key=\"delete\">\n          Delete\n        </Item>\n        <Item key=\"edit\">\n          Edit\n        </Item>\n      </ActionGroup>\n      <p>\n        Action: {action}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "const items = [\n  {label: 'React', name: 'React'},\n  {label: 'Add', name: 'Add'},\n  {label: 'Delete', name: 'Delete'}\n];\n\n<ActionGroup items={items}>\n  {item => <Item key={item.name}>{item.label}</Item>}\n</ActionGroup>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  {label: 'React', name: 'React'},\n  {label: 'Add', name: 'Add'},\n  {label: 'Delete', name: 'Delete'}\n];\n\n<ActionGroup items={items}>\n  {item => <Item key={item.name}>{item.label}</Item>}\n</ActionGroup>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  {\n    label: 'React',\n    name: 'React'\n  },\n  {\n    label: 'Add',\n    name: 'Add'\n  },\n  {\n    label: 'Delete',\n    name: 'Delete'\n  }\n];\n\n<ActionGroup\n  items={items}\n>\n  {(item) => (\n    <Item\n      key={item.name}\n    >\n      {item.label}\n    </Item>\n  )}\n</ActionGroup>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Delete from '@spectrum-icons/workflow/Delete';\n\n<ActionGroup>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Delete from '@spectrum-icons/workflow/Delete';\n\n<ActionGroup>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Delete from '@spectrum-icons/workflow/Delete';\n\n<ActionGroup>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "<ActionGroup buttonLabelBehavior=\"hide\">\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "<ActionGroup buttonLabelBehavior=\"hide\">\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "<ActionGroup buttonLabelBehavior=\"hide\">\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Icons#"
                },
                {
                    "source": "<ActionGroup>\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ActionGroup>\n  <Item key=\"brush\" aria-label=\"Brush\">\n    <Brush />\n  </Item>\n  <Item key=\"select\" aria-label=\"Select\">\n    <Select />\n  </Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\">\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ActionGroup>\n  <Item\n    key=\"brush\"\n    aria-label=\"Brush\"\n  >\n    <Brush />\n  </Item>\n  <Item\n    key=\"select\"\n    aria-label=\"Select\"\n  >\n    <Select />\n  </Item>\n  <Item\n    key=\"regionSelect\"\n    aria-label=\"Select Region\"\n  >\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ActionGroup selectionMode=\"single\" defaultSelectedKeys={['list']}>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "<ActionGroup\n  selectionMode=\"single\"\n  defaultSelectedKeys={['list']}\n>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "<ActionGroup\n  selectionMode=\"single\"\n  defaultSelectedKeys={[\n    'list'\n  ]}\n>\n  <Item key=\"grid\">\n    Grid view\n  </Item>\n  <Item key=\"list\">\n    List view\n  </Item>\n  <Item key=\"gallery\">\n    Gallery view\n  </Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['list'])\n  );\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">\n          Grid view\n        </Item>\n        <Item key=\"list\">\n          List view\n        </Item>\n        <Item key=\"gallery\">\n          Gallery view\n        </Item>\n      </ActionGroup>\n      <p>\n        Current selection\n        (controlled):\n        {' '}\n        {[...selected]}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>Current selections (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['list'])\n  );\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>\n        Current selections (controlled):{' '}\n        {[...selected].join(', ')}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Item key=\"grid\">\n          Grid view\n        </Item>\n        <Item key=\"list\">\n          List view\n        </Item>\n        <Item key=\"gallery\">\n          Gallery view\n        </Item>\n      </ActionGroup>\n      <p>\n        Current\n        selections\n        (controlled):\n        {' '}\n        {[...selected]\n          .join(', ')}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [actionKey, setActionKey] = React.useState<Key>('');\n  return (\n    <>\n      <ActionGroup onAction={setActionKey}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {actionKey}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [actionKey, setActionKey] = React.useState<Key>('');\n  return (\n    <>\n      <ActionGroup onAction={setActionKey}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {actionKey}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    actionKey,\n    setActionKey\n  ] = React.useState<\n    Key\n  >('');\n  return (\n    <>\n      <ActionGroup\n        onAction={setActionKey}\n      >\n        <Item key=\"add\">\n          Add\n        </Item>\n        <Item key=\"delete\">\n          Delete\n        </Item>\n        <Item key=\"edit\">\n          Edit\n        </Item>\n      </ActionGroup>\n      <p>\n        Action:{' '}\n        {actionKey}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ActionGroup overflowMode=\"collapse\" maxWidth={250}>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Non-selectable#"
                },
                {
                    "source": "<ActionGroup overflowMode=\"collapse\" maxWidth={250}>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Non-selectable#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  maxWidth={250}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>\n      Duplicate\n    </Text>\n  </Item>\n</ActionGroup>",
                    "name": "Non-selectable#"
                },
                {
                    "source": "import TextStyle from '@spectrum-icons/workflow/TextStyle';\n\n<ActionGroup\n  aria-label=\"Text style\"\n  overflowMode=\"collapse\"\n  selectionMode=\"multiple\"\n  isEmphasized\n  summaryIcon={<TextStyle />}\n  maxWidth={100}>\n  <Item key=\"bold\">\n    <TagBold />\n    <Text>Bold</Text>\n  </Item>\n  <Item key=\"italic\">\n    <TagItalic />\n    <Text>Italic</Text>\n  </Item>\n  <Item key=\"underline\">\n    <TagUnderline />\n    <Text>Underline</Text>\n  </Item>\n  <Item key=\"strike\">\n    <TextStrikethrough />\n    <Text>Strikethrough</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "import TextStyle from '@spectrum-icons/workflow/TextStyle';\n\n<ActionGroup\n  aria-label=\"Text style\"\n  overflowMode=\"collapse\"\n  selectionMode=\"multiple\"\n  isEmphasized\n  summaryIcon={<TextStyle />}\n  maxWidth={100}>\n  <Item key=\"bold\">\n    <TagBold />\n    <Text>Bold</Text>\n  </Item>\n  <Item key=\"italic\">\n    <TagItalic />\n    <Text>Italic</Text>\n  </Item>\n  <Item key=\"underline\">\n    <TagUnderline />\n    <Text>Underline</Text>\n  </Item>\n  <Item key=\"strike\">\n    <TextStrikethrough />\n    <Text>Strikethrough</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "import TextStyle from '@spectrum-icons/workflow/TextStyle';\n\n<ActionGroup\n  aria-label=\"Text style\"\n  overflowMode=\"collapse\"\n  selectionMode=\"multiple\"\n  isEmphasized\n  summaryIcon={\n    <TextStyle />\n  }\n  maxWidth={100}\n>\n  <Item key=\"bold\">\n    <TagBold />\n    <Text>Bold</Text>\n  </Item>\n  <Item key=\"italic\">\n    <TagItalic />\n    <Text>Italic</Text>\n  </Item>\n  <Item key=\"underline\">\n    <TagUnderline />\n    <Text>\n      Underline\n    </Text>\n  </Item>\n  <Item key=\"strike\">\n    <TextStrikethrough />\n    <Text>\n      Strikethrough\n    </Text>\n  </Item>\n</ActionGroup>",
                    "name": "Selection#"
                },
                {
                    "source": "<ActionGroup\n  aria-label=\"Text alignment\"\n  overflowMode=\"collapse\"\n  selectionMode=\"single\"\n  defaultSelectedKeys={['left']}\n  disallowEmptySelection\n  buttonLabelBehavior=\"hide\"\n  isEmphasized\n  maxWidth={100}>\n  <Item key=\"left\">\n    <TextAlignLeft />\n    <Text>Align Left</Text>\n  </Item>\n  <Item key=\"center\">\n    <TextAlignCenter />\n    <Text>Align Center</Text>\n  </Item>\n  <Item key=\"right\">\n    <TextAlignRight />\n    <Text>Align Right</Text>\n  </Item>\n  <Item key=\"justify\">\n    <TextAlignJustify />\n    <Text>Justify</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Single selection#"
                },
                {
                    "source": "<ActionGroup\n  aria-label=\"Text alignment\"\n  overflowMode=\"collapse\"\n  selectionMode=\"single\"\n  defaultSelectedKeys={['left']}\n  disallowEmptySelection\n  buttonLabelBehavior=\"hide\"\n  isEmphasized\n  maxWidth={100}>\n  <Item key=\"left\">\n    <TextAlignLeft />\n    <Text>Align Left</Text>\n  </Item>\n  <Item key=\"center\">\n    <TextAlignCenter />\n    <Text>Align Center</Text>\n  </Item>\n  <Item key=\"right\">\n    <TextAlignRight />\n    <Text>Align Right</Text>\n  </Item>\n  <Item key=\"justify\">\n    <TextAlignJustify />\n    <Text>Justify</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Single selection#"
                },
                {
                    "source": "<ActionGroup\n  aria-label=\"Text alignment\"\n  overflowMode=\"collapse\"\n  selectionMode=\"single\"\n  defaultSelectedKeys={[\n    'left'\n  ]}\n  disallowEmptySelection\n  buttonLabelBehavior=\"hide\"\n  isEmphasized\n  maxWidth={100}\n>\n  <Item key=\"left\">\n    <TextAlignLeft />\n    <Text>\n      Align Left\n    </Text>\n  </Item>\n  <Item key=\"center\">\n    <TextAlignCenter />\n    <Text>\n      Align Center\n    </Text>\n  </Item>\n  <Item key=\"right\">\n    <TextAlignRight />\n    <Text>\n      Align Right\n    </Text>\n  </Item>\n  <Item key=\"justify\">\n    <TextAlignJustify />\n    <Text>\n      Justify\n    </Text>\n  </Item>\n</ActionGroup>",
                    "name": "Single selection#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  buttonLabelBehavior=\"collapse\"\n  maxWidth={180}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Collapsing button labels#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  buttonLabelBehavior=\"collapse\"\n  maxWidth={180}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Collapsing button labels#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  buttonLabelBehavior=\"collapse\"\n  maxWidth={180}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>\n      Duplicate\n    </Text>\n  </Item>\n</ActionGroup>",
                    "name": "Collapsing button labels#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  orientation=\"vertical\"\n  buttonLabelBehavior=\"hide\"\n  maxHeight={150}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Vertical collapsing behavior#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  orientation=\"vertical\"\n  buttonLabelBehavior=\"hide\"\n  maxHeight={150}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>",
                    "name": "Vertical collapsing behavior#"
                },
                {
                    "source": "<ActionGroup\n  overflowMode=\"collapse\"\n  orientation=\"vertical\"\n  buttonLabelBehavior=\"hide\"\n  maxHeight={150}\n>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>\n      Duplicate\n    </Text>\n  </Item>\n</ActionGroup>",
                    "name": "Vertical collapsing behavior#"
                },
                {
                    "source": "<ActionGroup isQuiet>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionGroup isQuiet>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionGroup isQuiet>\n  <Item key=\"add\">\n    Add\n  </Item>\n  <Item key=\"delete\">\n    Delete\n  </Item>\n  <Item key=\"edit\">\n    Edit\n  </Item>\n</ActionGroup>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionGroup\n  isEmphasized\n  selectionMode=\"single\"\n  defaultSelectedKeys={['list']}>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<ActionGroup\n  isEmphasized\n  selectionMode=\"single\"\n  defaultSelectedKeys={['list']}>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<ActionGroup\n  isEmphasized\n  selectionMode=\"single\"\n  defaultSelectedKeys={[\n    'list'\n  ]}\n>\n  <Item key=\"grid\">\n    Grid view\n  </Item>\n  <Item key=\"list\">\n    List view\n  </Item>\n  <Item key=\"gallery\">\n    Gallery view\n  </Item>\n</ActionGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <ActionGroup staticColor=\"white\">\n      <Item key=\"edit\">\n        <Draw />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"copy\">\n        <Copy />\n        <Text>Copy</Text>\n      </Item>\n      <Item key=\"delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <ActionGroup\n      staticColor=\"black\"\n      isQuiet\n      buttonLabelBehavior=\"hide\"\n      selectionMode=\"single\"\n      disallowEmptySelection\n      defaultSelectedKeys={['list']}>\n      <Item key=\"list\">\n        <ViewList />\n        <Text>List view</Text>\n      </Item>\n      <Item key=\"grid\">\n        <ViewGrid />\n        <Text>Grid view</Text>\n      </Item>\n      <Item key=\"gallery\">\n        <ViewCard />\n        <Text>Gallery view</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ActionGroup staticColor=\"white\">\n      <Item key=\"edit\">\n        <Draw />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"copy\">\n        <Copy />\n        <Text>Copy</Text>\n      </Item>\n      <Item key=\"delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ActionGroup\n      staticColor=\"black\"\n      isQuiet\n      buttonLabelBehavior=\"hide\"\n      selectionMode=\"single\"\n      disallowEmptySelection\n      defaultSelectedKeys={['list']}\n    >\n      <Item key=\"list\">\n        <ViewList />\n        <Text>List view</Text>\n      </Item>\n      <Item key=\"grid\">\n        <ViewGrid />\n        <Text>Grid view</Text>\n      </Item>\n      <Item key=\"gallery\">\n        <ViewCard />\n        <Text>Gallery view</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ActionGroup staticColor=\"white\">\n      <Item key=\"edit\">\n        <Draw />\n        <Text>\n          Edit\n        </Text>\n      </Item>\n      <Item key=\"copy\">\n        <Copy />\n        <Text>\n          Copy\n        </Text>\n      </Item>\n      <Item key=\"delete\">\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </Item>\n    </ActionGroup>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ActionGroup\n      staticColor=\"black\"\n      isQuiet\n      buttonLabelBehavior=\"hide\"\n      selectionMode=\"single\"\n      disallowEmptySelection\n      defaultSelectedKeys={[\n        'list'\n      ]}\n    >\n      <Item key=\"list\">\n        <ViewList />\n        <Text>\n          List view\n        </Text>\n      </Item>\n      <Item key=\"grid\">\n        <ViewGrid />\n        <Text>\n          Grid view\n        </Text>\n      </Item>\n      <Item key=\"gallery\">\n        <ViewCard />\n        <Text>\n          Gallery view\n        </Text>\n      </Item>\n    </ActionGroup>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<ActionGroup isDisabled>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup isDisabled>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup\n  isDisabled\n>\n  <Item key=\"add\">\n    Add\n  </Item>\n  <Item key=\"delete\">\n    Delete\n  </Item>\n  <Item key=\"edit\">\n    Edit\n  </Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup disabledKeys={['add', 'delete']}>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup disabledKeys={['add', 'delete']}>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup\n  disabledKeys={[\n    'add',\n    'delete'\n  ]}\n>\n  <Item key=\"add\">\n    Add\n  </Item>\n  <Item key=\"delete\">\n    Delete\n  </Item>\n  <Item key=\"edit\">\n    Edit\n  </Item>\n</ActionGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionGroup orientation=\"vertical\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ActionGroup orientation=\"vertical\">\n  <Item key=\"brush\" aria-label=\"Brush\">\n    <Brush />\n  </Item>\n  <Item key=\"select\" aria-label=\"Select\">\n    <Select />\n  </Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\">\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ActionGroup orientation=\"vertical\">\n  <Item\n    key=\"brush\"\n    aria-label=\"Brush\"\n  >\n    <Brush />\n  </Item>\n  <Item\n    key=\"select\"\n    aria-label=\"Select\"\n  >\n    <Select />\n  </Item>\n  <Item\n    key=\"regionSelect\"\n    aria-label=\"Select Region\"\n  >\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ActionGroup density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<ActionGroup density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\">\n    <Brush />\n  </Item>\n  <Item key=\"select\" aria-label=\"Select\">\n    <Select />\n  </Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\">\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<ActionGroup density=\"compact\">\n  <Item\n    key=\"brush\"\n    aria-label=\"Brush\"\n  >\n    <Brush />\n  </Item>\n  <Item\n    key=\"select\"\n    aria-label=\"Select\"\n  >\n    <Select />\n  </Item>\n  <Item\n    key=\"regionSelect\"\n    aria-label=\"Select Region\"\n  >\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<ActionGroup isQuiet density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<ActionGroup isQuiet density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\">\n    <Brush />\n  </Item>\n  <Item key=\"select\" aria-label=\"Select\">\n    <Select />\n  </Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\">\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<ActionGroup\n  isQuiet\n  density=\"compact\"\n>\n  <Item\n    key=\"brush\"\n    aria-label=\"Brush\"\n  >\n    <Brush />\n  </Item>\n  <Item\n    key=\"select\"\n    aria-label=\"Select\"\n  >\n    <Select />\n  </Item>\n  <Item\n    key=\"regionSelect\"\n    aria-label=\"Select Region\"\n  >\n    <RegionSelect />\n  </Item>\n</ActionGroup>",
                    "name": "Density#"
                },
                {
                    "source": "<Flex width=\"size-2000\" direction=\"column\">\n  <ActionGroup isJustified>\n    <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n    <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n    <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n  </ActionGroup>\n</Flex>",
                    "name": "Justified#"
                },
                {
                    "source": "<Flex width=\"size-2000\" direction=\"column\">\n  <ActionGroup isJustified>\n    <Item key=\"brush\" aria-label=\"Brush\">\n      <Brush />\n    </Item>\n    <Item key=\"select\" aria-label=\"Select\">\n      <Select />\n    </Item>\n    <Item key=\"regionSelect\" aria-label=\"Select Region\">\n      <RegionSelect />\n    </Item>\n  </ActionGroup>\n</Flex>",
                    "name": "Justified#"
                },
                {
                    "source": "<Flex\n  width=\"size-2000\"\n  direction=\"column\"\n>\n  <ActionGroup\n    isJustified\n  >\n    <Item\n      key=\"brush\"\n      aria-label=\"Brush\"\n    >\n      <Brush />\n    </Item>\n    <Item\n      key=\"select\"\n      aria-label=\"Select\"\n    >\n      <Select />\n    </Item>\n    <Item\n      key=\"regionSelect\"\n      aria-label=\"Select Region\"\n    >\n      <RegionSelect />\n    </Item>\n  </ActionGroup>\n</Flex>",
                    "name": "Justified#"
                }
            ]
        },
        {
            "name": "Button",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Button.html",
            "examples": [
                {
                    "source": "<Button variant=\"accent\">Save</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<Button variant=\"accent\">Save</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<Button variant=\"accent\">\n  Save\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <Bell />\n  <Text>Icon + Label</Text>\n</Button>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <Bell />\n  <Text>Icon + Label</Text>\n</Button>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <Bell />\n  <Text>\n    Icon + Label\n  </Text>\n</Button>",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] = React.useState(0);\n\n  return (\n    <Button variant=\"primary\" onPress={() => setCount((c) => c + 1)}>\n      {count} Dogs\n    </Button>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] = React.useState(0);\n\n  return (\n    <Button\n      variant=\"primary\"\n      onPress={() => setCount((c) => c + 1)}\n    >\n      {count} Dogs\n    </Button>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [count, setCount] =\n    React.useState(0);\n\n  return (\n    <Button\n      variant=\"primary\"\n      onPress={() =>\n        setCount((c) =>\n          c + 1\n        )}\n    >\n      {count} Dogs\n    </Button>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let handlePress = () => {\n    // Trigger button pending state\n    setIsLoading(true);\n\n    setTimeout(() => {\n      // Cancel button pending state\n      setIsLoading(false);\n    }, 3000);\n  };\n\n  return (\n    <Button variant=\"primary\" isPending={isLoading} onPress={handlePress}>\n      Click me!\n    </Button>\n  );\n}\n",
                    "name": "Pending#"
                },
                {
                    "source": "function Example() {\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let handlePress = () => {\n    // Trigger button pending state\n    setIsLoading(true);\n\n    setTimeout(() => {\n      // Cancel button pending state\n      setIsLoading(false);\n    }, 3000);\n  };\n\n  return (\n    <Button\n      variant=\"primary\"\n      isPending={isLoading}\n      onPress={handlePress}\n    >\n      Click me!\n    </Button>\n  );\n}\n",
                    "name": "Pending#"
                },
                {
                    "source": "function Example() {\n  let [\n    isLoading,\n    setIsLoading\n  ] = React.useState(\n    false\n  );\n\n  let handlePress =\n    () => {\n      // Trigger button pending state\n      setIsLoading(true);\n\n      setTimeout(() => {\n        // Cancel button pending state\n        setIsLoading(\n          false\n        );\n      }, 3000);\n    };\n\n  return (\n    <Button\n      variant=\"primary\"\n      isPending={isLoading}\n      onPress={handlePress}\n    >\n      Click me!\n    </Button>\n  );\n}\n",
                    "name": "Pending#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"accent\" style=\"fill\">Save</Button>\n  <Button variant=\"accent\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Accent#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"accent\" style=\"fill\">Save</Button>\n  <Button variant=\"accent\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Accent#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <Button\n    variant=\"accent\"\n    style=\"fill\"\n  >\n    Save\n  </Button>\n  <Button\n    variant=\"accent\"\n    style=\"outline\"\n  >\n    Save\n  </Button>\n</Flex>",
                    "name": "Accent#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"primary\" style=\"fill\">Save</Button>\n  <Button variant=\"primary\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Primary#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"primary\" style=\"fill\">Save</Button>\n  <Button variant=\"primary\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Primary#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <Button\n    variant=\"primary\"\n    style=\"fill\"\n  >\n    Save\n  </Button>\n  <Button\n    variant=\"primary\"\n    style=\"outline\"\n  >\n    Save\n  </Button>\n</Flex>",
                    "name": "Primary#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"secondary\" style=\"fill\">Save</Button>\n  <Button variant=\"secondary\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Secondary#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"secondary\" style=\"fill\">Save</Button>\n  <Button variant=\"secondary\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Secondary#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <Button\n    variant=\"secondary\"\n    style=\"fill\"\n  >\n    Save\n  </Button>\n  <Button\n    variant=\"secondary\"\n    style=\"outline\"\n  >\n    Save\n  </Button>\n</Flex>",
                    "name": "Secondary#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"negative\" style=\"fill\">Save</Button>\n  <Button variant=\"negative\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Negative#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <Button variant=\"negative\" style=\"fill\">Save</Button>\n  <Button variant=\"negative\" style=\"outline\">Save</Button>\n</Flex>",
                    "name": "Negative#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <Button\n    variant=\"negative\"\n    style=\"fill\"\n  >\n    Save\n  </Button>\n  <Button\n    variant=\"negative\"\n    style=\"outline\"\n  >\n    Save\n  </Button>\n</Flex>",
                    "name": "Negative#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <Flex wrap gap=\"size-200\">\n      <Button variant=\"primary\" staticColor=\"white\" style=\"fill\">Save</Button>\n      <Button variant=\"primary\" staticColor=\"white\" style=\"outline\">\n        Save\n      </Button>\n    </Flex>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <Flex wrap gap=\"size-200\">\n      <Button variant=\"primary\" staticColor=\"black\" style=\"fill\">Save</Button>\n      <Button variant=\"primary\" staticColor=\"black\" style=\"outline\">\n        Save\n      </Button>\n    </Flex>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <Flex wrap gap=\"size-200\">\n      <Button\n        variant=\"primary\"\n        staticColor=\"white\"\n        style=\"fill\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"primary\"\n        staticColor=\"white\"\n        style=\"outline\"\n      >\n        Save\n      </Button>\n    </Flex>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <Flex wrap gap=\"size-200\">\n      <Button\n        variant=\"primary\"\n        staticColor=\"black\"\n        style=\"fill\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"primary\"\n        staticColor=\"black\"\n        style=\"outline\"\n      >\n        Save\n      </Button>\n    </Flex>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <Flex\n      wrap\n      gap=\"size-200\"\n    >\n      <Button\n        variant=\"primary\"\n        staticColor=\"white\"\n        style=\"fill\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"primary\"\n        staticColor=\"white\"\n        style=\"outline\"\n      >\n        Save\n      </Button>\n    </Flex>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <Flex\n      wrap\n      gap=\"size-200\"\n    >\n      <Button\n        variant=\"primary\"\n        staticColor=\"black\"\n        style=\"fill\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"primary\"\n        staticColor=\"black\"\n        style=\"outline\"\n      >\n        Save\n      </Button>\n    </Flex>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Button variant=\"accent\" isDisabled>Save</Button>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Button variant=\"accent\" isDisabled>Save</Button>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Button\n  variant=\"accent\"\n  isDisabled\n>\n  Save\n</Button>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Flex direction=\"row\" gap={8}>\n  <Button variant=\"accent\" aria-label=\"Ring for service\"><Bell /></Button>\n  <Button variant=\"primary\" aria-label=\"Ring for service\"><Bell /></Button>\n  <Button variant=\"secondary\" aria-label=\"Ring for service\"><Bell /></Button>\n</Flex>",
                    "name": "Icon only#"
                },
                {
                    "source": "<Flex direction=\"row\" gap={8}>\n  <Button variant=\"accent\" aria-label=\"Ring for service\">\n    <Bell />\n  </Button>\n  <Button variant=\"primary\" aria-label=\"Ring for service\">\n    <Bell />\n  </Button>\n  <Button\n    variant=\"secondary\"\n    aria-label=\"Ring for service\"\n  >\n    <Bell />\n  </Button>\n</Flex>",
                    "name": "Icon only#"
                },
                {
                    "source": "<Flex\n  direction=\"row\"\n  gap={8}\n>\n  <Button\n    variant=\"accent\"\n    aria-label=\"Ring for service\"\n  >\n    <Bell />\n  </Button>\n  <Button\n    variant=\"primary\"\n    aria-label=\"Ring for service\"\n  >\n    <Bell />\n  </Button>\n  <Button\n    variant=\"secondary\"\n    aria-label=\"Ring for service\"\n  >\n    <Bell />\n  </Button>\n</Flex>",
                    "name": "Icon only#"
                }
            ]
        },
        {
            "name": "ButtonGroup",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ButtonGroup.html",
            "examples": [
                {
                    "source": "import {Button, ButtonGroup} from '@adobe/react-spectrum';\n\n<ButtonGroup>\n  <Button variant=\"primary\">Rate Now</Button>\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n</ButtonGroup>",
                    "name": "Example#"
                },
                {
                    "source": "import {Button, ButtonGroup} from '@adobe/react-spectrum';\n\n<ButtonGroup>\n  <Button variant=\"primary\">Rate Now</Button>\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n</ButtonGroup>",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup\n} from '@adobe/react-spectrum';\n\n<ButtonGroup>\n  <Button variant=\"primary\">\n    Rate Now\n  </Button>\n  <Button variant=\"secondary\">\n    No, thanks\n  </Button>\n  <Button variant=\"secondary\">\n    Remind me later\n  </Button>\n</ButtonGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\">\n  <Button variant=\"secondary\">\n    No, thanks\n  </Button>\n  <Button variant=\"secondary\">\n    Remind me later\n  </Button>\n  <Button variant=\"primary\">\n    Rate Now\n  </Button>\n</ButtonGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\" align=\"end\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\" align=\"end\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup\n  orientation=\"vertical\"\n  align=\"end\"\n>\n  <Button variant=\"secondary\">\n    No, thanks\n  </Button>\n  <Button variant=\"secondary\">\n    Remind me later\n  </Button>\n  <Button variant=\"primary\">\n    Rate Now\n  </Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\" align=\"center\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup orientation=\"vertical\" align=\"center\">\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup\n  orientation=\"vertical\"\n  align=\"center\"\n>\n  <Button variant=\"secondary\">\n    No, thanks\n  </Button>\n  <Button variant=\"secondary\">\n    Remind me later\n  </Button>\n  <Button variant=\"primary\">\n    Rate Now\n  </Button>\n</ButtonGroup>",
                    "name": "Alignment#"
                },
                {
                    "source": "<ButtonGroup isDisabled>\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ButtonGroup isDisabled>\n  <Button variant=\"secondary\">No, thanks</Button>\n  <Button variant=\"secondary\">Remind me later</Button>\n  <Button variant=\"primary\">Rate Now</Button>\n</ButtonGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ButtonGroup\n  isDisabled\n>\n  <Button variant=\"secondary\">\n    No, thanks\n  </Button>\n  <Button variant=\"secondary\">\n    Remind me later\n  </Button>\n  <Button variant=\"primary\">\n    Rate Now\n  </Button>\n</ButtonGroup>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "LogicButton",
            "url": "https://react-spectrum.adobe.com/react-spectrum/LogicButton.html",
            "examples": [
                {
                    "source": "<LogicButton variant=\"and\">And</LogicButton>",
                    "name": "Example#"
                },
                {
                    "source": "<LogicButton variant=\"and\">And</LogicButton>",
                    "name": "Example#"
                },
                {
                    "source": "<LogicButton variant=\"and\">\n  And\n</LogicButton>",
                    "name": "Example#"
                },
                {
                    "source": "<LogicButton variant=\"or\">Or</LogicButton>",
                    "name": "Content#"
                },
                {
                    "source": "<LogicButton variant=\"or\">Or</LogicButton>",
                    "name": "Content#"
                },
                {
                    "source": "<LogicButton variant=\"or\">\n  Or\n</LogicButton>",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let [variant, setVariant] = React.useState<'and' | 'or'>('or');\n\n  return (\n    <LogicButton\n      variant={variant}\n      onPress={() => setVariant(variant === 'or' ? 'and' : 'or')}\n    >\n      {variant}\n    </LogicButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [variant, setVariant] = React.useState<'and' | 'or'>(\n    'or'\n  );\n\n  return (\n    <LogicButton\n      variant={variant}\n      onPress={() =>\n        setVariant(variant === 'or' ? 'and' : 'or')}\n    >\n      {variant}\n    </LogicButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    variant,\n    setVariant\n  ] = React.useState<\n    'and' | 'or'\n  >('or');\n\n  return (\n    <LogicButton\n      variant={variant}\n      onPress={() =>\n        setVariant(\n          variant ===\n              'or'\n            ? 'and'\n            : 'or'\n        )}\n    >\n      {variant}\n    </LogicButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<LogicButton variant=\"or\" marginEnd=\"20px\">Or</LogicButton>\n<LogicButton variant=\"and\">And</LogicButton>",
                    "name": "Variant#"
                },
                {
                    "source": "<LogicButton variant=\"or\" marginEnd=\"20px\">Or</LogicButton>\n<LogicButton variant=\"and\">And</LogicButton>",
                    "name": "Variant#"
                },
                {
                    "source": "<LogicButton\n  variant=\"or\"\n  marginEnd=\"20px\"\n>\n  Or\n</LogicButton>\n<LogicButton variant=\"and\">\n  And\n</LogicButton>",
                    "name": "Variant#"
                },
                {
                    "source": "<LogicButton variant=\"or\" isDisabled>Or</LogicButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<LogicButton variant=\"or\" isDisabled>Or</LogicButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<LogicButton\n  variant=\"or\"\n  isDisabled\n>\n  Or\n</LogicButton>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "ToggleButton",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ToggleButton.html",
            "examples": [
                {
                    "source": "<ToggleButton>Pin</ToggleButton>",
                    "name": "Example#"
                },
                {
                    "source": "<ToggleButton>Pin</ToggleButton>",
                    "name": "Example#"
                },
                {
                    "source": "<ToggleButton>\n  Pin\n</ToggleButton>",
                    "name": "Example#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Pin from '@spectrum-icons/workflow/PinOff';\n\n<ToggleButton>\n  <Pin />\n  <Text>Icon + Label</Text>\n</ToggleButton>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Pin from '@spectrum-icons/workflow/PinOff';\n\n<ToggleButton>\n  <Pin />\n  <Text>Icon + Label</Text>\n</ToggleButton>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport Pin from '@spectrum-icons/workflow/PinOff';\n\n<ToggleButton>\n  <Pin />\n  <Text>\n    Icon + Label\n  </Text>\n</ToggleButton>",
                    "name": "Content#"
                },
                {
                    "source": "<ToggleButton aria-label=\"Icon only\">\n  <Pin />\n</ToggleButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ToggleButton aria-label=\"Icon only\">\n  <Pin />\n</ToggleButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<ToggleButton aria-label=\"Icon only\">\n  <Pin />\n</ToggleButton>",
                    "name": "Accessibility#"
                },
                {
                    "source": "function Example() {\n  let [isSelected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      isEmphasized\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Pin\">\n      <Pin />\n    </ToggleButton>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [isSelected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      isEmphasized\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Pin\">\n      <Pin />\n    </ToggleButton>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    isSelected,\n    setSelected\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <ToggleButton\n      isEmphasized\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Pin\"\n    >\n      <Pin />\n    </ToggleButton>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ToggleButton isQuiet>Pin</ToggleButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ToggleButton isQuiet>Pin</ToggleButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ToggleButton isQuiet>\n  Pin\n</ToggleButton>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ToggleButton isDisabled>Pin</ToggleButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ToggleButton isDisabled>Pin</ToggleButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ToggleButton\n  isDisabled\n>\n  Pin\n</ToggleButton>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ToggleButton isEmphasized defaultSelected>Pin</ToggleButton>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<ToggleButton isEmphasized defaultSelected>\n  Pin\n</ToggleButton>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<ToggleButton\n  isEmphasized\n  defaultSelected\n>\n  Pin\n</ToggleButton>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <ToggleButton staticColor=\"white\">\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <ToggleButton staticColor=\"black\" isQuiet defaultSelected>\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex wrap gap=\"size-250\">\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ToggleButton staticColor=\"white\">\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ToggleButton\n      staticColor=\"black\"\n      isQuiet\n      defaultSelected\n    >\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-250\"\n>\n  <View\n    backgroundColor=\"static-blue-700\"\n    padding=\"size-500\"\n  >\n    <ToggleButton staticColor=\"white\">\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n  <View\n    backgroundColor=\"static-yellow-400\"\n    padding=\"size-500\"\n  >\n    <ToggleButton\n      staticColor=\"black\"\n      isQuiet\n      defaultSelected\n    >\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n</Flex>",
                    "name": "Static color#"
                }
            ]
        }
    ],
    "Collections": [
        {
            "name": "ActionBar",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ActionBar.html",
            "examples": [
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n    new Set(['photoshop'])\n  );\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Example#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all'\n          ? 'all'\n          : selectedKeys.size}\n        onAction={(key) =>\n          alert(`Performing ${key} action...`)}\n        onClearSelection={() =>\n          setSelectedKeys(new Set())}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Example#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(\n    new Set([\n      'photoshop'\n    ])\n  );\n\n  return (\n    <ActionBarContainer\n      height={300}\n      maxWidth=\"size-6000\"\n    >\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">\n          Adobe Photoshop\n        </Item>\n        <Item key=\"illustrator\">\n          Adobe\n          Illustrator\n        </Item>\n        <Item key=\"xd\">\n          Adobe XD\n        </Item>\n      </ListView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys ===\n            'all'\n          ? 'all'\n          : selectedKeys\n            .size}\n        onAction={(\n          key\n        ) =>\n          alert(\n            `Performing ${key} action...`\n          )}\n        onClearSelection={() =>\n          setSelectedKeys(\n            new Set()\n          )}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>\n            Edit\n          </Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>\n            Copy\n          </Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>\n            Delete\n          </Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Example#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let barItems = [\n    { key: 'edit', label: 'Edit' },\n    { key: 'copy', label: 'Copy' },\n    { key: 'delete', label: 'Delete' }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n    new Set(['photoshop'])\n  );\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        items={barItems}\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}\n        isEmphasized\n      >\n        {(item) => (\n          <Item key={item.key}>\n            {item.label}\n          </Item>\n        )}\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Content#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let barItems = [\n    { key: 'edit', label: 'Edit' },\n    { key: 'copy', label: 'Copy' },\n    { key: 'delete', label: 'Delete' }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        items={barItems}\n        selectedItemCount={selectedKeys === 'all'\n          ? 'all'\n          : selectedKeys.size}\n        onAction={(key) =>\n          alert(`Performing ${key} action...`)}\n        onClearSelection={() =>\n          setSelectedKeys(new Set())}\n        isEmphasized\n      >\n        {(item) => (\n          <Item key={item.key}>\n            {item.label}\n          </Item>\n        )}\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Content#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let barItems = [\n    {\n      key: 'edit',\n      label: 'Edit'\n    },\n    {\n      key: 'copy',\n      label: 'Copy'\n    },\n    {\n      key: 'delete',\n      label: 'Delete'\n    }\n  ];\n\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(\n    new Set([\n      'photoshop'\n    ])\n  );\n\n  return (\n    <ActionBarContainer\n      height={300}\n      maxWidth=\"size-6000\"\n    >\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">\n          Adobe Photoshop\n        </Item>\n        <Item key=\"illustrator\">\n          Adobe\n          Illustrator\n        </Item>\n        <Item key=\"xd\">\n          Adobe XD\n        </Item>\n      </ListView>\n      <ActionBar\n        items={barItems}\n        selectedItemCount={selectedKeys ===\n            'all'\n          ? 'all'\n          : selectedKeys\n            .size}\n        onAction={(\n          key\n        ) =>\n          alert(\n            `Performing ${key} action...`\n          )}\n        onClearSelection={() =>\n          setSelectedKeys(\n            new Set()\n          )}\n        isEmphasized\n      >\n        {(item) => (\n          <Item\n            key={item\n              .key}\n          >\n            {item.label}\n          </Item>\n        )}\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />",
                    "name": "Content#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction ActionBarActions(props) {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\n  let rows = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n  ];\n\n  return (\n    <ActionBarContainer height=\"size-5000\">\n      <TableView\n        aria-label=\"Table with action bar and controlled selection\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <TableHeader>\n          <Column key=\"name\">Name</Column>\n          <Column key=\"type\">Type</Column>\n          <Column key=\"level\" align=\"end\">Level</Column>\n        </TableHeader>\n        <TableBody items={rows}>\n          {(item) => (\n            <Row>\n              {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n            </Row>\n          )}\n        </TableBody>\n      </TableView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onClearSelection={() => {\n          setSelectedKeys(new Set());\n        }}\n        onAction={(key) => alert(`Performing ${key} action...`)}      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction ActionBarActions(props) {\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set([2]));\n  let rows = [\n    {\n      id: 1,\n      name: 'Charizard',\n      type: 'Fire, Flying',\n      level: '67'\n    },\n    {\n      id: 2,\n      name: 'Blastoise',\n      type: 'Water',\n      level: '56'\n    },\n    {\n      id: 3,\n      name: 'Venusaur',\n      type: 'Grass, Poison',\n      level: '83'\n    },\n    {\n      id: 4,\n      name: 'Pikachu',\n      type: 'Electric',\n      level: '100'\n    }\n  ];\n\n  return (\n    <ActionBarContainer height=\"size-5000\">\n      <TableView\n        aria-label=\"Table with action bar and controlled selection\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <TableHeader>\n          <Column key=\"name\">Name</Column>\n          <Column key=\"type\">Type</Column>\n          <Column key=\"level\" align=\"end\">Level</Column>\n        </TableHeader>\n        <TableBody items={rows}>\n          {(item) => (\n            <Row>\n              {(columnKey) => <Cell>{item[columnKey]}\n              </Cell>}\n            </Row>\n          )}\n        </TableBody>\n      </TableView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all'\n          ? 'all'\n          : selectedKeys.size}\n        onClearSelection={() => {\n          setSelectedKeys(new Set());\n        }}\n        onAction={(key) =>\n          alert(`Performing ${key} action...`)}      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction ActionBarActions(\n  props\n) {\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(new Set([2]));\n  let rows = [\n    {\n      id: 1,\n      name: 'Charizard',\n      type:\n        'Fire, Flying',\n      level: '67'\n    },\n    {\n      id: 2,\n      name: 'Blastoise',\n      type: 'Water',\n      level: '56'\n    },\n    {\n      id: 3,\n      name: 'Venusaur',\n      type:\n        'Grass, Poison',\n      level: '83'\n    },\n    {\n      id: 4,\n      name: 'Pikachu',\n      type: 'Electric',\n      level: '100'\n    }\n  ];\n\n  return (\n    <ActionBarContainer height=\"size-5000\">\n      <TableView\n        aria-label=\"Table with action bar and controlled selection\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <TableHeader>\n          <Column key=\"name\">\n            Name\n          </Column>\n          <Column key=\"type\">\n            Type\n          </Column>\n          <Column\n            key=\"level\"\n            align=\"end\"\n          >\n            Level\n          </Column>\n        </TableHeader>\n        <TableBody\n          items={rows}\n        >\n          {(item) => (\n            <Row>\n              {(columnKey) => (\n                <Cell>\n                  {item[\n                    columnKey\n                  ]}\n                </Cell>\n              )}\n            </Row>\n          )}\n        </TableBody>\n      </TableView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys ===\n            'all'\n          ? 'all'\n          : selectedKeys\n            .size}\n        onClearSelection={() => {\n          setSelectedKeys(\n            new Set()\n          );\n        }}\n        onAction={(key) =>\n          alert(\n            `Performing ${key} action...`\n          )}      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>\n            Edit\n          </Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>\n            Delete\n          </Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example({ isEmphasized }: { isEmphasized?: boolean }) {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n    new Set(['photoshop'])\n  );\n\n  return (\n    <ActionBarContainer height={300} width=\"size-5000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        isEmphasized={isEmphasized}        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Flex direction=\"row\" gap=\"size-200\" wrap>\n  <Example />\n  <Example isEmphasized />\n</Flex>",
                    "name": "isEmphasized#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example(\n  { isEmphasized }: { isEmphasized?: boolean }\n) {\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} width=\"size-5000\">\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        isEmphasized={isEmphasized}        selectedItemCount={selectedKeys === 'all'\n          ? 'all'\n          : selectedKeys.size}\n        onAction={(key) =>\n          alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Flex direction=\"row\" gap=\"size-200\" wrap>\n  <Example />\n  <Example isEmphasized />\n</Flex>",
                    "name": "isEmphasized#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example(\n  { isEmphasized }: {\n    isEmphasized?:\n      boolean;\n  }\n) {\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(\n    new Set([\n      'photoshop'\n    ])\n  );\n\n  return (\n    <ActionBarContainer\n      height={300}\n      width=\"size-5000\"\n    >\n      <ListView\n        aria-label=\"ListView with action bar\"\n        selectionMode=\"multiple\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"photoshop\">\n          Adobe Photoshop\n        </Item>\n        <Item key=\"illustrator\">\n          Adobe\n          Illustrator\n        </Item>\n        <Item key=\"xd\">\n          Adobe XD\n        </Item>\n      </ListView>\n      <ActionBar\n        isEmphasized={isEmphasized}        selectedItemCount={selectedKeys ===\n            'all'\n          ? 'all'\n          : selectedKeys\n            .size}\n        onAction={(\n          key\n        ) =>\n          alert(\n            `Performing ${key} action...`\n          )}\n        onClearSelection={() =>\n          setSelectedKeys(\n            new Set()\n          )}\n      >\n        <Item key=\"edit\">\n          <Edit />\n          <Text>\n            Edit\n          </Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>\n            Copy\n          </Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>\n            Delete\n          </Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Flex\n  direction=\"row\"\n  gap=\"size-200\"\n  wrap\n>\n  <Example />\n  <Example\n    isEmphasized\n  />\n</Flex>",
                    "name": "isEmphasized#"
                }
            ]
        },
        {
            "name": "ActionMenu",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ActionMenu.html",
            "examples": [
                {
                    "source": "<ActionMenu>\n  <Item>Cut</Item>\n  <Item>Copy</Item>\n  <Item>Paste</Item>\n</ActionMenu>",
                    "name": "Example#"
                },
                {
                    "source": "<ActionMenu>\n  <Item>Cut</Item>\n  <Item>Copy</Item>\n  <Item>Paste</Item>\n</ActionMenu>",
                    "name": "Example#"
                },
                {
                    "source": "<ActionMenu>\n  <Item>Cut</Item>\n  <Item>Copy</Item>\n  <Item>Paste</Item>\n</ActionMenu>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let actionMenuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Select All'}\n  ];\n\n  return (\n    <ActionMenu items={actionMenuItems}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </ActionMenu>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let actionMenuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Select All'}\n  ];\n\n  return (\n    <ActionMenu items={actionMenuItems}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </ActionMenu>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let actionMenuItems = [\n    { name: 'Cut' },\n    { name: 'Copy' },\n    { name: 'Paste' },\n    {\n      name: 'Select All'\n    }\n  ];\n\n  return (\n    <ActionMenu\n      items={actionMenuItems}\n    >\n      {(item) => (\n        <Item\n          key={item.name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </ActionMenu>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionMenu onAction={setAction}>\n        <Item key=\"cut\">Cut</Item>\n        <Item key=\"copy\">Copy</Item>\n        <Item key=\"paste\">Paste</Item>\n      </ActionMenu>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionMenu onAction={setAction}>\n        <Item key=\"cut\">Cut</Item>\n        <Item key=\"copy\">Copy</Item>\n        <Item key=\"paste\">Paste</Item>\n      </ActionMenu>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    action,\n    setAction\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <ActionMenu\n        onAction={setAction}\n      >\n        <Item key=\"cut\">\n          Cut\n        </Item>\n        <Item key=\"copy\">\n          Copy\n        </Item>\n        <Item key=\"paste\">\n          Paste\n        </Item>\n      </ActionMenu>\n      <p>\n        Action: {action}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ActionMenu>\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ActionMenu>",
                    "name": "Links#"
                },
                {
                    "source": "<ActionMenu>\n  <Item href=\"https://adobe.com/\" target=\"_blank\">\n    Adobe\n  </Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">\n    Apple\n  </Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">\n    Google\n  </Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">\n    Microsoft\n  </Item>\n</ActionMenu>",
                    "name": "Links#"
                },
                {
                    "source": "<ActionMenu>\n  <Item\n    href=\"https://adobe.com/\"\n    target=\"_blank\"\n  >\n    Adobe\n  </Item>\n  <Item\n    href=\"https://apple.com/\"\n    target=\"_blank\"\n  >\n    Apple\n  </Item>\n  <Item\n    href=\"https://google.com/\"\n    target=\"_blank\"\n  >\n    Google\n  </Item>\n  <Item\n    href=\"https://microsoft.com/\"\n    target=\"_blank\"\n  >\n    Microsoft\n  </Item>\n</ActionMenu>",
                    "name": "Links#"
                },
                {
                    "source": "<ActionMenu>\n  <Section title=\"File\">\n    <Item key=\"new\">New</Item>\n    <Item key=\"open\">Open...</Item>\n  </Section>\n  <Section title=\"Save\">\n    <Item key=\"save\">Save</Item>\n    <Item key=\"saveAs\">Save As...</Item>\n    <Item key=\"saveAll\">Save All</Item>\n  </Section>\n</ActionMenu>",
                    "name": "Static Items#"
                },
                {
                    "source": "<ActionMenu>\n  <Section title=\"File\">\n    <Item key=\"new\">New</Item>\n    <Item key=\"open\">Open...</Item>\n  </Section>\n  <Section title=\"Save\">\n    <Item key=\"save\">Save</Item>\n    <Item key=\"saveAs\">Save As...</Item>\n    <Item key=\"saveAll\">Save All</Item>\n  </Section>\n</ActionMenu>",
                    "name": "Static Items#"
                },
                {
                    "source": "<ActionMenu>\n  <Section title=\"File\">\n    <Item key=\"new\">\n      New\n    </Item>\n    <Item key=\"open\">\n      Open...\n    </Item>\n  </Section>\n  <Section title=\"Save\">\n    <Item key=\"save\">\n      Save\n    </Item>\n    <Item key=\"saveAs\">\n      Save As...\n    </Item>\n    <Item key=\"saveAll\">\n      Save All\n    </Item>\n  </Section>\n</ActionMenu>",
                    "name": "Static Items#"
                },
                {
                    "source": "function Example() {\n  let openWindows = [\n    {\n      name: 'Reversion',\n      id: 'reversion',\n      children: [\n        {id: 'undo', name: 'Undo'},\n        {id: 'redo', name: 'Redo'}\n      ]\n    },\n    {\n      name: 'Clipboard',\n      id: 'clipboard',\n      children: [\n        {id: 'cut', name: 'Cut'},\n        {id: 'copy', name: 'Copy'},\n        {id: 'paste', name: 'Paste'}\n      ]\n    }\n  ];\n\n  return (\n    <ActionMenu\n      items={openWindows}>\n      {item => (\n        <Section items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ActionMenu>\n  );\n}",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "function Example() {\n  let openWindows = [\n    {\n      name: 'Reversion',\n      id: 'reversion',\n      children: [\n        {id: 'undo', name: 'Undo'},\n        {id: 'redo', name: 'Redo'}\n      ]\n    },\n    {\n      name: 'Clipboard',\n      id: 'clipboard',\n      children: [\n        {id: 'cut', name: 'Cut'},\n        {id: 'copy', name: 'Copy'},\n        {id: 'paste', name: 'Paste'}\n      ]\n    }\n  ];\n\n  return (\n    <ActionMenu\n      items={openWindows}>\n      {item => (\n        <Section items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ActionMenu>\n  );\n}",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "function Example() {\n  let openWindows = [\n    {\n      name: 'Reversion',\n      id: 'reversion',\n      children: [\n        {\n          id: 'undo',\n          name: 'Undo'\n        },\n        {\n          id: 'redo',\n          name: 'Redo'\n        }\n      ]\n    },\n    {\n      name: 'Clipboard',\n      id: 'clipboard',\n      children: [\n        {\n          id: 'cut',\n          name: 'Cut'\n        },\n        {\n          id: 'copy',\n          name: 'Copy'\n        },\n        {\n          id: 'paste',\n          name: 'Paste'\n        }\n      ]\n    }\n  ];\n\n  return (\n    <ActionMenu\n      items={openWindows}\n    >\n      {(item) => (\n        <Section\n          items={item\n            .children}\n          title={item\n            .name}\n        >\n          {(item) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </Section>\n      )}\n    </ActionMenu>\n  );\n}\n",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import {Keyboard, Text} from '@adobe/react-spectrum';\n<ActionMenu>\n  <Item key=\"cut\" textValue=\"cut\">\n    <Cut />\n    <Text>Cut</Text>\n    <Keyboard>\u00e2\u008c\u0098X</Keyboard>\n  </Item>\n  <Item key=\"copy\" textValue=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n    <Keyboard>\u00e2\u008c\u0098C</Keyboard>\n  </Item>\n  <Item key=\"paste\" textValue=\"paste\">\n    <Paste />\n    <Text>Paste</Text>\n    <Keyboard>\u00e2\u008c\u0098V</Keyboard>\n  </Item>\n</ActionMenu>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "import {Keyboard, Text} from '@adobe/react-spectrum';\n<ActionMenu>\n  <Item key=\"cut\" textValue=\"cut\">\n    <Cut />\n    <Text>Cut</Text>\n    <Keyboard>\u00e2\u008c\u0098X</Keyboard>\n  </Item>\n  <Item key=\"copy\" textValue=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n    <Keyboard>\u00e2\u008c\u0098C</Keyboard>\n  </Item>\n  <Item key=\"paste\" textValue=\"paste\">\n    <Paste />\n    <Text>Paste</Text>\n    <Keyboard>\u00e2\u008c\u0098V</Keyboard>\n  </Item>\n</ActionMenu>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "import {\n  Keyboard,\n  Text\n} from '@adobe/react-spectrum';\n<ActionMenu>\n  <Item\n    key=\"cut\"\n    textValue=\"cut\"\n  >\n    <Cut />\n    <Text>Cut</Text>\n    <Keyboard>\n      \u00e2\u008c\u0098X\n    </Keyboard>\n  </Item>\n  <Item\n    key=\"copy\"\n    textValue=\"copy\"\n  >\n    <Copy />\n    <Text>Copy</Text>\n    <Keyboard>\n      \u00e2\u008c\u0098C\n    </Keyboard>\n  </Item>\n  <Item\n    key=\"paste\"\n    textValue=\"paste\"\n  >\n    <Paste />\n    <Text>Paste</Text>\n    <Keyboard>\n      \u00e2\u008c\u0098V\n    </Keyboard>\n  </Item>\n</ActionMenu>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "<ActionMenu\n  isQuiet\n  items={[\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionMenu\n  isQuiet\n  items={[\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionMenu\n  isQuiet\n  items={[\n    {\n      name: 'Cut',\n      id: 'cut'\n    },\n    {\n      name: 'Copy',\n      id: 'copy'\n    },\n    {\n      name: 'Paste',\n      id: 'paste'\n    }\n  ]}\n>\n  {(item) => (\n    <Item>\n      {item.name}\n    </Item>\n  )}\n</ActionMenu>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  isDisabled>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  isDisabled>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {\n      name: 'Undo',\n      id: 'undo'\n    },\n    {\n      name: 'Redo',\n      id: 'redo'\n    },\n    {\n      name: 'Cut',\n      id: 'cut'\n    },\n    {\n      name: 'Copy',\n      id: 'copy'\n    },\n    {\n      name: 'Paste',\n      id: 'paste'\n    }\n  ]}\n  isDisabled\n>\n  {(item) => (\n    <Item>\n      {item.name}\n    </Item>\n  )}\n</ActionMenu>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  disabledKeys={['redo', 'paste']}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Disabled items#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  disabledKeys={['redo', 'paste']}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>",
                    "name": "Disabled items#"
                },
                {
                    "source": "<ActionMenu\n  items={[\n    {\n      name: 'Undo',\n      id: 'undo'\n    },\n    {\n      name: 'Redo',\n      id: 'redo'\n    },\n    {\n      name: 'Cut',\n      id: 'cut'\n    },\n    {\n      name: 'Copy',\n      id: 'copy'\n    },\n    {\n      name: 'Paste',\n      id: 'paste'\n    }\n  ]}\n  disabledKeys={[\n    'redo',\n    'paste'\n  ]}\n>\n  {(item) => (\n    <Item>\n      {item.name}\n    </Item>\n  )}\n</ActionMenu>",
                    "name": "Disabled items#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu align=\"end\" direction=\"top\" shouldFlip={false}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"start\" align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"end\" align=\"end\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu\n    align=\"end\"\n    direction=\"top\"\n    shouldFlip={false}\n  >\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"start\" align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"end\" align=\"end\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu align=\"start\">\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n  <ActionMenu\n    align=\"end\"\n    direction=\"top\"\n    shouldFlip={false}\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n  <ActionMenu\n    direction=\"start\"\n    align=\"start\"\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n  <ActionMenu\n    direction=\"end\"\n    align=\"end\"\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu shouldFlip>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu shouldFlip={false}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu shouldFlip>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu shouldFlip={false}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <ActionMenu\n    shouldFlip\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n  <ActionMenu\n    shouldFlip={false}\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n  </ActionMenu>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <ActionMenu\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </ActionMenu>\n  );\n}",
                    "name": "Open#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <ActionMenu\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </ActionMenu>\n  );\n}",
                    "name": "Open#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <ActionMenu\n      isOpen={open}\n      onOpenChange={setOpen}\n    >\n      <Item key=\"cut\">\n        Cut\n      </Item>\n      <Item key=\"copy\">\n        Copy\n      </Item>\n      <Item key=\"paste\">\n        Paste\n      </Item>\n    </ActionMenu>\n  );\n}\n",
                    "name": "Open#"
                }
            ]
        },
        {
            "name": "ListBox",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ListBox.html",
            "examples": [
                {
                    "source": "<ListBox width=\"size-2400\" aria-label=\"Alignment\">\n  <Item>Left</Item>\n  <Item>Middle</Item>\n  <Item>Right</Item>\n</ListBox>",
                    "name": "Example#"
                },
                {
                    "source": "<ListBox width=\"size-2400\" aria-label=\"Alignment\">\n  <Item>Left</Item>\n  <Item>Middle</Item>\n  <Item>Right</Item>\n</ListBox>",
                    "name": "Example#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Alignment\"\n>\n  <Item>Left</Item>\n  <Item>Middle</Item>\n  <Item>Right</Item>\n</ListBox>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <ListBox\n        width=\"size-2400\"\n        aria-label=\"Animals\"\n        items={options}\n        selectionMode=\"single\"\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <ListBox\n        width=\"size-2400\"\n        aria-label=\"Animals\"\n        items={options}\n        selectionMode=\"single\"\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <ListBox\n        width=\"size-2400\"\n        aria-label=\"Animals\"\n        items={options}\n        selectionMode=\"single\"\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ListBox>\n      <p>\n        Animal id:{' '}\n        {animalId}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    { name: 'Koala' },\n    { name: 'Kangaroo' },\n    { name: 'Platypus' },\n    { name: 'Bald Eagle' },\n    { name: 'Bison' },\n    { name: 'Skunk' }\n  ];\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n    new Set(['Bison'])\n  );\n\n  return (\n    <Flex direction=\"row\" gap=\"size-350\">\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        defaultSelectedKeys={['Bison', 'Koala']}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    { name: 'Koala' },\n    { name: 'Kangaroo' },\n    { name: 'Platypus' },\n    { name: 'Bald Eagle' },\n    { name: 'Bison' },\n    { name: 'Skunk' }\n  ];\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set(['Bison']));\n\n  return (\n    <Flex direction=\"row\" gap=\"size-350\">\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        defaultSelectedKeys={['Bison', 'Koala']}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    { name: 'Koala' },\n    { name: 'Kangaroo' },\n    { name: 'Platypus' },\n    {\n      name: 'Bald Eagle'\n    },\n    { name: 'Bison' },\n    { name: 'Skunk' }\n  ];\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(new Set(['Bison']));\n\n  return (\n    <Flex\n      direction=\"row\"\n      gap=\"size-350\"\n    >\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        defaultSelectedKeys={[\n          'Bison',\n          'Koala'\n        ]}\n        width=\"size-2400\"\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </ListBox>\n\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        width=\"size-2400\"\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "<ListBox aria-label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ListBox aria-label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">\n    Adobe\n  </Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">\n    Apple\n  </Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">\n    Google\n  </Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">\n    Microsoft\n  </Item>\n</ListBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ListBox aria-label=\"Links\">\n  <Item\n    href=\"https://adobe.com/\"\n    target=\"_blank\"\n  >\n    Adobe\n  </Item>\n  <Item\n    href=\"https://apple.com/\"\n    target=\"_blank\"\n  >\n    Apple\n  </Item>\n  <Item\n    href=\"https://google.com/\"\n    target=\"_blank\"\n  >\n    Google\n  </Item>\n  <Item\n    href=\"https://microsoft.com/\"\n    target=\"_blank\"\n  >\n    Microsoft\n  </Item>\n</ListBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>",
                    "name": "Static Items#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>",
                    "name": "Static Items#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">\n      Aardvark\n    </Item>\n    <Item key=\"Kangaroo\">\n      Kangaroo\n    </Item>\n    <Item key=\"Snake\">\n      Snake\n    </Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">\n      Danni\n    </Item>\n    <Item key=\"Devon\">\n      Devon\n    </Item>\n    <Item key=\"Ross\">\n      Ross\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "Static Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {name: 'Australian', children: [\n      {id: 2, name: 'Koala'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Platypus'}\n    ]},\n    {name: 'American', children: [\n      {id: 6, name: 'Bald Eagle'},\n      {id: 7, name: 'Bison'},\n      {id: 8, name: 'Skunk'}\n    ]}\n  ];\n  let [selected, setSelected] = React.useState<Selection>(new Set());\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}\n      width=\"size-2400\">\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ListBox>\n  );\n}",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {\n      name: 'Australian',\n      children: [\n        { id: 2, name: 'Koala' },\n        { id: 3, name: 'Kangaroo' },\n        { id: 4, name: 'Platypus' }\n      ]\n    },\n    {\n      name: 'American',\n      children: [\n        { id: 6, name: 'Bald Eagle' },\n        { id: 7, name: 'Bison' },\n        { id: 8, name: 'Skunk' }\n      ]\n    }\n  ];\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set()\n  );\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}\n      width=\"size-2400\"\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item.children}\n          title={item.name}\n        >\n          {(item) => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ListBox>\n  );\n}\n",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {\n      name: 'Australian',\n      children: [\n        {\n          id: 2,\n          name: 'Koala'\n        },\n        {\n          id: 3,\n          name:\n            'Kangaroo'\n        },\n        {\n          id: 4,\n          name:\n            'Platypus'\n        }\n      ]\n    },\n    {\n      name: 'American',\n      children: [\n        {\n          id: 6,\n          name:\n            'Bald Eagle'\n        },\n        {\n          id: 7,\n          name: 'Bison'\n        },\n        {\n          id: 8,\n          name: 'Skunk'\n        }\n      ]\n    }\n  ];\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(new Set());\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}\n      width=\"size-2400\"\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item\n            .children}\n          title={item\n            .name}\n        >\n          {(item) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </Section>\n      )}\n    </ListBox>\n  );\n}\n",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction StaticExample() {\n  let [frequency, setFrequency] = React.useState<Selection>(new Set());\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Choose frequency\"\n        selectionMode=\"single\"\n        onSelectionChange={selected => setFrequency(selected)}\n        width=\"size-2400\">\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </ListBox>\n      <p>You selected: {[...frequency][0]}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction StaticExample() {\n  let [frequency, setFrequency] = React.useState<Selection>(\n    new Set()\n  );\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Choose frequency\"\n        selectionMode=\"single\"\n        onSelectionChange={(selected) =>\n          setFrequency(selected)}\n        width=\"size-2400\"\n      >\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </ListBox>\n      <p>You selected: {[...frequency][0]}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction StaticExample() {\n  let [\n    frequency,\n    setFrequency\n  ] = React.useState<\n    Selection\n  >(new Set());\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Choose frequency\"\n        selectionMode=\"single\"\n        onSelectionChange={(selected) =>\n          setFrequency(\n            selected\n          )}\n        width=\"size-2400\"\n      >\n        <Item key=\"Rarely\">\n          Rarely\n        </Item>\n        <Item key=\"Sometimes\">\n          Sometimes\n        </Item>\n        <Item key=\"Always\">\n          Always\n        </Item>\n      </ListBox>\n      <p>\n        You selected:\n        {' '}\n        {[...frequency][\n          0\n        ]}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction DynamicExample() {\n  let [animalId, setAnimalId] = React.useState<Selection>(new Set());\n  let options = [\n    {id: 1, name: 'Aardvark'},\n    {id: 2, name: 'Cat'},\n    {id: 3, name: 'Dog'},\n    {id: 4, name: 'Kangaroo'},\n    {id: 5, name: 'Koala'},\n    {id: 6, name: 'Penguin'},\n    {id: 7, name: 'Snake'},\n    {id: 8, name: 'Turtle'},\n    {id: 9, name: 'Wombat'}\n  ];\n\n  return (\n    <>\n      <ListBox\n        selectionMode=\"single\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={selected => setAnimalId(selected)}\n        width=\"size-2400\">\n        {item => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Your favorite animal has id: {[...animalId][0]}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction DynamicExample() {\n  let [animalId, setAnimalId] = React.useState<Selection>(\n    new Set()\n  );\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <>\n      <ListBox\n        selectionMode=\"single\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={(selected) =>\n          setAnimalId(selected)}\n        width=\"size-2400\"\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Your favorite animal has id: {[...animalId][0]}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction DynamicExample() {\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState<\n    Selection\n  >(new Set());\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n\n  return (\n    <>\n      <ListBox\n        selectionMode=\"single\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={(selected) =>\n          setAnimalId(\n            selected\n          )}\n        width=\"size-2400\"\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ListBox>\n      <p>\n        Your favorite\n        animal has id:\n        {' '}\n        {[...animalId][\n          0\n        ]}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ListBox width=\"size-2400\" aria-label=\"Options\" selectionMode=\"single\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "Complex Items#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Options\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "Complex Items#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Options\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">\n        Read Only\n      </Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>\n        Write\n      </Text>\n      <Text slot=\"description\">\n        Read and Write\n        Only\n      </Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>\n        Admin\n      </Text>\n      <Text slot=\"description\">\n        Full access\n      </Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "Complex Items#"
                },
                {
                    "source": "<ListBox width=\"size-2400\" aria-label=\"Options\" selectionMode=\"single\">\n  <Section title=\"Users\">\n    <Item textValue=\"User 1\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 1</Text>\n    </Item>\n    <Item textValue=\"User 2\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 2</Text>\n    </Item>\n    <Item textValue=\"User 3\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 3</Text>\n    </Item>\n    <Item textValue=\"User 4\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 4</Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Options\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Users\">\n    <Item textValue=\"User 1\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 1</Text>\n    </Item>\n    <Item textValue=\"User 2\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 2</Text>\n    </Item>\n    <Item textValue=\"User 3\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 3</Text>\n    </Item>\n    <Item textValue=\"User 4\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 4</Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Options\"\n  selectionMode=\"single\"\n>\n  <Section title=\"Users\">\n    <Item textValue=\"User 1\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>\n        User 1\n      </Text>\n    </Item>\n    <Item textValue=\"User 2\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>\n        User 2\n      </Text>\n    </Item>\n    <Item textValue=\"User 3\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>\n        User 3\n      </Text>\n    </Item>\n    <Item textValue=\"User 4\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>\n        User 4\n      </Text>\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({ signal, cursor }) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {\n        signal\n      });\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Flex maxHeight=\"size-2400\">\n      <ListBox\n        aria-label=\"Pick a Pokemon\"\n        items={list.items}\n        isLoading={list.isLoading}\n        onLoadMore={list.loadMore}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({ signal, cursor }) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(\n        cursor || 'https://pokeapi.co/api/v2/pokemon',\n        { signal }\n      );\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Flex maxHeight=\"size-2400\">\n      <ListBox\n        aria-label=\"Pick a Pokemon\"\n        items={list.items}\n        isLoading={list.isLoading}\n        onLoadMore={list.loadMore}\n        width=\"size-2400\"\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list =\n    useAsyncList<\n      Pokemon\n    >({\n      async load(\n        {\n          signal,\n          cursor\n        }\n      ) {\n        // If no cursor is available, then we're loading the first page.\n        // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n        let res =\n          await fetch(\n            cursor ||\n              'https://pokeapi.co/api/v2/pokemon',\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next\n        };\n      }\n    });\n\n  return (\n    <Flex maxHeight=\"size-2400\">\n      <ListBox\n        aria-label=\"Pick a Pokemon\"\n        items={list\n          .items}\n        isLoading={list\n          .isLoading}\n        onLoadMore={list\n          .loadMore}\n        width=\"size-2400\"\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </ListBox>\n    </Flex>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "<ListBox\n  isLoading\n  aria-label=\"Choose frequency\"\n  selectionMode=\"single\"\n  width=\"size-1200\">\n</ListBox>",
                    "name": "Loading#"
                },
                {
                    "source": "<ListBox\n  isLoading\n  aria-label=\"Choose frequency\"\n  selectionMode=\"single\"\n  width=\"size-1200\">\n</ListBox>",
                    "name": "Loading#"
                },
                {
                    "source": "<ListBox\n  isLoading\n  aria-label=\"Choose frequency\"\n  selectionMode=\"single\"\n  width=\"size-1200\"\n>\n</ListBox>",
                    "name": "Loading#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  disabledKeys={['Snake', 'Ross']}\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  disabledKeys={['Snake', 'Ross']}\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ListBox\n  width=\"size-2400\"\n  aria-label=\"Pick your favorite\"\n  disabledKeys={[\n    'Snake',\n    'Ross'\n  ]}\n  selectionMode=\"single\"\n>\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">\n      Aardvark\n    </Item>\n    <Item key=\"Kangaroo\">\n      Kangaroo\n    </Item>\n    <Item key=\"Snake\">\n      Snake\n    </Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">\n      Danni\n    </Item>\n    <Item key=\"Devon\">\n      Devon\n    </Item>\n    <Item key=\"Ross\">\n      Ross\n    </Item>\n  </Section>\n</ListBox>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "ListView",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ListView.html",
            "examples": [
                {
                    "source": "<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Static ListView items example\"\n  maxWidth=\"size-6000\"\n>\n  <Item>Adobe Photoshop</Item>\n  <Item>Adobe InDesign</Item>\n  <Item>Adobe AfterEffects</Item>\n  <Item>Adobe Illustrator</Item>\n  <Item>Adobe Lightroom</Item>\n</ListView>",
                    "name": "Example#"
                },
                {
                    "source": "<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Static ListView items example\"\n  maxWidth=\"size-6000\"\n>\n  <Item>Adobe Photoshop</Item>\n  <Item>Adobe InDesign</Item>\n  <Item>Adobe AfterEffects</Item>\n  <Item>Adobe Illustrator</Item>\n  <Item>Adobe Lightroom</Item>\n</ListView>",
                    "name": "Example#"
                },
                {
                    "source": "<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Static ListView items example\"\n  maxWidth=\"size-6000\"\n>\n  <Item>\n    Adobe Photoshop\n  </Item>\n  <Item>\n    Adobe InDesign\n  </Item>\n  <Item>\n    Adobe AfterEffects\n  </Item>\n  <Item>\n    Adobe Illustrator\n  </Item>\n  <Item>\n    Adobe Lightroom\n  </Item>\n</ListView>",
                    "name": "Example#"
                },
                {
                    "source": "const items = [\n  { id: 1, name: 'Adobe Photoshop' },\n  { id: 2, name: 'Adobe XD' },\n  { id: 3, name: 'Adobe InDesign' },\n  { id: 4, name: 'Adobe AfterEffects' },\n  { id: 5, name: 'Adobe Illustrator' },\n  { id: 6, name: 'Adobe Lightroom' },\n  { id: 7, name: 'Adobe Premiere Pro' },\n  { id: 8, name: 'Adobe Fresco' },\n  { id: 9, name: 'Adobe Dreamweaver' }\n];\n\n<ListView\n  items={items}\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  height=\"250px\"\n  aria-label=\"Dynamic ListView items example\"\n>\n  {(item) => <Item>{item.name}</Item>}\n</ListView>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  { id: 1, name: 'Adobe Photoshop' },\n  { id: 2, name: 'Adobe XD' },\n  { id: 3, name: 'Adobe InDesign' },\n  { id: 4, name: 'Adobe AfterEffects' },\n  { id: 5, name: 'Adobe Illustrator' },\n  { id: 6, name: 'Adobe Lightroom' },\n  { id: 7, name: 'Adobe Premiere Pro' },\n  { id: 8, name: 'Adobe Fresco' },\n  { id: 9, name: 'Adobe Dreamweaver' }\n];\n\n<ListView\n  items={items}\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  height=\"250px\"\n  aria-label=\"Dynamic ListView items example\"\n>\n  {(item) => <Item>{item.name}</Item>}\n</ListView>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  {\n    id: 1,\n    name:\n      'Adobe Photoshop'\n  },\n  {\n    id: 2,\n    name: 'Adobe XD'\n  },\n  {\n    id: 3,\n    name:\n      'Adobe InDesign'\n  },\n  {\n    id: 4,\n    name:\n      'Adobe AfterEffects'\n  },\n  {\n    id: 5,\n    name:\n      'Adobe Illustrator'\n  },\n  {\n    id: 6,\n    name:\n      'Adobe Lightroom'\n  },\n  {\n    id: 7,\n    name:\n      'Adobe Premiere Pro'\n  },\n  {\n    id: 8,\n    name: 'Adobe Fresco'\n  },\n  {\n    id: 9,\n    name:\n      'Adobe Dreamweaver'\n  }\n];\n\n<ListView\n  items={items}\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  height=\"250px\"\n  aria-label=\"Dynamic ListView items example\"\n>\n  {(item) => (\n    <Item>\n      {item.name}\n    </Item>\n  )}\n</ListView>",
                    "name": "Content#"
                },
                {
                    "source": "import {useAsyncList} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncList() {\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(\n        cursor || `https://swapi.py4e.com/api/people/?search=`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      maxWidth=\"size-6000\"\n      height=\"size-3000\"\n      items={list.items}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ListView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncList() {\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(\n        cursor ||\n          `https://swapi.py4e.com/api/people/?search=`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      maxWidth=\"size-6000\"\n      height=\"size-3000\"\n      items={list.items}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ListView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncList() {\n  let list =\n    useAsyncList<\n      Character\n    >({\n      async load(\n        {\n          signal,\n          cursor\n        }\n      ) {\n        if (cursor) {\n          cursor = cursor\n            .replace(\n              /^http:\\/\\//i,\n              'https://'\n            );\n        }\n\n        let res =\n          await fetch(\n            cursor ||\n              `https://swapi.py4e.com/api/people/?search=`,\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next\n        };\n      }\n    });\n\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      maxWidth=\"size-6000\"\n      height=\"size-3000\"\n      items={list.items}\n      loadingState={list\n        .loadingState}\n      onLoadMore={list\n        .loadMore}\n    >\n      {(item) => (\n        <Item\n          key={item.name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport Folder from '@spectrum-icons/illustrations/Folder';\n\n<ListView\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  aria-label=\"ListView example with complex items\"\n  onAction={(key) => alert(`Triggering action on item ${key}`)}\n>\n  <Item key=\"1\" textValue=\"Utilities\" hasChildItems>\n    <Folder />\n    <Text>Utilities</Text>\n    <Text slot=\"description\">16 items</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"2\" textValue=\"Glasses Dog\">\n    <Image\n      src=\"https://random.dog/1a0535a6-ca89-4059-9b3a-04a554c0587b.jpg\"\n      alt=\"Shiba Inu with glasses\"\n    />\n    <Text>Glasses Dog</Text>\n    <Text slot=\"description\">JPG</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"3\" textValue=\"readme\">\n    <File />\n    <Text>readme.txt</Text>\n    <Text slot=\"description\">TXT</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"4\" textValue=\"Onboarding\">\n    <File />\n    <Text>Onboarding</Text>\n    <Text slot=\"description\">PDF</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n</ListView>",
                    "name": "Complex items#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport Folder from '@spectrum-icons/illustrations/Folder';\n\n<ListView\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  aria-label=\"ListView example with complex items\"\n  onAction={(key) =>\n    alert(`Triggering action on item ${key}`)}\n>\n  <Item key=\"1\" textValue=\"Utilities\" hasChildItems>\n    <Folder />\n    <Text>Utilities</Text>\n    <Text slot=\"description\">16 items</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"2\" textValue=\"Glasses Dog\">\n    <Image\n      src=\"https://random.dog/1a0535a6-ca89-4059-9b3a-04a554c0587b.jpg\"\n      alt=\"Shiba Inu with glasses\"\n    />\n    <Text>Glasses Dog</Text>\n    <Text slot=\"description\">JPG</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"3\" textValue=\"readme\">\n    <File />\n    <Text>readme.txt</Text>\n    <Text slot=\"description\">TXT</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item key=\"4\" textValue=\"Onboarding\">\n    <File />\n    <Text>Onboarding</Text>\n    <Text slot=\"description\">PDF</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n</ListView>",
                    "name": "Complex items#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport Folder from '@spectrum-icons/illustrations/Folder';\n\n<ListView\n  selectionMode=\"multiple\"\n  maxWidth=\"size-6000\"\n  aria-label=\"ListView example with complex items\"\n  onAction={(key) =>\n    alert(\n      `Triggering action on item ${key}`\n    )}\n>\n  <Item\n    key=\"1\"\n    textValue=\"Utilities\"\n    hasChildItems\n  >\n    <Folder />\n    <Text>\n      Utilities\n    </Text>\n    <Text slot=\"description\">\n      16 items\n    </Text>\n    <ActionMenu>\n      <Item\n        key=\"edit\"\n        textValue=\"Edit\"\n      >\n        <Edit />\n        <Text>\n          Edit\n        </Text>\n      </Item>\n      <Item\n        key=\"delete\"\n        textValue=\"Delete\"\n      >\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item\n    key=\"2\"\n    textValue=\"Glasses Dog\"\n  >\n    <Image\n      src=\"https://random.dog/1a0535a6-ca89-4059-9b3a-04a554c0587b.jpg\"\n      alt=\"Shiba Inu with glasses\"\n    />\n    <Text>\n      Glasses Dog\n    </Text>\n    <Text slot=\"description\">\n      JPG\n    </Text>\n    <ActionMenu>\n      <Item\n        key=\"edit\"\n        textValue=\"Edit\"\n      >\n        <Edit />\n        <Text>\n          Edit\n        </Text>\n      </Item>\n      <Item\n        key=\"delete\"\n        textValue=\"Delete\"\n      >\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item\n    key=\"3\"\n    textValue=\"readme\"\n  >\n    <File />\n    <Text>\n      readme.txt\n    </Text>\n    <Text slot=\"description\">\n      TXT\n    </Text>\n    <ActionMenu>\n      <Item\n        key=\"edit\"\n        textValue=\"Edit\"\n      >\n        <Edit />\n        <Text>\n          Edit\n        </Text>\n      </Item>\n      <Item\n        key=\"delete\"\n        textValue=\"Delete\"\n      >\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <Item\n    key=\"4\"\n    textValue=\"Onboarding\"\n  >\n    <File />\n    <Text>\n      Onboarding\n    </Text>\n    <Text slot=\"description\">\n      PDF\n    </Text>\n    <ActionMenu>\n      <Item\n        key=\"edit\"\n        textValue=\"Edit\"\n      >\n        <Edit />\n        <Text>\n          Edit\n        </Text>\n      </Item>\n      <Item\n        key=\"delete\"\n        textValue=\"Delete\"\n      >\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n</ListView>",
                    "name": "Complex items#"
                },
                {
                    "source": "<ListView\n  maxWidth=\"size-6000\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={['Charizard', 'Venusaur']}\n  aria-label=\"ListView multiple selection example\"\n>\n  <Item key=\"Charizard\">\n    Charizard\n  </Item>\n  <Item key=\"Blastoise\">\n    Blastoise\n  </Item>\n  <Item key=\"Venusaur\">\n    Venusaur\n  </Item>\n  <Item key=\"Pikachu\">\n    Pikachu\n  </Item>\n</ListView>",
                    "name": "Selection#"
                },
                {
                    "source": "<ListView\n  maxWidth=\"size-6000\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={['Charizard', 'Venusaur']}\n  aria-label=\"ListView multiple selection example\"\n>\n  <Item key=\"Charizard\">\n    Charizard\n  </Item>\n  <Item key=\"Blastoise\">\n    Blastoise\n  </Item>\n  <Item key=\"Venusaur\">\n    Venusaur\n  </Item>\n  <Item key=\"Pikachu\">\n    Pikachu\n  </Item>\n</ListView>",
                    "name": "Selection#"
                },
                {
                    "source": "<ListView\n  maxWidth=\"size-6000\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={[\n    'Charizard',\n    'Venusaur'\n  ]}\n  aria-label=\"ListView multiple selection example\"\n>\n  <Item key=\"Charizard\">\n    Charizard\n  </Item>\n  <Item key=\"Blastoise\">\n    Blastoise\n  </Item>\n  <Item key=\"Venusaur\">\n    Venusaur\n  </Item>\n  <Item key=\"Pikachu\">\n    Pikachu\n  </Item>\n</ListView>",
                    "name": "Selection#"
                },
                {
                    "source": "import type {SpectrumListViewProps} from '@adobe/react-spectrum';\n\nfunction PokemonList<T>(props: Omit<SpectrumListViewProps<T>, 'children'>) {\n  let rows = [\n    { id: 1, name: 'Charizard' },\n    { id: 2, name: 'Blastoise' },\n    { id: 3, name: 'Venusaur' },\n    { id: 4, name: 'Pikachu' }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState(\n    props.defaultSelectedKeys || new Set([2])\n  );\n\n  return (\n    <ListView\n      maxWidth=\"size-6000\"\n      aria-label=\"ListView with controlled selection\"\n      selectionMode=\"multiple\"\n      {...props}\n      items={rows}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "import type {SpectrumListViewProps} from '@adobe/react-spectrum';\n\nfunction PokemonList<T>(\n  props: Omit<SpectrumListViewProps<T>, 'children'>\n) {\n  let rows = [\n    { id: 1, name: 'Charizard' },\n    { id: 2, name: 'Blastoise' },\n    { id: 3, name: 'Venusaur' },\n    { id: 4, name: 'Pikachu' }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState(\n    props.defaultSelectedKeys || new Set([2])\n  );\n\n  return (\n    <ListView\n      maxWidth=\"size-6000\"\n      aria-label=\"ListView with controlled selection\"\n      selectionMode=\"multiple\"\n      {...props}\n      items={rows}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "import type {SpectrumListViewProps} from '@adobe/react-spectrum';\n\nfunction PokemonList<T>(\n  props: Omit<\n    SpectrumListViewProps<\n      T\n    >,\n    'children'\n  >\n) {\n  let rows = [\n    {\n      id: 1,\n      name: 'Charizard'\n    },\n    {\n      id: 2,\n      name: 'Blastoise'\n    },\n    {\n      id: 3,\n      name: 'Venusaur'\n    },\n    {\n      id: 4,\n      name: 'Pikachu'\n    }\n  ];\n\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState(\n    props\n      .defaultSelectedKeys ||\n      new Set([2])\n  );\n\n  return (\n    <ListView\n      maxWidth=\"size-6000\"\n      aria-label=\"ListView with controlled selection\"\n      selectionMode=\"multiple\"\n      {...props}\n      items={rows}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionMode=\"single\"\n  selectionStyle=\"highlight\"\n  aria-label=\"ListView with single selection\"\n/>",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionMode=\"single\"\n  selectionStyle=\"highlight\"\n  aria-label=\"ListView with single selection\"\n/>",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionMode=\"single\"\n  selectionStyle=\"highlight\"\n  aria-label=\"ListView with single selection\"\n/>",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  disallowEmptySelection\n  aria-label=\"ListView with empty selection disallowed\"\n/>",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  disallowEmptySelection\n  aria-label=\"ListView with empty selection disallowed\"\n/>",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  disallowEmptySelection\n  aria-label=\"ListView with empty selection disallowed\"\n/>",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList disabledKeys={[3]} aria-label=\"ListView with disabled rows\" />",
                    "name": "Disabled rows#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  disabledKeys={[3]}\n  aria-label=\"ListView with disabled rows\"\n/>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  disabledKeys={[3]}\n  aria-label=\"ListView with disabled rows\"\n/>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "<Flex wrap gap=\"size-300\">\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"all\"\n    aria-label=\"ListView with all interaction disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={key => alert(`Opening item ${key}...`)}\n  />\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"selection\"\n    aria-label=\"ListView with selection disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={key => alert(`Opening item ${key}...`)}\n  />\n</Flex>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "<Flex wrap gap=\"size-300\">\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"all\"\n    aria-label=\"ListView with all interaction disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"selection\"\n    aria-label=\"ListView with selection disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n</Flex>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-300\"\n>\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"all\"\n    aria-label=\"ListView with all interaction disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n  />\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"selection\"\n    aria-label=\"ListView with selection disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n  />\n</Flex>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionStyle=\"highlight\"\n  aria-label=\"Highlight selection ListView\"\n/>",
                    "name": "Highlight selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionStyle=\"highlight\"\n  aria-label=\"Highlight selection ListView\"\n/>",
                    "name": "Highlight selection#"
                },
                {
                    "source": "// Using the same list as above\n<PokemonList\n  selectionStyle=\"highlight\"\n  aria-label=\"Highlight selection ListView\"\n/>",
                    "name": "Highlight selection#"
                },
                {
                    "source": "// Checkbox selection with onAction\n<Flex wrap gap=\"size-300\">\n  <PokemonList\n    onAction={(key) => alert(`Opening item ${key}...`)}\n    aria-label=\"Checkbox selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n  <PokemonList\n    selectionStyle=\"highlight\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n    aria-label=\"Highlight selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "// Checkbox selection with onAction\n<Flex wrap gap=\"size-300\">\n  <PokemonList\n    onAction={(key) => alert(`Opening item ${key}...`)}\n    aria-label=\"Checkbox selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n  <PokemonList\n    selectionStyle=\"highlight\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n    aria-label=\"Highlight selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "// Checkbox selection with onAction\n<Flex\n  wrap\n  gap=\"size-300\"\n>\n  <PokemonList\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n    aria-label=\"Checkbox selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n  <PokemonList\n    selectionStyle=\"highlight\"\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n    aria-label=\"Highlight selection ListView with row actions\"\n    width=\"size-2400\"\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "<ListView aria-label=\"Links\" selectionMode=\"multiple\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListView>",
                    "name": "Links#"
                },
                {
                    "source": "<ListView aria-label=\"Links\" selectionMode=\"multiple\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">\n    Adobe\n  </Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">\n    Apple\n  </Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">\n    Google\n  </Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">\n    Microsoft\n  </Item>\n</ListView>",
                    "name": "Links#"
                },
                {
                    "source": "<ListView\n  aria-label=\"Links\"\n  selectionMode=\"multiple\"\n>\n  <Item\n    href=\"https://adobe.com/\"\n    target=\"_blank\"\n  >\n    Adobe\n  </Item>\n  <Item\n    href=\"https://apple.com/\"\n    target=\"_blank\"\n  >\n    Apple\n  </Item>\n  <Item\n    href=\"https://google.com/\"\n    target=\"_blank\"\n  >\n    Google\n  </Item>\n  <Item\n    href=\"https://microsoft.com/\"\n    target=\"_blank\"\n  >\n    Microsoft\n  </Item>\n</ListView>",
                    "name": "Links#"
                },
                {
                    "source": "import type {DragAndDropOptions, TextDropItem} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  childNodes?: Item[];\n}\n\ninterface DndListViewProps extends DragAndDropOptions {\n  list: ListData<Item>;\n}\n\nfunction DraggableListView(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag into list example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListView(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(await (item as TextDropItem).getText('custom-app-type'))\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(await (item as TextDropItem).getText('custom-app-type'))\n        )\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drag into list example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoList() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver' },\n      { id: '6', type: 'file', name: 'Adobe Fresco' },\n      { id: '7', type: 'file', name: 'Adobe Connect' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListView list={sourceList} />\n      <DroppableListView list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "import type {\n  DragAndDropOptions,\n  TextDropItem\n} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  childNodes?: Item[];\n}\n\ninterface DndListViewProps extends DragAndDropOptions {\n  list: ListData<Item>;\n}\n\nfunction DraggableListView(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag into list example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListView(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type'\n            )\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drag into list example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoList() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver' },\n      { id: '6', type: 'file', name: 'Adobe Fresco' },\n      { id: '7', type: 'file', name: 'Adobe Connect' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListView list={sourceList} />\n      <DroppableListView list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "import type {\n  DragAndDropOptions,\n  TextDropItem\n} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  childNodes?: Item[];\n}\n\ninterface DndListViewProps\n  extends\n    DragAndDropOptions {\n  list: ListData<Item>;\n}\n\nfunction DraggableListView(\n  props: DndListViewProps\n) {\n  let {\n    list,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag into list example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListView(\n  props: DndListViewProps\n) {\n  let {\n    list,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: [\n      'custom-app-type'\n    ],\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type'\n                      )\n                  )\n            )\n          );\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    ...otherProps\n  });\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drag into list example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoList() {\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '5',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe Fresco'\n        },\n        {\n          id: '7',\n          type: 'file',\n          name:\n            'Adobe Connect'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Lightroom'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableListView\n        list={sourceList}\n      />\n      <DroppableListView\n        list={targetList}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "<DragIntoList />",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "<DragIntoList />",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "<DragIntoList />",
                    "name": "Draggable ListView and droppable ListView#"
                },
                {
                    "source": "function DraggableListViewFolder(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-folder-drop': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewFolder(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {\n        ...targetItem,\n        childNodes: [...targetItem.childNodes, ...processedItems]\n      });\n    },    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drop into folder example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name} hasChildItems={item.type === 'folder'}>\n          <Text>{item.name}</Text>\n          {item.type === 'folder' &&\n            (\n              <>\n                <Folder />\n                <Text slot=\"description\">\n                  {`contains ${item.childNodes?.length} dropped item(s)`}\n                </Text>\n              </>\n            )}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListFolder() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents', childNodes: [] },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities', childNodes: [] },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '7', type: 'folder', name: 'Pictures', childNodes: [] },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps', childNodes: [] }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewFolder list={sourceList} />\n      <DroppableListViewFolder list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function DraggableListViewFolder(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-folder-drop': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewFolder(props: DndListViewProps) {\n  let { list, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) =>\n      !!list.getItem(target.key).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {\n        ...targetItem,\n        childNodes: [\n          ...targetItem.childNodes,\n          ...processedItems\n        ]\n      });\n    },    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drop into folder example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item.name}\n          hasChildItems={item.type === 'folder'}\n        >\n          <Text>{item.name}</Text>\n          {item.type === 'folder' &&\n            (\n              <>\n                <Folder />\n                <Text slot=\"description\">\n                  {`contains ${item.childNodes?.length} dropped item(s)`}\n                </Text>\n              </>\n            )}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListFolder() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        childNodes: []\n      },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        childNodes: []\n      },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {\n        id: '7',\n        type: 'folder',\n        name: 'Pictures',\n        childNodes: []\n      },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      {\n        id: '9',\n        type: 'folder',\n        name: 'Apps',\n        childNodes: []\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewFolder list={sourceList} />\n      <DroppableListViewFolder list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function DraggableListViewFolder(\n  props: DndListViewProps\n) {\n  let {\n    list,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-folder-drop':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          {item.type ===\n              'folder' &&\n            <Folder />}\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewFolder(\n  props: DndListViewProps\n) {\n  let {\n    list,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop:\n      (target) =>\n        !!list.getItem(\n          target.key\n        ).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: [\n      'custom-app-type-folder-drop'\n    ],\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    onItemDrop: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n\n      let targetItem =\n        list.getItem(\n          target.key\n        );\n      list.update(\n        target.key,\n        {\n          ...targetItem,\n          childNodes: [\n            ...targetItem\n              .childNodes,\n            ...processedItems\n          ]\n        }\n      );\n    },    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drop into folder example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n          hasChildItems={item\n            .type ===\n            'folder'}\n        >\n          <Text>\n            {item.name}\n          </Text>\n          {item.type ===\n              'folder' &&\n            (\n              <>\n                <Folder />\n                <Text slot=\"description\">\n                  {`contains ${item.childNodes?.length} dropped item(s)`}\n                </Text>\n              </>\n            )}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListFolder() {\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          childNodes: []\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          childNodes: []\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '7',\n          type: 'folder',\n          name:\n            'Pictures',\n          childNodes: []\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Fresco'\n        },\n        {\n          id: '9',\n          type: 'folder',\n          name: 'Apps',\n          childNodes: []\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableListViewFolder\n        list={sourceList}\n      />\n      <DroppableListViewFolder\n        list={targetList}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoListFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoListFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoListFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function ReorderableList() {\n  let list = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'folder', name: 'Documents', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign'},\n      {id: '5', type: 'folder', name: 'Utilities', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    onReorder: async (e) => {\n      let {keys, target} = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']  });\n\n  return (\n    <ListView\n      aria-label=\"Reorderable ListView\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}",
                    "name": "Reorderable#"
                },
                {
                    "source": "function ReorderableList() {\n  let list = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        childNodes: []\n      },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        childNodes: []\n      },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    onReorder: async (e) => {\n      let { keys, target } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']  });\n\n  return (\n    <ListView\n      aria-label=\"Reorderable ListView\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Reorderable#"
                },
                {
                    "source": "function ReorderableList() {\n  let list = useListData(\n    {\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          childNodes: []\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          childNodes: []\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    }\n  );\n\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys]\n        .map((key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-reorder':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        });\n    },\n    acceptedDragTypes: [\n      'custom-app-type-reorder'\n    ],\n    onReorder: async (\n      e\n    ) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list.moveBefore(\n          target.key,\n          [...keys]\n        );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.moveAfter(\n          target.key,\n          [...keys]\n        );\n      }\n    },\n    getAllowedDropOperations:\n      () => ['move']  });\n\n  return (\n    <ListView\n      aria-label=\"Reorderable ListView\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          {item.type ===\n              'folder' &&\n            <Folder />}\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableList />",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableList />",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableList />",
                    "name": "Reorderable#"
                },
                {
                    "source": "function BidirectionalDnDListView(props: DndListViewProps) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }  });\n\n  return (\n    <ListView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragBetweenListsExample() {\n  let list1 = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDListView\n        list={list1}\n        aria-label=\"First ListView in drag between list example\"\n      />\n      <BidirectionalDnDListView\n        list={list2}\n        aria-label=\"Second ListView in drag between list example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function BidirectionalDnDListView(props: DndListViewProps) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }  });\n\n  return (\n    <ListView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragBetweenListsExample() {\n  let list1 = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDListView\n        list={list1}\n        aria-label=\"First ListView in drag between list example\"\n      />\n      <BidirectionalDnDListView\n        list={list2}\n        aria-label=\"Second ListView in drag between list example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function BidirectionalDnDListView(\n  props: DndListViewProps\n) {\n  let { list } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    acceptedDragTypes: [\n      'custom-app-type-bidirectional'\n    ],\n    // Only allow move operations\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems(keys) {\n      return [...keys]\n        .map((key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-bidirectional':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        });\n    },\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-bidirectional'\n                      )\n                  )\n            )\n          );\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onReorder: async (\n      e\n    ) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list.moveBefore(\n          target.key,\n          [...keys]\n        );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.moveAfter(\n          target.key,\n          [...keys]\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (item) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-bidirectional'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (\n        dropOperation ===\n          'move' &&\n        !isInternal\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    }  });\n\n  return (\n    <ListView\n      aria-label={props[\n        'aria-label'\n      ]}\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          {item.type ===\n              'folder' &&\n            <Folder />}\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragBetweenListsExample() {\n  let list1 =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    });\n\n  let list2 =\n    useListData({\n      initialItems: [\n        {\n          id: '7',\n          type: 'folder',\n          name:\n            'Pictures'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Fresco'\n        },\n        {\n          id: '9',\n          type: 'folder',\n          name: 'Apps'\n        },\n        {\n          id: '10',\n          type: 'file',\n          name:\n            'Adobe Illustrator'\n        },\n        {\n          id: '11',\n          type: 'file',\n          name:\n            'Adobe Lightroom'\n        },\n        {\n          id: '12',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <BidirectionalDnDListView\n        list={list1}\n        aria-label=\"First ListView in drag between list example\"\n      />\n      <BidirectionalDnDListView\n        list={list2}\n        aria-label=\"Second ListView in drag between list example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenListsExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenListsExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenListsExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function DraggableListViewDefaultCopy(props: DndListViewProps) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-copy-default': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewDefaultCopy(props: DndListViewProps) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    getDropOperation: () => 'copy',    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      list.append(...processedItems);\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in default copy operation example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListDefaultCopy() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver' },\n      { id: '6', type: 'file', name: 'Adobe Fresco' },\n      { id: '7', type: 'file', name: 'Adobe Connect' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewDefaultCopy list={sourceList} />\n      <DroppableListViewDefaultCopy list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "function DraggableListViewDefaultCopy(\n  props: DndListViewProps\n) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-copy-default': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewDefaultCopy(\n  props: DndListViewProps\n) {\n  let { list } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    getDropOperation: () => 'copy',    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      list.append(...processedItems);\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in default copy operation example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListDefaultCopy() {\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver' },\n      { id: '6', type: 'file', name: 'Adobe Fresco' },\n      { id: '7', type: 'file', name: 'Adobe Connect' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewDefaultCopy list={sourceList} />\n      <DroppableListViewDefaultCopy list={targetList} />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "function DraggableListViewDefaultCopy(\n  props: DndListViewProps\n) {\n  let { list } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-copy-default':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewDefaultCopy(\n  props: DndListViewProps\n) {\n  let { list } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    acceptedDragTypes: [\n      'custom-app-type-copy-default'\n    ],\n    getDropOperation:\n      () => 'copy',    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) => (\n                {\n                  ...JSON\n                    .parse(\n                      await (item as TextDropItem)\n                        .getText(\n                          'custom-app-type-copy-default'\n                        )\n                    ),\n                  id:\n                    Math\n                      .random()\n                      .toString(\n                        36\n                      ).slice(\n                        2\n                      )\n                }\n              )\n            )\n          );      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) => (\n                {\n                  ...JSON\n                    .parse(\n                      await (item as TextDropItem)\n                        .getText(\n                          'custom-app-type-copy-default'\n                        )\n                    ),\n                  id:\n                    Math\n                      .random()\n                      .toString(\n                        36\n                      ).slice(\n                        2\n                      )\n                }\n              )\n            )\n          );      list.append(\n        ...processedItems\n      );\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in default copy operation example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          <Text>\n            {item.name}\n          </Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListDefaultCopy() {\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '5',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe Fresco'\n        },\n        {\n          id: '7',\n          type: 'file',\n          name:\n            'Adobe Connect'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Lightroom'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableListViewDefaultCopy\n        list={sourceList}\n      />\n      <DroppableListViewDefaultCopy\n        list={targetList}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoListDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoListDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoListDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let list = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    renderPreview: (keys, draggedKey) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>Custom Preview</strong>\n        <div>Keys: [{[...keys].join(', ')}]</div>\n        <div>Dragged: {draggedKey}</div>\n      </View>\n    )  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView with custom drag preview\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let list = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'file', name: 'Adobe InDesign' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects' }\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    renderPreview: (keys, draggedKey) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>Custom Preview</strong>\n        <div>Keys: [{[...keys].join(', ')}]</div>\n        <div>Dragged: {draggedKey}</div>\n      </View>\n    )  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView with custom drag preview\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item textValue={item.name}>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let list = useListData(\n    {\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD'\n        },\n        {\n          id: '3',\n          type: 'file',\n          name:\n            'Adobe InDesign'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe AfterEffects'\n        }\n      ]\n    }\n  );\n\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          return {\n            'custom-app-type':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    renderPreview: (\n      keys,\n      draggedKey\n    ) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>\n          Custom Preview\n        </strong>\n        <div>\n          Keys: [{[\n            ...keys\n          ].join(', ')}]\n        </div>\n        <div>\n          Dragged:{' '}\n          {draggedKey}\n        </div>\n      </View>\n    )  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView with custom drag preview\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}\n    >\n      {(item) => (\n        <Item\n          textValue={item\n            .name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "function ListExample(props) {\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Quiet ListView example\"\n      width=\"size-3000\"\n      {...props}\n    >\n      <Item>Adobe AfterEffects</Item>\n      <Item>Adobe Dreamweaver</Item>\n      <Item>Adobe Acrobat</Item>\n    </ListView>\n  );\n}\n\n<ListExample isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "function ListExample(props) {\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Quiet ListView example\"\n      width=\"size-3000\"\n      {...props}\n    >\n      <Item>Adobe AfterEffects</Item>\n      <Item>Adobe Dreamweaver</Item>\n      <Item>Adobe Acrobat</Item>\n    </ListView>\n  );\n}\n\n<ListExample isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "function ListExample(\n  props\n) {\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Quiet ListView example\"\n      width=\"size-3000\"\n      {...props}\n    >\n      <Item>\n        Adobe\n        AfterEffects\n      </Item>\n      <Item>\n        Adobe Dreamweaver\n      </Item>\n      <Item>\n        Adobe Acrobat\n      </Item>\n    </ListView>\n  );\n}\n\n<ListExample isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<Flex wrap gap=\"size-300\">\n  <ListExample density=\"compact\" aria-label=\"Compact ListView example\" />\n  <ListExample density=\"spacious\" aria-label=\"Spacious ListView example\" />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "<Flex wrap gap=\"size-300\">\n  <ListExample\n    density=\"compact\"\n    aria-label=\"Compact ListView example\"\n  />\n  <ListExample\n    density=\"spacious\"\n    aria-label=\"Spacious ListView example\"\n  />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "<Flex\n  wrap\n  gap=\"size-300\"\n>\n  <ListExample\n    density=\"compact\"\n    aria-label=\"Compact ListView example\"\n  />\n  <ListExample\n    density=\"spacious\"\n    aria-label=\"Spacious ListView example\"\n  />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "<ListExample\n  overflowMode=\"wrap\"\n  aria-label=\"Text wrapping ListView example\"\n  width=\"size-2000\"\n/>",
                    "name": "Overflow mode#"
                },
                {
                    "source": "<ListExample\n  overflowMode=\"wrap\"\n  aria-label=\"Text wrapping ListView example\"\n  width=\"size-2000\"\n/>",
                    "name": "Overflow mode#"
                },
                {
                    "source": "<ListExample\n  overflowMode=\"wrap\"\n  aria-label=\"Text wrapping ListView example\"\n  width=\"size-2000\"\n/>",
                    "name": "Overflow mode#"
                },
                {
                    "source": "import {Content, Heading, IllustratedMessage} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Example ListView for empty state\"\n  maxWidth=\"size-6000\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</ListView>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  IllustratedMessage\n} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Example ListView for empty state\"\n  maxWidth=\"size-6000\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</ListView>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  IllustratedMessage\n} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>\n        No results\n      </Heading>\n      <Content>\n        No results found\n      </Content>\n    </IllustratedMessage>\n  );\n}\n\n<ListView\n  selectionMode=\"multiple\"\n  aria-label=\"Example ListView for empty state\"\n  maxWidth=\"size-6000\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</ListView>",
                    "name": "Empty state#"
                }
            ]
        },
        {
            "name": "Menu",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Menu.html",
            "examples": [
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu onAction={(key) => alert(key)}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n    <Item key=\"replace\">Replace</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu onAction={(key) => alert(key)}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n    <Item key=\"replace\">Replace</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu\n    onAction={(key) =>\n      alert(key)}\n  >\n    <Item key=\"cut\">\n      Cut\n    </Item>\n    <Item key=\"copy\">\n      Copy\n    </Item>\n    <Item key=\"paste\">\n      Paste\n    </Item>\n    <Item key=\"replace\">\n      Replace\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let menuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Replace'}\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu items={menuItems}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Menu>\n    </MenuTrigger>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let menuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Replace'}\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu items={menuItems}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Menu>\n    </MenuTrigger>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let menuItems = [\n    { name: 'Cut' },\n    { name: 'Copy' },\n    { name: 'Paste' },\n    { name: 'Replace' }\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu\n        items={menuItems}\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Edit\n        </ActionButton>\n        <Menu onAction={setAction}>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Edit\n        </ActionButton>\n        <Menu onAction={setAction}>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Action: {action}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    action,\n    setAction\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Edit\n        </ActionButton>\n        <Menu\n          onAction={setAction}\n        >\n          <Item key=\"cut\">\n            Cut\n          </Item>\n          <Item key=\"copy\">\n            Copy\n          </Item>\n          <Item key=\"paste\">\n            Paste\n          </Item>\n        </Menu>\n      </MenuTrigger>\n      <p>\n        Action: {action}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['middle']));\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Align\n        </ActionButton>\n        <Menu\n          selectionMode=\"single\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"left\">Left</Item>\n          <Item key=\"middle\">Middle</Item>\n          <Item key=\"right\">Right</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['middle'])\n  );\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Align\n        </ActionButton>\n        <Menu\n          selectionMode=\"single\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"left\">Left</Item>\n          <Item key=\"middle\">Middle</Item>\n          <Item key=\"right\">Right</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(new Set(['middle']));\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Align\n        </ActionButton>\n        <Menu\n          selectionMode=\"single\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"left\">\n            Left\n          </Item>\n          <Item key=\"middle\">\n            Middle\n          </Item>\n          <Item key=\"right\">\n            Right\n          </Item>\n        </Menu>\n      </MenuTrigger>\n      <p>\n        Current selection\n        (controlled):\n        {' '}\n        {[...selected]}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['Sidebar', 'Console'])\n  );\n\n  return (\n    <>\n      <MenuTrigger closeOnSelect={false}>\n        <ActionButton>\n          Show\n        </ActionButton>\n        <Menu\n          selectionMode=\"multiple\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"Sidebar\">Sidebar</Item>\n          <Item key=\"Searchbar\">Searchbar</Item>\n          <Item key=\"Tools\">Tools</Item>\n          <Item key=\"Console\">Console</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>\n        Current selection (controlled):{' '}\n        {selected === 'all' ? 'all' : [...selected].join(', ')}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['Sidebar', 'Console'])\n  );\n\n  return (\n    <>\n      <MenuTrigger closeOnSelect={false}>\n        <ActionButton>\n          Show\n        </ActionButton>\n        <Menu\n          selectionMode=\"multiple\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"Sidebar\">Sidebar</Item>\n          <Item key=\"Searchbar\">Searchbar</Item>\n          <Item key=\"Tools\">Tools</Item>\n          <Item key=\"Console\">Console</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>\n        Current selection (controlled): {selected === 'all'\n          ? 'all'\n          : [...selected].join(', ')}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(\n    new Set([\n      'Sidebar',\n      'Console'\n    ])\n  );\n\n  return (\n    <>\n      <MenuTrigger\n        closeOnSelect={false}\n      >\n        <ActionButton>\n          Show\n        </ActionButton>\n        <Menu\n          selectionMode=\"multiple\"\n          selectedKeys={selected}\n          onSelectionChange={setSelected}\n        >\n          <Item key=\"Sidebar\">\n            Sidebar\n          </Item>\n          <Item key=\"Searchbar\">\n            Searchbar\n          </Item>\n          <Item key=\"Tools\">\n            Tools\n          </Item>\n          <Item key=\"Console\">\n            Console\n          </Item>\n        </Menu>\n      </MenuTrigger>\n      <p>\n        Current selection\n        (controlled):\n        {' '}\n        {selected ===\n            'all'\n          ? 'all'\n          : [...selected]\n            .join(', ')}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>Links</ActionButton>\n  <Menu>\n    <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n    <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n    <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n    <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Links#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>Links</ActionButton>\n  <Menu>\n    <Item href=\"https://adobe.com/\" target=\"_blank\">\n      Adobe\n    </Item>\n    <Item href=\"https://apple.com/\" target=\"_blank\">\n      Apple\n    </Item>\n    <Item href=\"https://google.com/\" target=\"_blank\">\n      Google\n    </Item>\n    <Item href=\"https://microsoft.com/\" target=\"_blank\">\n      Microsoft\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Links#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Links\n  </ActionButton>\n  <Menu>\n    <Item\n      href=\"https://adobe.com/\"\n      target=\"_blank\"\n    >\n      Adobe\n    </Item>\n    <Item\n      href=\"https://apple.com/\"\n      target=\"_blank\"\n    >\n      Apple\n    </Item>\n    <Item\n      href=\"https://google.com/\"\n      target=\"_blank\"\n    >\n      Google\n    </Item>\n    <Item\n      href=\"https://microsoft.com/\"\n      target=\"_blank\"\n    >\n      Microsoft\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Links#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['bold', 'left'])\n  );\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Section title=\"Styles\">\n          <Item key=\"bold\">Bold</Item>\n          <Item key=\"underline\">Underline</Item>\n        </Section>\n        <Section title=\"Align\">\n          <Item key=\"left\">Left</Item>\n          <Item key=\"middle\">Middle</Item>\n          <Item key=\"right\">Right</Item>\n        </Section>\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Static Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set(['bold', 'left'])\n  );\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Section title=\"Styles\">\n          <Item key=\"bold\">Bold</Item>\n          <Item key=\"underline\">Underline</Item>\n        </Section>\n        <Section title=\"Align\">\n          <Item key=\"left\">Left</Item>\n          <Item key=\"middle\">Middle</Item>\n          <Item key=\"right\">Right</Item>\n        </Section>\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Static Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(\n    new Set([\n      'bold',\n      'left'\n    ])\n  );\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        <Section title=\"Styles\">\n          <Item key=\"bold\">\n            Bold\n          </Item>\n          <Item key=\"underline\">\n            Underline\n          </Item>\n        </Section>\n        <Section title=\"Align\">\n          <Item key=\"left\">\n            Left\n          </Item>\n          <Item key=\"middle\">\n            Middle\n          </Item>\n          <Item key=\"right\">\n            Right\n          </Item>\n        </Section>\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Static Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));\n  let openWindows = [\n    {\n      name: 'Left Panel',\n      id: 'left',\n      children: [\n        {id: 1, name: 'Final Copy (1)'}\n      ]\n    },\n    {\n      name: 'Right Panel',\n      id: 'right',\n      children: [\n        {id: 2, name: 'index.ts'},\n        {id: 3, name: 'package.json'},\n        {id: 4, name: 'license.txt'}\n      ]\n    }\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Window\n      </ActionButton>\n      <Menu\n        items={openWindows}\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}>\n        {item => (\n          <Section items={item.children} title={item.name}>\n            {item => <Item>{item.name}</Item>}\n          </Section>\n        )}\n      </Menu>\n    </MenuTrigger>\n  );\n}",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(\n    new Set([1, 3])\n  );\n  let openWindows = [\n    {\n      name: 'Left Panel',\n      id: 'left',\n      children: [\n        { id: 1, name: 'Final Copy (1)' }\n      ]\n    },\n    {\n      name: 'Right Panel',\n      id: 'right',\n      children: [\n        { id: 2, name: 'index.ts' },\n        { id: 3, name: 'package.json' },\n        { id: 4, name: 'license.txt' }\n      ]\n    }\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Window\n      </ActionButton>\n      <Menu\n        items={openWindows}\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        {(item) => (\n          <Section items={item.children} title={item.name}>\n            {(item) => <Item>{item.name}</Item>}\n          </Section>\n        )}\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState<\n    Selection\n  >(new Set([1, 3]));\n  let openWindows = [\n    {\n      name: 'Left Panel',\n      id: 'left',\n      children: [\n        {\n          id: 1,\n          name:\n            'Final Copy (1)'\n        }\n      ]\n    },\n    {\n      name:\n        'Right Panel',\n      id: 'right',\n      children: [\n        {\n          id: 2,\n          name:\n            'index.ts'\n        },\n        {\n          id: 3,\n          name:\n            'package.json'\n        },\n        {\n          id: 4,\n          name:\n            'license.txt'\n        }\n      ]\n    }\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Window\n      </ActionButton>\n      <Menu\n        items={openWindows}\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        {(item) => (\n          <Section\n            items={item\n              .children}\n            title={item\n              .name}\n          >\n            {(item) => (\n              <Item>\n                {item\n                  .name}\n              </Item>\n            )}\n          </Section>\n        )}\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Dynamic Items#"
                },
                {
                    "source": "import {Keyboard, Text} from '@adobe/react-spectrum';\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item key=\"cut\" textValue=\"cut\">\n      <Cut />\n      <Text>Cut</Text>\n      <Keyboard>\u00e2\u008c\u0098X</Keyboard>\n    </Item>\n    <Item key=\"copy\" textValue=\"copy\">\n      <Copy />\n      <Text>Copy</Text>\n      <Keyboard>\u00e2\u008c\u0098C</Keyboard>\n    </Item>\n    <Item key=\"paste\" textValue=\"paste\">\n      <Paste />\n      <Text>Paste</Text>\n      <Keyboard>\u00e2\u008c\u0098V</Keyboard>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "import {Keyboard, Text} from '@adobe/react-spectrum';\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item key=\"cut\" textValue=\"cut\">\n      <Cut />\n      <Text>Cut</Text>\n      <Keyboard>\u00e2\u008c\u0098X</Keyboard>\n    </Item>\n    <Item key=\"copy\" textValue=\"copy\">\n      <Copy />\n      <Text>Copy</Text>\n      <Keyboard>\u00e2\u008c\u0098C</Keyboard>\n    </Item>\n    <Item key=\"paste\" textValue=\"paste\">\n      <Paste />\n      <Text>Paste</Text>\n      <Keyboard>\u00e2\u008c\u0098V</Keyboard>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "import {\n  Keyboard,\n  Text\n} from '@adobe/react-spectrum';\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item\n      key=\"cut\"\n      textValue=\"cut\"\n    >\n      <Cut />\n      <Text>Cut</Text>\n      <Keyboard>\n        \u00e2\u008c\u0098X\n      </Keyboard>\n    </Item>\n    <Item\n      key=\"copy\"\n      textValue=\"copy\"\n    >\n      <Copy />\n      <Text>Copy</Text>\n      <Keyboard>\n        \u00e2\u008c\u0098C\n      </Keyboard>\n    </Item>\n    <Item\n      key=\"paste\"\n      textValue=\"paste\"\n    >\n      <Paste />\n      <Text>\n        Paste\n      </Text>\n      <Keyboard>\n        \u00e2\u008c\u0098V\n      </Keyboard>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Complex Menu Items#"
                },
                {
                    "source": "import {Content, ContextualHelpTrigger, Dialog, Heading} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>Edit</ActionButton>\n  <Menu>\n    <Item key=\"undo\">Undo</Item>\n    <Item key=\"redo\">Redo</Item>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"cut\">Cut</Item>\n      <Dialog>\n        <Heading>Cut</Heading>\n        <Content>Please select text for 'Cut' to be enabled.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"copy\">Copy</Item>\n      <Dialog>\n        <Heading>Copy</Heading>\n        <Content>Please select text for 'Copy' to be enabled.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger>\n      <Item key=\"paste\">Paste</Item>\n      <Dialog>\n        <Heading>Paste</Heading>\n        <Content>You have nothing to 'Paste'.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n  </Menu>\n</MenuTrigger>",
                    "name": "Unavailable Items beta#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelpTrigger,\n  Dialog,\n  Heading\n} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>Edit</ActionButton>\n  <Menu>\n    <Item key=\"undo\">Undo</Item>\n    <Item key=\"redo\">Redo</Item>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"cut\">Cut</Item>\n      <Dialog>\n        <Heading>Cut</Heading>\n        <Content>\n          Please select text for 'Cut' to be enabled.\n        </Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"copy\">Copy</Item>\n      <Dialog>\n        <Heading>Copy</Heading>\n        <Content>\n          Please select text for 'Copy' to be enabled.\n        </Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger>\n      <Item key=\"paste\">Paste</Item>\n      <Dialog>\n        <Heading>Paste</Heading>\n        <Content>You have nothing to 'Paste'.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n  </Menu>\n</MenuTrigger>",
                    "name": "Unavailable Items beta#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelpTrigger,\n  Dialog,\n  Heading\n} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item key=\"undo\">\n      Undo\n    </Item>\n    <Item key=\"redo\">\n      Redo\n    </Item>\n    <ContextualHelpTrigger\n      isUnavailable\n    >\n      <Item key=\"cut\">\n        Cut\n      </Item>\n      <Dialog>\n        <Heading>\n          Cut\n        </Heading>\n        <Content>\n          Please select\n          text for\n          'Cut' to be\n          enabled.\n        </Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger\n      isUnavailable\n    >\n      <Item key=\"copy\">\n        Copy\n      </Item>\n      <Dialog>\n        <Heading>\n          Copy\n        </Heading>\n        <Content>\n          Please select\n          text for\n          'Copy' to be\n          enabled.\n        </Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger>\n      <Item key=\"paste\">\n        Paste\n      </Item>\n      <Dialog>\n        <Heading>\n          Paste\n        </Heading>\n        <Content>\n          You have\n          nothing to\n          'Paste'.\n        </Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n  </Menu>\n</MenuTrigger>",
                    "name": "Unavailable Items beta#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu onAction={(key) => alert(`Root menu ${key} action`)}>\n    <Item key=\"Copy\">Copy</Item>\n    <Item key=\"Cut\">Cut</Item>\n    <Item key=\"Paste\">Paste</Item>\n    <SubmenuTrigger>\n      <Item key=\"Share\">Share</Item>\n      <Menu onAction={(key) => alert(`Share menu ${key} action`)}>\n        <Item key=\"Copy Link\">Copy Link</Item>\n        <SubmenuTrigger>\n          <Item key=\"Email\">Email</Item>\n          <Menu onAction={(key) => alert(`Email menu ${key} action`)}>\n            <Item key=\"Attachment\">Email as Attachment</Item>\n            <Item key=\"Link\">Email as Link</Item>\n          </Menu>\n        </SubmenuTrigger>\n        <Item key=\"SMS\">SMS</Item>\n      </Menu>\n    </SubmenuTrigger>\n    <Item key=\"Delete\">Delete</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Static#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu\n    onAction={(key) => alert(`Root menu ${key} action`)}\n  >\n    <Item key=\"Copy\">Copy</Item>\n    <Item key=\"Cut\">Cut</Item>\n    <Item key=\"Paste\">Paste</Item>\n    <SubmenuTrigger>\n      <Item key=\"Share\">Share</Item>\n      <Menu\n        onAction={(key) =>\n          alert(`Share menu ${key} action`)}\n      >\n        <Item key=\"Copy Link\">Copy Link</Item>\n        <SubmenuTrigger>\n          <Item key=\"Email\">Email</Item>\n          <Menu\n            onAction={(key) =>\n              alert(`Email menu ${key} action`)}\n          >\n            <Item key=\"Attachment\">\n              Email as Attachment\n            </Item>\n            <Item key=\"Link\">Email as Link</Item>\n          </Menu>\n        </SubmenuTrigger>\n        <Item key=\"SMS\">SMS</Item>\n      </Menu>\n    </SubmenuTrigger>\n    <Item key=\"Delete\">Delete</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Static#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\n<MenuTrigger>\n  <ActionButton>\n    Actions\n  </ActionButton>\n  <Menu\n    onAction={(key) =>\n      alert(\n        `Root menu ${key} action`\n      )}\n  >\n    <Item key=\"Copy\">\n      Copy\n    </Item>\n    <Item key=\"Cut\">\n      Cut\n    </Item>\n    <Item key=\"Paste\">\n      Paste\n    </Item>\n    <SubmenuTrigger>\n      <Item key=\"Share\">\n        Share\n      </Item>\n      <Menu\n        onAction={(\n          key\n        ) =>\n          alert(\n            `Share menu ${key} action`\n          )}\n      >\n        <Item key=\"Copy Link\">\n          Copy Link\n        </Item>\n        <SubmenuTrigger>\n          <Item key=\"Email\">\n            Email\n          </Item>\n          <Menu\n            onAction={(\n              key\n            ) =>\n              alert(\n                `Email menu ${key} action`\n              )}\n          >\n            <Item key=\"Attachment\">\n              Email as\n              Attachment\n            </Item>\n            <Item key=\"Link\">\n              Email as\n              Link\n            </Item>\n          </Menu>\n        </SubmenuTrigger>\n        <Item key=\"SMS\">\n          SMS\n        </Item>\n      </Menu>\n    </SubmenuTrigger>\n    <Item key=\"Delete\">\n      Delete\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Static#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\nlet items = [\n  { name: 'Copy' },\n  { name: 'Cut' },\n  { name: 'Paste' },\n  {\n    name: 'Share',\n    children: [\n      { name: 'Copy Link' },\n      {\n        name: 'Email',\n        children: [\n          { name: 'Email as Attachment' },\n          { name: 'Email as Link' }\n        ]\n      },\n      { name: 'SMS' }\n    ]\n  },\n  { name: 'Delete' }\n];\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu items={items}>\n    {function renderSubmenu(item) {\n      if (item.children) {\n        return (\n          <SubmenuTrigger>\n            <Item key={item.name}>{item.name}</Item>\n            <Menu items={item.children}>\n              {(item) => renderSubmenu(item)}\n            </Menu>\n          </SubmenuTrigger>\n        );\n      } else {\n        return <Item key={item.name}>{item.name}</Item>;\n      }\n    }}\n  </Menu>\n</MenuTrigger>",
                    "name": "Dynamic#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\nlet items = [\n  { name: 'Copy' },\n  { name: 'Cut' },\n  { name: 'Paste' },\n  {\n    name: 'Share',\n    children: [\n      { name: 'Copy Link' },\n      {\n        name: 'Email',\n        children: [\n          { name: 'Email as Attachment' },\n          { name: 'Email as Link' }\n        ]\n      },\n      { name: 'SMS' }\n    ]\n  },\n  { name: 'Delete' }\n];\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu items={items}>\n    {function renderSubmenu(item) {\n      if (item.children) {\n        return (\n          <SubmenuTrigger>\n            <Item key={item.name}>{item.name}</Item>\n            <Menu items={item.children}>\n              {(item) => renderSubmenu(item)}\n            </Menu>\n          </SubmenuTrigger>\n        );\n      } else {\n        return <Item key={item.name}>{item.name}</Item>;\n      }\n    }}\n  </Menu>\n</MenuTrigger>",
                    "name": "Dynamic#"
                },
                {
                    "source": "import {SubmenuTrigger} from '@adobe/react-spectrum';\n\nlet items = [\n  { name: 'Copy' },\n  { name: 'Cut' },\n  { name: 'Paste' },\n  {\n    name: 'Share',\n    children: [\n      {\n        name: 'Copy Link'\n      },\n      {\n        name: 'Email',\n        children: [\n          {\n            name:\n              'Email as Attachment'\n          },\n          {\n            name:\n              'Email as Link'\n          }\n        ]\n      },\n      { name: 'SMS' }\n    ]\n  },\n  { name: 'Delete' }\n];\n\n<MenuTrigger>\n  <ActionButton>\n    Actions\n  </ActionButton>\n  <Menu items={items}>\n    {function renderSubmenu(\n      item\n    ) {\n      if (\n        item.children\n      ) {\n        return (\n          <SubmenuTrigger>\n            <Item\n              key={item\n                .name}\n            >\n              {item\n                .name}\n            </Item>\n            <Menu\n              items={item\n                .children}\n            >\n              {(\n                item\n              ) =>\n                renderSubmenu(\n                  item\n                )}\n            </Menu>\n          </SubmenuTrigger>\n        );\n      } else {\n        return (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        );\n      }\n    }}\n  </Menu>\n</MenuTrigger>",
                    "name": "Dynamic#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Filter\n  </ActionButton>\n  <Menu\n    items={[\n      {name: 'tiff', id: 'a1b2c3'},\n      {name: 'png', id: 'g5h1j9'},\n      {name: 'jpg', id: 'p8k3i4'},\n      {name: 'PDF', id: 'j7i3a0'}\n    ]}\n    disabledKeys={['a1b2c3', 'p8k3i4']}>\n    {item => <Item>{item.name}</Item>}\n  </Menu>\n</MenuTrigger>",
                    "name": "Disabled#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Filter\n  </ActionButton>\n  <Menu\n    items={[\n      {name: 'tiff', id: 'a1b2c3'},\n      {name: 'png', id: 'g5h1j9'},\n      {name: 'jpg', id: 'p8k3i4'},\n      {name: 'PDF', id: 'j7i3a0'}\n    ]}\n    disabledKeys={['a1b2c3', 'p8k3i4']}>\n    {item => <Item>{item.name}</Item>}\n  </Menu>\n</MenuTrigger>",
                    "name": "Disabled#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Filter\n  </ActionButton>\n  <Menu\n    items={[\n      {\n        name: 'tiff',\n        id: 'a1b2c3'\n      },\n      {\n        name: 'png',\n        id: 'g5h1j9'\n      },\n      {\n        name: 'jpg',\n        id: 'p8k3i4'\n      },\n      {\n        name: 'PDF',\n        id: 'j7i3a0'\n      }\n    ]}\n    disabledKeys={[\n      'a1b2c3',\n      'p8k3i4'\n    ]}\n  >\n    {(item) => (\n      <Item>\n        {item.name}\n      </Item>\n    )}\n  </Menu>\n</MenuTrigger>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "MenuTrigger",
            "url": "https://react-spectrum.adobe.com/react-spectrum/MenuTrigger.html",
            "examples": [
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item>Cut</Item>\n    <Item>Copy</Item>\n    <Item>Paste</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item>Cut</Item>\n    <Item>Copy</Item>\n    <Item>Paste</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item>Cut</Item>\n    <Item>Copy</Item>\n    <Item>Paste</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Flex gap=\"size-100\" alignItems=\"center\">\n      <MenuTrigger onOpenChange={setIsOpen}>\n        <ActionButton>\n            Edit\n        </ActionButton>\n        <Menu>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <div>Currently open: {isOpen.toString()}</div>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Flex gap=\"size-100\" alignItems=\"center\">\n      <MenuTrigger onOpenChange={setIsOpen}>\n        <ActionButton>\n            Edit\n        </ActionButton>\n        <Menu>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <div>Currently open: {isOpen.toString()}</div>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    isOpen,\n    setIsOpen\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <Flex\n      gap=\"size-100\"\n      alignItems=\"center\"\n    >\n      <MenuTrigger\n        onOpenChange={setIsOpen}\n      >\n        <ActionButton>\n          Edit\n        </ActionButton>\n        <Menu>\n          <Item key=\"cut\">\n            Cut\n          </Item>\n          <Item key=\"copy\">\n            Copy\n          </Item>\n          <Item key=\"paste\">\n            Paste\n          </Item>\n        </Menu>\n      </MenuTrigger>\n      <div>\n        Currently open:\n        {' '}\n        {isOpen\n          .toString()}\n      </div>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CloneStamp from '@spectrum-icons/workflow/CloneStamp';\nimport Crop from '@spectrum-icons/workflow/Crop';\nimport CropRotate from '@spectrum-icons/workflow/CropRotate';\nimport Slice from '@spectrum-icons/workflow/Slice';\n\n<MenuTrigger trigger=\"longPress\">\n  <ActionButton\n    aria-label=\"Crop tool\"\n    onPress={() => alert('Cropping!')}\n  >\n    <Crop />\n  </ActionButton>\n  <Menu>\n    <Item textValue=\"Crop Rotate\">\n      <CropRotate />\n      <Text>Crop Rotate</Text>\n    </Item>\n    <Item textValue=\"Slice\">\n      <Slice />\n      <Text>Slice</Text>\n    </Item>\n    <Item textValue=\"Clone stamp\">\n      <CloneStamp />\n      <Text>Clone Stamp</Text>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Long press#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CloneStamp from '@spectrum-icons/workflow/CloneStamp';\nimport Crop from '@spectrum-icons/workflow/Crop';\nimport CropRotate from '@spectrum-icons/workflow/CropRotate';\nimport Slice from '@spectrum-icons/workflow/Slice';\n\n<MenuTrigger trigger=\"longPress\">\n  <ActionButton\n    aria-label=\"Crop tool\"\n    onPress={() => alert('Cropping!')}\n  >\n    <Crop />\n  </ActionButton>\n  <Menu>\n    <Item textValue=\"Crop Rotate\">\n      <CropRotate />\n      <Text>Crop Rotate</Text>\n    </Item>\n    <Item textValue=\"Slice\">\n      <Slice />\n      <Text>Slice</Text>\n    </Item>\n    <Item textValue=\"Clone stamp\">\n      <CloneStamp />\n      <Text>Clone Stamp</Text>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Long press#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CloneStamp from '@spectrum-icons/workflow/CloneStamp';\nimport Crop from '@spectrum-icons/workflow/Crop';\nimport CropRotate from '@spectrum-icons/workflow/CropRotate';\nimport Slice from '@spectrum-icons/workflow/Slice';\n\n<MenuTrigger trigger=\"longPress\">\n  <ActionButton\n    aria-label=\"Crop tool\"\n    onPress={() =>\n      alert(\n        'Cropping!'\n      )}\n  >\n    <Crop />\n  </ActionButton>\n  <Menu>\n    <Item textValue=\"Crop Rotate\">\n      <CropRotate />\n      <Text>\n        Crop Rotate\n      </Text>\n    </Item>\n    <Item textValue=\"Slice\">\n      <Slice />\n      <Text>\n        Slice\n      </Text>\n    </Item>\n    <Item textValue=\"Clone stamp\">\n      <CloneStamp />\n      <Text>\n        Clone Stamp\n      </Text>\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Long press#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger align=\"start\">\n    <ActionButton>Edit</ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger align=\"end\" direction=\"top\" shouldFlip={false}>\n    <ActionButton>View</ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger direction=\"start\" align=\"start\">\n    <ActionButton>Edit</ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger direction=\"end\" align=\"end\">\n    <ActionButton>View</ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger align=\"start\">\n    <ActionButton>Edit</ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger\n    align=\"end\"\n    direction=\"top\"\n    shouldFlip={false}\n  >\n    <ActionButton>View</ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger direction=\"start\" align=\"start\">\n    <ActionButton>Edit</ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger direction=\"end\" align=\"end\">\n    <ActionButton>View</ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger align=\"start\">\n    <ActionButton>\n      Edit\n    </ActionButton>\n    <Menu>\n      <Item key=\"cut\">\n        Cut\n      </Item>\n      <Item key=\"copy\">\n        Copy\n      </Item>\n      <Item key=\"paste\">\n        Paste\n      </Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger\n    align=\"end\"\n    direction=\"top\"\n    shouldFlip={false}\n  >\n    <ActionButton>\n      View\n    </ActionButton>\n    <Menu>\n      <Item key=\"side\">\n        Side bar\n      </Item>\n      <Item key=\"options\">\n        Page options\n      </Item>\n      <Item key=\"edit\">\n        Edit Panel\n      </Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger\n    direction=\"start\"\n    align=\"start\"\n  >\n    <ActionButton>\n      Edit\n    </ActionButton>\n    <Menu>\n      <Item key=\"cut\">\n        Cut\n      </Item>\n      <Item key=\"copy\">\n        Copy\n      </Item>\n      <Item key=\"paste\">\n        Paste\n      </Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger\n    direction=\"end\"\n    align=\"end\"\n  >\n    <ActionButton>\n      View\n    </ActionButton>\n    <Menu>\n      <Item key=\"side\">\n        Side bar\n      </Item>\n      <Item key=\"options\">\n        Page options\n      </Item>\n      <Item key=\"edit\">\n        Edit Panel\n      </Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<MenuTrigger closeOnSelect={false}>\n  <ActionButton>\n    View\n  </ActionButton>\n  <Menu selectionMode=\"multiple\">\n    <Item key=\"side\">Side bar</Item>\n    <Item key=\"options\">Page options</Item>\n    <Item key=\"edit\">Edit Panel</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Close on selection#"
                },
                {
                    "source": "<MenuTrigger closeOnSelect={false}>\n  <ActionButton>\n    View\n  </ActionButton>\n  <Menu selectionMode=\"multiple\">\n    <Item key=\"side\">Side bar</Item>\n    <Item key=\"options\">Page options</Item>\n    <Item key=\"edit\">Edit Panel</Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Close on selection#"
                },
                {
                    "source": "<MenuTrigger\n  closeOnSelect={false}\n>\n  <ActionButton>\n    View\n  </ActionButton>\n  <Menu selectionMode=\"multiple\">\n    <Item key=\"side\">\n      Side bar\n    </Item>\n    <Item key=\"options\">\n      Page options\n    </Item>\n    <Item key=\"edit\">\n      Edit Panel\n    </Item>\n  </Menu>\n</MenuTrigger>",
                    "name": "Close on selection#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger shouldFlip>\n    <ActionButton>\n      View\n    </ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger shouldFlip={false}>\n    <ActionButton>\n      Edit\n    </ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger shouldFlip>\n    <ActionButton>\n      View\n    </ActionButton>\n    <Menu>\n      <Item key=\"side\">Side bar</Item>\n      <Item key=\"options\">Page options</Item>\n      <Item key=\"edit\">Edit Panel</Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger shouldFlip={false}>\n    <ActionButton>\n      Edit\n    </ActionButton>\n    <Menu>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <MenuTrigger\n    shouldFlip\n  >\n    <ActionButton>\n      View\n    </ActionButton>\n    <Menu>\n      <Item key=\"side\">\n        Side bar\n      </Item>\n      <Item key=\"options\">\n        Page options\n      </Item>\n      <Item key=\"edit\">\n        Edit Panel\n      </Item>\n    </Menu>\n  </MenuTrigger>\n  <MenuTrigger\n    shouldFlip={false}\n  >\n    <ActionButton>\n      Edit\n    </ActionButton>\n    <Menu>\n      <Item key=\"cut\">\n        Cut\n      </Item>\n      <Item key=\"copy\">\n        Copy\n      </Item>\n      <Item key=\"paste\">\n        Paste\n      </Item>\n    </Menu>\n  </MenuTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <MenuTrigger\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <ActionButton>\n        View\n      </ActionButton>\n      <Menu selectionMode=\"multiple\">\n        <Item key=\"side\">Side bar</Item>\n        <Item key=\"options\">Page options</Item>\n        <Item key=\"edit\">Edit Panel</Item>\n      </Menu>\n    </MenuTrigger>\n  );\n}",
                    "name": "Open#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <MenuTrigger\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <ActionButton>\n        View\n      </ActionButton>\n      <Menu selectionMode=\"multiple\">\n        <Item key=\"side\">Side bar</Item>\n        <Item key=\"options\">Page options</Item>\n        <Item key=\"edit\">Edit Panel</Item>\n      </Menu>\n    </MenuTrigger>\n  );\n}",
                    "name": "Open#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <MenuTrigger\n      isOpen={open}\n      onOpenChange={setOpen}\n    >\n      <ActionButton>\n        View\n      </ActionButton>\n      <Menu selectionMode=\"multiple\">\n        <Item key=\"side\">\n          Side bar\n        </Item>\n        <Item key=\"options\">\n          Page options\n        </Item>\n        <Item key=\"edit\">\n          Edit Panel\n        </Item>\n      </Menu>\n    </MenuTrigger>\n  );\n}\n",
                    "name": "Open#"
                }
            ]
        },
        {
            "name": "TableView",
            "url": "https://react-spectrum.adobe.com/react-spectrum/TableView.html",
            "examples": [
                {
                    "source": "<TableView\n  aria-label=\"Example table with static contents\"\n  selectionMode=\"multiple\"\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Example#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table with static contents\"\n  selectionMode=\"multiple\"\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Example#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table with static contents\"\n  selectionMode=\"multiple\"\n>\n  <TableHeader>\n    <Column>\n      Name\n    </Column>\n    <Column>\n      Type\n    </Column>\n    <Column align=\"end\">\n      Date Modified\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        Games\n      </Cell>\n      <Cell>\n        File folder\n      </Cell>\n      <Cell>\n        6/7/2020\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Program Files\n      </Cell>\n      <Cell>\n        File folder\n      </Cell>\n      <Cell>\n        4/7/2021\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        bootmgr\n      </Cell>\n      <Cell>\n        System file\n      </Cell>\n      <Cell>\n        11/20/2010\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        log.txt\n      </Cell>\n      <Cell>\n        Text Document\n      </Cell>\n      <Cell>\n        1/18/2016\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Example#"
                },
                {
                    "source": "let columns = [\n  {name: 'Name', uid: 'name'},\n  {name: 'Type', uid: 'type'},\n  {name: 'Date Modified', uid: 'date'}\n];\n\nlet rows = [\n  {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n  {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n  {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n  {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n];\n\n<TableView\n  aria-label=\"Example table with dynamic content\"\n  maxWidth=\"size-6000\">\n  <TableHeader columns={columns}>\n    {column => (\n      <Column\n        key={column.uid}\n        align={column.uid === 'date' ? 'end' : 'start'}>\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {item => (\n      <Row>\n        {columnKey => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Content#"
                },
                {
                    "source": "let columns = [\n  { name: 'Name', uid: 'name' },\n  { name: 'Type', uid: 'type' },\n  { name: 'Date Modified', uid: 'date' }\n];\n\nlet rows = [\n  {\n    id: 1,\n    name: 'Games',\n    date: '6/7/2020',\n    type: 'File folder'\n  },\n  {\n    id: 2,\n    name: 'Program Files',\n    date: '4/7/2021',\n    type: 'File folder'\n  },\n  {\n    id: 3,\n    name: 'bootmgr',\n    date: '11/20/2010',\n    type: 'System file'\n  },\n  {\n    id: 4,\n    name: 'log.txt',\n    date: '1/18/2016',\n    type: 'Text Document'\n  }\n];\n\n<TableView\n  aria-label=\"Example table with dynamic content\"\n  maxWidth=\"size-6000\"\n>\n  <TableHeader columns={columns}>\n    {(column) => (\n      <Column\n        key={column.uid}\n        align={column.uid === 'date' ? 'end' : 'start'}\n      >\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {(item) => (\n      <Row>\n        {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Content#"
                },
                {
                    "source": "let columns = [\n  {\n    name: 'Name',\n    uid: 'name'\n  },\n  {\n    name: 'Type',\n    uid: 'type'\n  },\n  {\n    name:\n      'Date Modified',\n    uid: 'date'\n  }\n];\n\nlet rows = [\n  {\n    id: 1,\n    name: 'Games',\n    date: '6/7/2020',\n    type: 'File folder'\n  },\n  {\n    id: 2,\n    name:\n      'Program Files',\n    date: '4/7/2021',\n    type: 'File folder'\n  },\n  {\n    id: 3,\n    name: 'bootmgr',\n    date: '11/20/2010',\n    type: 'System file'\n  },\n  {\n    id: 4,\n    name: 'log.txt',\n    date: '1/18/2016',\n    type: 'Text Document'\n  }\n];\n\n<TableView\n  aria-label=\"Example table with dynamic content\"\n  maxWidth=\"size-6000\"\n>\n  <TableHeader\n    columns={columns}\n  >\n    {(column) => (\n      <Column\n        key={column\n          .uid}\n        align={column\n            .uid ===\n            'date'\n          ? 'end'\n          : 'start'}\n      >\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody\n    items={rows}\n  >\n    {(item) => (\n      <Row>\n        {(columnKey) => (\n          <Cell>\n            {item[\n              columnKey\n            ]}\n          </Cell>\n        )}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Content#"
                },
                {
                    "source": "<Flex height=\"size-5000\" width=\"100%\" direction=\"column\" gap=\"size-150\">\n  <ActionButton alignSelf=\"start\">Add</ActionButton>\n  <TableView\n    flex\n    aria-label=\"Example table with dynamic content\"\n  >\n    <TableHeader columns={columns}>\n      {(column) => (\n        <Column\n          key={column.id}\n        >\n          {column.name}\n        </Column>\n      )}\n    </TableHeader>\n    <TableBody items={rows}>\n      {(item) => (\n        <Row>\n          {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n        </Row>\n      )}\n    </TableBody>\n  </TableView>\n</Flex>",
                    "name": "Layout#"
                },
                {
                    "source": "<Flex\n  height=\"size-5000\"\n  width=\"100%\"\n  direction=\"column\"\n  gap=\"size-150\"\n>\n  <ActionButton alignSelf=\"start\">Add</ActionButton>\n  <TableView\n    flex\n    aria-label=\"Example table with dynamic content\"\n  >\n    <TableHeader columns={columns}>\n      {(column) => (\n        <Column\n          key={column.id}\n        >\n          {column.name}\n        </Column>\n      )}\n    </TableHeader>\n    <TableBody items={rows}>\n      {(item) => (\n        <Row>\n          {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n        </Row>\n      )}\n    </TableBody>\n  </TableView>\n</Flex>",
                    "name": "Layout#"
                },
                {
                    "source": "<Flex\n  height=\"size-5000\"\n  width=\"100%\"\n  direction=\"column\"\n  gap=\"size-150\"\n>\n  <ActionButton alignSelf=\"start\">\n    Add\n  </ActionButton>\n  <TableView\n    flex\n    aria-label=\"Example table with dynamic content\"\n  >\n    <TableHeader\n      columns={columns}\n    >\n      {(column) => (\n        <Column\n          key={column\n            .id}\n        >\n          {column.name}\n        </Column>\n      )}\n    </TableHeader>\n    <TableBody\n      items={rows}\n    >\n      {(item) => (\n        <Row>\n          {(columnKey) => (\n            <Cell>\n              {item[\n                columnKey\n              ]}\n            </Cell>\n          )}\n        </Row>\n      )}\n    </TableBody>\n  </TableView>\n</Flex>",
                    "name": "Layout#"
                },
                {
                    "source": "<TableView aria-label=\"Example table with static contents\">\n  <TableHeader>\n    <Column isRowHeader>First Name</Column>\n    <Column isRowHeader>Last Name</Column>\n    <Column align=\"end\">Age</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>John</Cell>\n      <Cell>Doe</Cell>\n      <Cell>45</Cell>\n    </Row>\n    <Row>\n      <Cell>Jane</Cell>\n      <Cell>Doe</Cell>\n      <Cell>37</Cell>\n    </Row>\n    <Row>\n      <Cell>Joe</Cell>\n      <Cell>Schmoe</Cell>\n      <Cell>67</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<TableView aria-label=\"Example table with static contents\">\n  <TableHeader>\n    <Column isRowHeader>First Name</Column>\n    <Column isRowHeader>Last Name</Column>\n    <Column align=\"end\">Age</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>John</Cell>\n      <Cell>Doe</Cell>\n      <Cell>45</Cell>\n    </Row>\n    <Row>\n      <Cell>Jane</Cell>\n      <Cell>Doe</Cell>\n      <Cell>37</Cell>\n    </Row>\n    <Row>\n      <Cell>Joe</Cell>\n      <Cell>Schmoe</Cell>\n      <Cell>67</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<TableView aria-label=\"Example table with static contents\">\n  <TableHeader>\n    <Column\n      isRowHeader\n    >\n      First Name\n    </Column>\n    <Column\n      isRowHeader\n    >\n      Last Name\n    </Column>\n    <Column align=\"end\">\n      Age\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>John</Cell>\n      <Cell>Doe</Cell>\n      <Cell>45</Cell>\n    </Row>\n    <Row>\n      <Cell>Jane</Cell>\n      <Cell>Doe</Cell>\n      <Cell>37</Cell>\n    </Row>\n    <Row>\n      <Cell>Joe</Cell>\n      <Cell>\n        Schmoe\n      </Cell>\n      <Cell>67</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Accessibility#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncTable() {\n  let columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Height', key: 'height' },\n    { name: 'Mass', key: 'mass' },\n    { name: 'Birth Year', key: 'birth_year' }\n  ];\n\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(\n        cursor || `https://swapi.py4e.com/api/people/?search=`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <TableView aria-label=\"example async loading table\" height=\"size-3000\">\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column align={column.key !== 'name' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}\n        onLoadMore={list.loadMore}\n      >\n        {(item) => (\n          <Row key={item.name}>{(key) => <Cell>{item[key]}</Cell>}</Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncTable() {\n  let columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Height', key: 'height' },\n    { name: 'Mass', key: 'mass' },\n    { name: 'Birth Year', key: 'birth_year' }\n  ];\n\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(\n        cursor ||\n          `https://swapi.py4e.com/api/people/?search=`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"example async loading table\"\n      height=\"size-3000\"\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            align={column.key !== 'name' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}\n        onLoadMore={list.loadMore}\n      >\n        {(item) => (\n          <Row key={item.name}>\n            {(key) => <Cell>{item[key]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncTable() {\n  let columns = [\n    {\n      name: 'Name',\n      key: 'name'\n    },\n    {\n      name: 'Height',\n      key: 'height'\n    },\n    {\n      name: 'Mass',\n      key: 'mass'\n    },\n    {\n      name: 'Birth Year',\n      key: 'birth_year'\n    }\n  ];\n\n  let list =\n    useAsyncList<\n      Character\n    >({\n      async load(\n        {\n          signal,\n          cursor\n        }\n      ) {\n        if (cursor) {\n          cursor = cursor\n            .replace(\n              /^http:\\/\\//i,\n              'https://'\n            );\n        }\n\n        let res =\n          await fetch(\n            cursor ||\n              `https://swapi.py4e.com/api/people/?search=`,\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next\n        };\n      }\n    });\n\n  return (\n    <TableView\n      aria-label=\"example async loading table\"\n      height=\"size-3000\"\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            align={column\n                .key !==\n                'name'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n        loadingState={list\n          .loadingState}\n        onLoadMore={list\n          .loadMore}\n      >\n        {(item) => (\n          <Row\n            key={item\n              .name}\n          >\n            {(key) => (\n              <Cell>\n                {item[\n                  key\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table with multiple selection\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={['2', '4']}\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Level</Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Selection#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table with multiple selection\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={['2', '4']}\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Level</Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Selection#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table with multiple selection\"\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={[\n    '2',\n    '4'\n  ]}\n>\n  <TableHeader>\n    <Column>\n      Name\n    </Column>\n    <Column>\n      Type\n    </Column>\n    <Column align=\"end\">\n      Level\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>\n        Charizard\n      </Cell>\n      <Cell>\n        Fire, Flying\n      </Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>\n        Blastoise\n      </Cell>\n      <Cell>\n        Water\n      </Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>\n        Venusaur\n      </Cell>\n      <Cell>\n        Grass, Poison\n      </Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>\n        Pikachu\n      </Cell>\n      <Cell>\n        Electric\n      </Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction PokemonTable(props) {\n  let columns = [\n    { name: 'Name', uid: 'name' },\n    { name: 'Type', uid: 'type' },\n    { name: 'Level', uid: 'level' }\n  ];\n\n  let rows = [\n    { id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67' },\n    { id: 2, name: 'Blastoise', type: 'Water', level: '56' },\n    { id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83' },\n    { id: 4, name: 'Pikachu', type: 'Electric', level: '100' }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\n\n  return (\n    <TableView\n      aria-label=\"Table with controlled selection\"\n      selectionMode=\"multiple\"\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      {...props}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.uid}\n            align={column.uid === 'level' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction PokemonTable(props) {\n  let columns = [\n    { name: 'Name', uid: 'name' },\n    { name: 'Type', uid: 'type' },\n    { name: 'Level', uid: 'level' }\n  ];\n\n  let rows = [\n    {\n      id: 1,\n      name: 'Charizard',\n      type: 'Fire, Flying',\n      level: '67'\n    },\n    {\n      id: 2,\n      name: 'Blastoise',\n      type: 'Water',\n      level: '56'\n    },\n    {\n      id: 3,\n      name: 'Venusaur',\n      type: 'Grass, Poison',\n      level: '83'\n    },\n    {\n      id: 4,\n      name: 'Pikachu',\n      type: 'Electric',\n      level: '100'\n    }\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<\n    Selection\n  >(new Set([2]));\n\n  return (\n    <TableView\n      aria-label=\"Table with controlled selection\"\n      selectionMode=\"multiple\"\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      {...props}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.uid}\n            align={column.uid === 'level' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "import type {Selection} from '@adobe/react-spectrum';\n\nfunction PokemonTable(\n  props\n) {\n  let columns = [\n    {\n      name: 'Name',\n      uid: 'name'\n    },\n    {\n      name: 'Type',\n      uid: 'type'\n    },\n    {\n      name: 'Level',\n      uid: 'level'\n    }\n  ];\n\n  let rows = [\n    {\n      id: 1,\n      name: 'Charizard',\n      type:\n        'Fire, Flying',\n      level: '67'\n    },\n    {\n      id: 2,\n      name: 'Blastoise',\n      type: 'Water',\n      level: '56'\n    },\n    {\n      id: 3,\n      name: 'Venusaur',\n      type:\n        'Grass, Poison',\n      level: '83'\n    },\n    {\n      id: 4,\n      name: 'Pikachu',\n      type: 'Electric',\n      level: '100'\n    }\n  ];\n\n  let [\n    selectedKeys,\n    setSelectedKeys\n  ] = React.useState<\n    Selection\n  >(new Set([2]));\n\n  return (\n    <TableView\n      aria-label=\"Table with controlled selection\"\n      selectionMode=\"multiple\"\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      {...props}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .uid}\n            align={column\n                .uid ===\n                'level'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={rows}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Controlled selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable selectionMode=\"single\" />",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable selectionMode=\"single\" />",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable selectionMode=\"single\" />",
                    "name": "Single selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable disallowEmptySelection />",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable disallowEmptySelection />",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable\n  disallowEmptySelection\n/>",
                    "name": "Disallow empty selection#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable selectionMode=\"multiple\" disabledKeys={[3]} />",
                    "name": "Disabled rows#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable selectionMode=\"multiple\" disabledKeys={[3]} />",
                    "name": "Disabled rows#"
                },
                {
                    "source": "// Using the same table as above\n<PokemonTable\n  selectionMode=\"multiple\"\n  disabledKeys={[3]}\n/>",
                    "name": "Disabled rows#"
                },
                {
                    "source": "<PokemonTable selectionMode=\"multiple\" selectionStyle=\"highlight\" />",
                    "name": "Highlight selection#"
                },
                {
                    "source": "<PokemonTable\n  selectionMode=\"multiple\"\n  selectionStyle=\"highlight\"\n/>",
                    "name": "Highlight selection#"
                },
                {
                    "source": "<PokemonTable\n  selectionMode=\"multiple\"\n  selectionStyle=\"highlight\"\n/>",
                    "name": "Highlight selection#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and checkbox selection\"\n    selectionMode=\"multiple\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and highlight selection\"\n    selectionMode=\"multiple\"\n    selectionStyle=\"highlight\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and checkbox selection\"\n    selectionMode=\"multiple\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and highlight selection\"\n    selectionMode=\"multiple\"\n    selectionStyle=\"highlight\"\n    onAction={(key) => alert(`Opening item ${key}...`)}\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and checkbox selection\"\n    selectionMode=\"multiple\"\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n  />\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and highlight selection\"\n    selectionMode=\"multiple\"\n    selectionStyle=\"highlight\"\n    onAction={(key) =>\n      alert(\n        `Opening item ${key}...`\n      )}\n  />\n</Flex>",
                    "name": "Row actions#"
                },
                {
                    "source": "<TableView aria-label=\"Bookmarks\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>URL</Column>\n    <Column>Date added</Column>\n  </TableHeader>\n  <TableBody>\n    <Row href=\"https://adobe.com/\" target=\"_blank\">\n      <Cell>Adobe</Cell>\n      <Cell>https://adobe.com/</Cell>\n      <Cell>January 28, 2023</Cell>\n    </Row>\n    <Row href=\"https://google.com/\" target=\"_blank\">\n      <Cell>Google</Cell>\n      <Cell>https://google.com/</Cell>\n      <Cell>April 5, 2023</Cell>\n    </Row>\n    <Row href=\"https://nytimes.com/\" target=\"_blank\">\n      <Cell>New York Times</Cell>\n      <Cell>https://nytimes.com/</Cell>\n      <Cell>July 12, 2023</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Links#"
                },
                {
                    "source": "<TableView aria-label=\"Bookmarks\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>URL</Column>\n    <Column>Date added</Column>\n  </TableHeader>\n  <TableBody>\n    <Row href=\"https://adobe.com/\" target=\"_blank\">\n      <Cell>Adobe</Cell>\n      <Cell>https://adobe.com/</Cell>\n      <Cell>January 28, 2023</Cell>\n    </Row>\n    <Row href=\"https://google.com/\" target=\"_blank\">\n      <Cell>Google</Cell>\n      <Cell>https://google.com/</Cell>\n      <Cell>April 5, 2023</Cell>\n    </Row>\n    <Row href=\"https://nytimes.com/\" target=\"_blank\">\n      <Cell>New York Times</Cell>\n      <Cell>https://nytimes.com/</Cell>\n      <Cell>July 12, 2023</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Links#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Bookmarks\"\n  selectionMode=\"multiple\"\n>\n  <TableHeader>\n    <Column>\n      Name\n    </Column>\n    <Column>\n      URL\n    </Column>\n    <Column>\n      Date added\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row\n      href=\"https://adobe.com/\"\n      target=\"_blank\"\n    >\n      <Cell>\n        Adobe\n      </Cell>\n      <Cell>\n        https://adobe.com/\n      </Cell>\n      <Cell>\n        January 28,\n        2023\n      </Cell>\n    </Row>\n    <Row\n      href=\"https://google.com/\"\n      target=\"_blank\"\n    >\n      <Cell>\n        Google\n      </Cell>\n      <Cell>\n        https://google.com/\n      </Cell>\n      <Cell>\n        April 5, 2023\n      </Cell>\n    </Row>\n    <Row\n      href=\"https://nytimes.com/\"\n      target=\"_blank\"\n    >\n      <Cell>\n        New York Times\n      </Cell>\n      <Cell>\n        https://nytimes.com/\n      </Cell>\n      <Cell>\n        July 12, 2023\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Links#"
                },
                {
                    "source": "import {useCollator} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncSortTable() {\n  let collator = useCollator({ numeric: true });\n\n  let list = useAsyncList<Character>({\n    async load({ signal }) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {\n        signal\n      });\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({ items, sortDescriptor }) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = collator.compare(first, second);\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Example table with client side sorting\"\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n      height=\"size-3000\"\n    >\n      <TableHeader>\n        <Column key=\"name\" allowsSorting>Name</Column>\n        <Column key=\"height\" allowsSorting>Height</Column>\n        <Column key=\"mass\" allowsSorting>Mass</Column>\n        <Column key=\"birth_year\" allowsSorting>Birth Year</Column>\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}\n      >\n        {(item) => (\n          <Row key={item.name}>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Sorting#"
                },
                {
                    "source": "import {useCollator} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncSortTable() {\n  let collator = useCollator({ numeric: true });\n\n  let list = useAsyncList<Character>({\n    async load({ signal }) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search`,\n        { signal }\n      );\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({ items, sortDescriptor }) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = collator.compare(first, second);\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Example table with client side sorting\"\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n      height=\"size-3000\"\n    >\n      <TableHeader>\n        <Column key=\"name\" allowsSorting>Name</Column>\n        <Column key=\"height\" allowsSorting>Height</Column>\n        <Column key=\"mass\" allowsSorting>Mass</Column>\n        <Column key=\"birth_year\" allowsSorting>\n          Birth Year\n        </Column>\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}\n      >\n        {(item) => (\n          <Row key={item.name}>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Sorting#"
                },
                {
                    "source": "import {useCollator} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string;\n  height: number;\n  mass: number;\n  birth_year: number;\n}\n\nfunction AsyncSortTable() {\n  let collator =\n    useCollator({\n      numeric: true\n    });\n\n  let list =\n    useAsyncList<\n      Character\n    >({\n      async load(\n        { signal }\n      ) {\n        let res =\n          await fetch(\n            `https://swapi.py4e.com/api/people/?search`,\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n        return {\n          items:\n            json.results\n        };\n      },\n      async sort(\n        {\n          items,\n          sortDescriptor\n        }\n      ) {\n        return {\n          items: items\n            .sort(\n              (a, b) => {\n                let first =\n                  a[\n                    sortDescriptor\n                      .column\n                  ];\n                let second =\n                  b[\n                    sortDescriptor\n                      .column\n                  ];\n                let cmp =\n                  collator\n                    .compare(\n                      first,\n                      second\n                    );\n                if (\n                  sortDescriptor\n                    .direction ===\n                    'descending'\n                ) {\n                  cmp *=\n                    -1;\n                }\n                return cmp;\n              }\n            )\n        };\n      }\n    });\n\n  return (\n    <TableView\n      aria-label=\"Example table with client side sorting\"\n      sortDescriptor={list\n        .sortDescriptor}\n      onSortChange={list\n        .sort}\n      height=\"size-3000\"\n    >\n      <TableHeader>\n        <Column\n          key=\"name\"\n          allowsSorting\n        >\n          Name\n        </Column>\n        <Column\n          key=\"height\"\n          allowsSorting\n        >\n          Height\n        </Column>\n        <Column\n          key=\"mass\"\n          allowsSorting\n        >\n          Mass\n        </Column>\n        <Column\n          key=\"birth_year\"\n          allowsSorting\n        >\n          Birth Year\n        </Column>\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n        loadingState={list\n          .loadingState}\n      >\n        {(item) => (\n          <Row\n            key={item\n              .name}\n          >\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Sorting#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column widths\" maxWidth={320}>\n  <TableHeader>\n    <Column defaultWidth=\"1fr\" align=\"start\">Name</Column>\n    <Column maxWidth={80}>Type</Column>\n    <Column width={80}>Size</Column>\n    <Column minWidth={100} align=\"end\">Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n      <Cell>April 12</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>November 27</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n      <Cell>January 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n      <Cell>February 11</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column widths#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table for column widths\"\n  maxWidth={320}\n>\n  <TableHeader>\n    <Column defaultWidth=\"1fr\" align=\"start\">Name</Column>\n    <Column maxWidth={80}>Type</Column>\n    <Column width={80}>Size</Column>\n    <Column minWidth={100} align=\"end\">\n      Date Modified\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n      <Cell>April 12</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>November 27</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n      <Cell>January 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n      <Cell>February 11</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column widths#"
                },
                {
                    "source": "<TableView\n  aria-label=\"Example table for column widths\"\n  maxWidth={320}\n>\n  <TableHeader>\n    <Column\n      defaultWidth=\"1fr\"\n      align=\"start\"\n    >\n      Name\n    </Column>\n    <Column\n      maxWidth={80}\n    >\n      Type\n    </Column>\n    <Column width={80}>\n      Size\n    </Column>\n    <Column\n      minWidth={100}\n      align=\"end\"\n    >\n      Date Modified\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        2021406_Proposal\n      </Cell>\n      <Cell>PDF</Cell>\n      <Cell>\n        86 KB\n      </Cell>\n      <Cell>\n        April 12\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Budget Template\n      </Cell>\n      <Cell>XLS</Cell>\n      <Cell>\n        120 KB\n      </Cell>\n      <Cell>\n        November 27\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Onboarding\n      </Cell>\n      <Cell>PPT</Cell>\n      <Cell>\n        472 KB\n      </Cell>\n      <Cell>\n        January 7\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Welcome\n      </Cell>\n      <Cell>TXT</Cell>\n      <Cell>\n        24 KB\n      </Cell>\n      <Cell>\n        February 11\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column widths#"
                },
                {
                    "source": "<TableView\n  aria-label=\"TableView with resizable columns\"\n  maxWidth={320}\n  height={200} >\n  <TableHeader>\n    <Column key=\"file\" allowsResizing maxWidth={500}>File Name</Column>\n    <Column key=\"size\" width={80}>Size</Column>\n    <Column key=\"date\" allowsResizing minWidth={100}>Date Modified</Column>  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n      <Cell>214 KB</Cell>\n      <Cell>November 27, 2022 at 4:56PM</Cell>\n    </Row>\n    <Row>\n      <Cell>62259692_p0_master1200</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>January 27, 2021 at 1:56AM</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Width values#"
                },
                {
                    "source": "<TableView\n  aria-label=\"TableView with resizable columns\"\n  maxWidth={320}\n  height={200}\n>\n  <TableHeader>\n    <Column key=\"file\" allowsResizing maxWidth={500}>\n      File Name\n    </Column>\n    <Column key=\"size\" width={80}>Size</Column>\n    <Column key=\"date\" allowsResizing minWidth={100}>\n      Date Modified\n    </Column>  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        2022-Roadmap-Proposal-Revision-012822-Copy(2)\n      </Cell>\n      <Cell>214 KB</Cell>\n      <Cell>November 27, 2022 at 4:56PM</Cell>\n    </Row>\n    <Row>\n      <Cell>62259692_p0_master1200</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>January 27, 2021 at 1:56AM</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Width values#"
                },
                {
                    "source": "<TableView\n  aria-label=\"TableView with resizable columns\"\n  maxWidth={320}\n  height={200}\n>\n  <TableHeader>\n    <Column\n      key=\"file\"\n      allowsResizing\n      maxWidth={500}\n    >\n      File Name\n    </Column>\n    <Column\n      key=\"size\"\n      width={80}\n    >\n      Size\n    </Column>\n    <Column\n      key=\"date\"\n      allowsResizing\n      minWidth={100}\n    >\n      Date Modified\n    </Column>  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        2022-Roadmap-Proposal-Revision-012822-Copy(2)\n      </Cell>\n      <Cell>\n        214 KB\n      </Cell>\n      <Cell>\n        November 27,\n        2022 at 4:56PM\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        62259692_p0_master1200\n      </Cell>\n      <Cell>\n        120 KB\n      </Cell>\n      <Cell>\n        January 27,\n        2021 at 1:56AM\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Width values#"
                },
                {
                    "source": "let items = [\n  {\n    id: '1',\n    file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)',\n    size: '214 KB',\n    date: 'November 27, 2022 at 4:56PM'\n  },\n  {\n    id: '2',\n    file: '62259692_p0_master1200',\n    size: '120 KB',\n    date: 'January 27, 2021 at 1:56AM'\n  }\n];\n\nlet columnsData = [\n  { name: 'File Name', id: 'file', width: '1fr' },\n  { name: 'Size', id: 'size', width: 80 },\n  { name: 'Date', id: 'date', width: 100 }\n];\n\nfunction ResizableTable() {\n  let [columns, setColumns] = React.useState(() => {\n    let localStorageWidths = localStorage.getItem('RSPWidths');\n    if (localStorageWidths) {\n      let widths = JSON.parse(localStorageWidths);\n      return columnsData.map((col) => ({ ...col, width: widths[col.id] }));\n    } else {\n      return columnsData;\n    }\n  });\n\n  let onResize = (widths) => {\n    setColumns((columns) =>\n      columns.map((col) => ({ ...col, width: widths.get(col.id) }))\n    );\n  };\n\n  let onResizeEnd = (widths) => {\n    localStorage.setItem(\n      'RSPWidths',\n      JSON.stringify(Object.fromEntries(widths))\n    );\n  };\n  return (\n    <TableView\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}      aria-label=\"TableView with controlled, resizable columns saved in local storage\"\n      maxWidth={320}\n      height={200}\n    >\n      <TableHeader columns={columns}>\n        {(column) => {\n          const { name, id, width } = column;\n          return <Column allowsResizing key={id} width={width}>{name}</Column>;\n        }}\n      </TableHeader>\n      <TableBody items={items}>\n        {(item) => <Row key={item.id}>{(key) => <Cell>{item[key]}</Cell>}</Row>}\n      </TableBody>\n    </TableView>\n  );\n}\n\n<ResizableTable />",
                    "name": "Resize events#"
                },
                {
                    "source": "let items = [\n  {\n    id: '1',\n    file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)',\n    size: '214 KB',\n    date: 'November 27, 2022 at 4:56PM'\n  },\n  {\n    id: '2',\n    file: '62259692_p0_master1200',\n    size: '120 KB',\n    date: 'January 27, 2021 at 1:56AM'\n  }\n];\n\nlet columnsData = [\n  { name: 'File Name', id: 'file', width: '1fr' },\n  { name: 'Size', id: 'size', width: 80 },\n  { name: 'Date', id: 'date', width: 100 }\n];\n\nfunction ResizableTable() {\n  let [columns, setColumns] = React.useState(() => {\n    let localStorageWidths = localStorage.getItem(\n      'RSPWidths'\n    );\n    if (localStorageWidths) {\n      let widths = JSON.parse(localStorageWidths);\n      return columnsData.map((col) => ({\n        ...col,\n        width: widths[col.id]\n      }));\n    } else {\n      return columnsData;\n    }\n  });\n\n  let onResize = (widths) => {\n    setColumns((columns) =>\n      columns.map((col) => ({\n        ...col,\n        width: widths.get(col.id)\n      }))\n    );\n  };\n\n  let onResizeEnd = (widths) => {\n    localStorage.setItem(\n      'RSPWidths',\n      JSON.stringify(Object.fromEntries(widths))\n    );\n  };\n  return (\n    <TableView\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}      aria-label=\"TableView with controlled, resizable columns saved in local storage\"\n      maxWidth={320}\n      height={200}\n    >\n      <TableHeader columns={columns}>\n        {(column) => {\n          const { name, id, width } = column;\n          return (\n            <Column allowsResizing key={id} width={width}>\n              {name}\n            </Column>\n          );\n        }}\n      </TableHeader>\n      <TableBody items={items}>\n        {(item) => (\n          <Row key={item.id}>\n            {(key) => <Cell>{item[key]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\n<ResizableTable />",
                    "name": "Resize events#"
                },
                {
                    "source": "let items = [\n  {\n    id: '1',\n    file:\n      '2022-Roadmap-Proposal-Revision-012822-Copy(2)',\n    size: '214 KB',\n    date:\n      'November 27, 2022 at 4:56PM'\n  },\n  {\n    id: '2',\n    file:\n      '62259692_p0_master1200',\n    size: '120 KB',\n    date:\n      'January 27, 2021 at 1:56AM'\n  }\n];\n\nlet columnsData = [\n  {\n    name: 'File Name',\n    id: 'file',\n    width: '1fr'\n  },\n  {\n    name: 'Size',\n    id: 'size',\n    width: 80\n  },\n  {\n    name: 'Date',\n    id: 'date',\n    width: 100\n  }\n];\n\nfunction ResizableTable() {\n  let [\n    columns,\n    setColumns\n  ] = React.useState(\n    () => {\n      let localStorageWidths =\n        localStorage\n          .getItem(\n            'RSPWidths'\n          );\n      if (\n        localStorageWidths\n      ) {\n        let widths = JSON\n          .parse(\n            localStorageWidths\n          );\n        return columnsData\n          .map(\n            (col) => ({\n              ...col,\n              width:\n                widths[\n                  col.id\n                ]\n            })\n          );\n      } else {\n        return columnsData;\n      }\n    }\n  );\n\n  let onResize = (\n    widths\n  ) => {\n    setColumns(\n      (columns) =>\n        columns.map(\n          (col) => ({\n            ...col,\n            width: widths\n              .get(\n                col.id\n              )\n          })\n        )\n    );\n  };\n\n  let onResizeEnd = (\n    widths\n  ) => {\n    localStorage.setItem(\n      'RSPWidths',\n      JSON.stringify(\n        Object\n          .fromEntries(\n            widths\n          )\n      )\n    );\n  };\n  return (\n    <TableView\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}      aria-label=\"TableView with controlled, resizable columns saved in local storage\"\n      maxWidth={320}\n      height={200}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => {\n          const {\n            name,\n            id,\n            width\n          } = column;\n          return (\n            <Column\n              allowsResizing\n              key={id}\n              width={width}\n            >\n              {name}\n            </Column>\n          );\n        }}\n      </TableHeader>\n      <TableBody\n        items={items}\n      >\n        {(item) => (\n          <Row\n            key={item.id}\n          >\n            {(key) => (\n              <Cell>\n                {item[\n                  key\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\n<ResizableTable />",
                    "name": "Resize events#"
                },
                {
                    "source": "import type {DragAndDropOptions, TextDropItem} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  date?: string;\n  childNodes?: Item[];\n}\n\ninterface DndTableViewProps extends DragAndDropOptions {\n  list: ListData<Item>;\n  columns: { name: string; id: string }[];\n}\n\nfunction DraggableTableView(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag into table example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableView(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(await (item as TextDropItem).getText('custom-app-type'))\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(await (item as TextDropItem).getText('custom-app-type'))\n        )\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drag into table example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTable() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021' },\n      { id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '1/18/2016' },\n      { id: '6', type: 'file', name: 'Adobe Fresco', date: '11/20/2010' },\n      { id: '7', type: 'file', name: 'Adobe Connect', date: '4/7/2021' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom', date: '6/7/2020' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableView list={sourceList} columns={columns} />\n      <DroppableTableView list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "import type {\n  DragAndDropOptions,\n  TextDropItem\n} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  date?: string;\n  childNodes?: Item[];\n}\n\ninterface DndTableViewProps extends DragAndDropOptions {\n  list: ListData<Item>;\n  columns: { name: string; id: string }[];\n}\n\nfunction DraggableTableView(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag into table example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableView(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type'\n            )\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drag into table example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTable() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '6/7/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '4/7/2021'\n      },\n      {\n        id: '3',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '11/20/2010'\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '1/18/2016'\n      }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {\n        id: '5',\n        type: 'file',\n        name: 'Adobe Dreamweaver',\n        date: '1/18/2016'\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe Fresco',\n        date: '11/20/2010'\n      },\n      {\n        id: '7',\n        type: 'file',\n        name: 'Adobe Connect',\n        date: '4/7/2021'\n      },\n      {\n        id: '8',\n        type: 'file',\n        name: 'Adobe Lightroom',\n        date: '6/7/2020'\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableView\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableView\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "import type {\n  DragAndDropOptions,\n  TextDropItem\n} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@adobe/react-spectrum';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string;\n  type?: string;\n  date?: string;\n  childNodes?: Item[];\n}\n\ninterface DndTableViewProps\n  extends\n    DragAndDropOptions {\n  list: ListData<Item>;\n  columns: {\n    name: string;\n    id: string;\n  }[];\n}\n\nfunction DraggableTableView(\n  props:\n    DndTableViewProps\n) {\n  let {\n    list,\n    columns,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag into table example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableView(\n  props:\n    DndTableViewProps\n) {\n  let {\n    list,\n    columns,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: [\n      'custom-app-type'\n    ],\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type'\n                      )\n                  )\n            )\n          );\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    ...otherProps\n  });\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drag into table example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTable() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '4/7/2021'\n        },\n        {\n          id: '3',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '11/20/2010'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '1/18/2016'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '5',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver',\n          date:\n            '1/18/2016'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe Fresco',\n          date:\n            '11/20/2010'\n        },\n        {\n          id: '7',\n          type: 'file',\n          name:\n            'Adobe Connect',\n          date:\n            '4/7/2021'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Lightroom',\n          date:\n            '6/7/2020'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableTableView\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableView\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "<DragIntoTable />",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "<DragIntoTable />",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "<DragIntoTable />",
                    "name": "Draggable TableView and droppable TableView#"
                },
                {
                    "source": "function DraggableTableViewFolder(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-folder-drop': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewFolder(props: DndTableViewProps) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText('custom-app-type-folder-drop')\n          )\n        )\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {\n        ...targetItem,\n        childNodes: [...targetItem.childNodes, ...processedItems]\n      });\n    },    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drop into folder example\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[columnKey]}\n                {columnKey === 'type' && item[columnKey] === 'folder' &&\n                  item.childNodes.length > 0 &&\n                  ` (${item.childNodes?.length} dropped item(s)`}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTableFolder() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '2/1/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '6/7/2020' },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '6/13/2020',\n        childNodes: []\n      },\n      { id: '4', type: 'file', name: 'Adobe InDesign', date: '2/4/2020' },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/3/2020',\n        childNodes: []\n      },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects', date: '3/12/2020' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {\n        id: '7',\n        type: 'folder',\n        name: 'Pictures',\n        date: '6/17/2020',\n        childNodes: []\n      },\n      { id: '8', type: 'file', name: 'Adobe Fresco', date: '1/27/2020' },\n      {\n        id: '9',\n        type: 'folder',\n        name: 'Apps',\n        date: '12/23/2020',\n        childNodes: []\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewFolder list={sourceList} columns={columns} />\n      <DroppableTableViewFolder list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function DraggableTableViewFolder(\n  props: DndTableViewProps\n) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-folder-drop': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewFolder(\n  props: DndTableViewProps\n) {\n  let { list, columns, ...otherProps } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) =>\n      !!list.getItem(target.key).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-folder-drop'\n            )\n          )\n        )\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {\n        ...targetItem,\n        childNodes: [\n          ...targetItem.childNodes,\n          ...processedItems\n        ]\n      });\n    },    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drop into folder example\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[columnKey]}\n                {columnKey === 'type' &&\n                  item[columnKey] === 'folder' &&\n                  item.childNodes.length > 0 &&\n                  ` (${item.childNodes?.length} dropped item(s)`}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTableFolder() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '2/1/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '6/7/2020'\n      },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '6/13/2020',\n        childNodes: []\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '2/4/2020'\n      },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/3/2020',\n        childNodes: []\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '3/12/2020'\n      }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {\n        id: '7',\n        type: 'folder',\n        name: 'Pictures',\n        date: '6/17/2020',\n        childNodes: []\n      },\n      {\n        id: '8',\n        type: 'file',\n        name: 'Adobe Fresco',\n        date: '1/27/2020'\n      },\n      {\n        id: '9',\n        type: 'folder',\n        name: 'Apps',\n        date: '12/23/2020',\n        childNodes: []\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewFolder\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableViewFolder\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function DraggableTableViewFolder(\n  props:\n    DndTableViewProps\n) {\n  let {\n    list,\n    columns,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-folder-drop':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewFolder(\n  props:\n    DndTableViewProps\n) {\n  let {\n    list,\n    columns,\n    ...otherProps\n  } = props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop:\n      (target) =>\n        !!list.getItem(\n          target.key\n        ).childNodes,    // Only accept items with the following drag type\n    acceptedDragTypes: [\n      'custom-app-type-folder-drop'\n    ],\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    onItemDrop: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-folder-drop'\n                      )\n                  )\n            )\n          );\n\n      let targetItem =\n        list.getItem(\n          target.key\n        );\n      list.update(\n        target.key,\n        {\n          ...targetItem,\n          childNodes: [\n            ...targetItem\n              .childNodes,\n            ...processedItems\n          ]\n        }\n      );\n    },    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drop into folder example\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n                {columnKey ===\n                    'type' &&\n                  item[\n                      columnKey\n                    ] ===\n                    'folder' &&\n                  item\n                      .childNodes\n                      .length >\n                    0 &&\n                  ` (${item.childNodes?.length} dropped item(s)`}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTableFolder() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '2/1/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          date:\n            '6/13/2020',\n          childNodes: []\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '2/4/2020'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          date:\n            '12/3/2020',\n          childNodes: []\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '3/12/2020'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '7',\n          type: 'folder',\n          name:\n            'Pictures',\n          date:\n            '6/17/2020',\n          childNodes: []\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Fresco',\n          date:\n            '1/27/2020'\n        },\n        {\n          id: '9',\n          type: 'folder',\n          name: 'Apps',\n          date:\n            '12/23/2020',\n          childNodes: []\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableTableViewFolder\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableViewFolder\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoTableFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoTableFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "<DragIntoTableFolder />",
                    "name": "Handling folder drops#"
                },
                {
                    "source": "function ReorderableTable() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020' },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '5/1/2020',\n        childNodes: []\n      },\n      { id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020' },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/7/2020',\n        childNodes: []\n      },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020' }\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    onReorder: async (e) => {\n      let { keys, target } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']  });\n\n  return (\n    <TableView\n      aria-label=\"Reorderable TableView\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Reorderable#"
                },
                {
                    "source": "function ReorderableTable() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '6/3/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '2/2/2020'\n      },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '5/1/2020',\n        childNodes: []\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '5/9/2020'\n      },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/7/2020',\n        childNodes: []\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '6/1/2020'\n      }\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    onReorder: async (e) => {\n      let { keys, target } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']  });\n\n  return (\n    <TableView\n      aria-label=\"Reorderable TableView\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Reorderable#"
                },
                {
                    "source": "function ReorderableTable() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let list = useListData(\n    {\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '6/3/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '2/2/2020'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          date:\n            '5/1/2020',\n          childNodes: []\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '5/9/2020'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          date:\n            '12/7/2020',\n          childNodes: []\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '6/1/2020'\n        }\n      ]\n    }\n  );\n\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems(keys) {\n      return [...keys]\n        .map((key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-reorder':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        });\n    },\n    acceptedDragTypes: [\n      'custom-app-type-reorder'\n    ],\n    onReorder: async (\n      e\n    ) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list.moveBefore(\n          target.key,\n          [...keys]\n        );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.moveAfter(\n          target.key,\n          [...keys]\n        );\n      }\n    },\n    getAllowedDropOperations:\n      () => ['move']  });\n\n  return (\n    <TableView\n      aria-label=\"Reorderable TableView\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableTable />",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableTable />",
                    "name": "Reorderable#"
                },
                {
                    "source": "<ReorderableTable />",
                    "name": "Reorderable#"
                },
                {
                    "source": "function BidirectionalDnDTableView(props: DndTableViewProps) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }  });\n\n  return (\n    <TableView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragBetweenTablesExample() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list1 = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021' },\n      { id: '3', type: 'folder', name: 'Documents', date: '4/9/2021' },\n      { id: '4', type: 'file', name: 'Adobe InDesign', date: '11/20/2010' },\n      { id: '5', type: 'folder', name: 'Utilities', date: '9/18/2016' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016' }\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      { id: '7', type: 'folder', name: 'Pictures', date: '6/7/2020' },\n      { id: '8', type: 'file', name: 'Adobe Fresco', date: '4/2/2020' },\n      { id: '9', type: 'folder', name: 'Apps', date: '2/3/2020' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator', date: '6/5/2020' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom', date: '3/7/2020' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver', date: '3/9/2020' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDTableView\n        list={list1}\n        columns={columns}\n        aria-label=\"First TableView in drag between table example\"\n      />\n      <BidirectionalDnDTableView\n        list={list2}\n        columns={columns}\n        aria-label=\"Second TableView in drag between table example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function BidirectionalDnDTableView(\n  props: DndTableViewProps\n) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) =>\n          JSON.parse(\n            await (item as TextDropItem).getText(\n              'custom-app-type-bidirectional'\n            )\n          )\n        )\n      );\n      list.append(...processedItems);\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }  });\n\n  return (\n    <TableView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragBetweenTablesExample() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list1 = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '6/7/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '4/7/2021'\n      },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '4/9/2021'\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '11/20/2010'\n      },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '9/18/2016'\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '1/18/2016'\n      }\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      {\n        id: '7',\n        type: 'folder',\n        name: 'Pictures',\n        date: '6/7/2020'\n      },\n      {\n        id: '8',\n        type: 'file',\n        name: 'Adobe Fresco',\n        date: '4/2/2020'\n      },\n      {\n        id: '9',\n        type: 'folder',\n        name: 'Apps',\n        date: '2/3/2020'\n      },\n      {\n        id: '10',\n        type: 'file',\n        name: 'Adobe Illustrator',\n        date: '6/5/2020'\n      },\n      {\n        id: '11',\n        type: 'file',\n        name: 'Adobe Lightroom',\n        date: '3/7/2020'\n      },\n      {\n        id: '12',\n        type: 'file',\n        name: 'Adobe Dreamweaver',\n        date: '3/9/2020'\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDTableView\n        list={list1}\n        columns={columns}\n        aria-label=\"First TableView in drag between table example\"\n      />\n      <BidirectionalDnDTableView\n        list={list2}\n        columns={columns}\n        aria-label=\"Second TableView in drag between table example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function BidirectionalDnDTableView(\n  props:\n    DndTableViewProps\n) {\n  let { list, columns } =\n    props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    acceptedDragTypes: [\n      'custom-app-type-bidirectional'\n    ],\n    // Only allow move operations\n    getAllowedDropOperations:\n      () => ['move'],\n    getItems(keys) {\n      return [...keys]\n        .map((key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-bidirectional':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        });\n    },\n    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-bidirectional'\n                      )\n                  )\n            )\n          );\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onReorder: async (\n      e\n    ) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list.moveBefore(\n          target.key,\n          [...keys]\n        );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.moveAfter(\n          target.key,\n          [...keys]\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (item) =>\n                JSON\n                  .parse(\n                    await (item as TextDropItem)\n                      .getText(\n                        'custom-app-type-bidirectional'\n                      )\n                  )\n            )\n          );\n      list.append(\n        ...processedItems\n      );\n    },\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (\n        dropOperation ===\n          'move' &&\n        !isInternal\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    }  });\n\n  return (\n    <TableView\n      aria-label={props[\n        'aria-label'\n      ]}\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragBetweenTablesExample() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let list1 =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '4/7/2021'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          date:\n            '4/9/2021'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '11/20/2010'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          date:\n            '9/18/2016'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '1/18/2016'\n        }\n      ]\n    });\n\n  let list2 =\n    useListData({\n      initialItems: [\n        {\n          id: '7',\n          type: 'folder',\n          name:\n            'Pictures',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Fresco',\n          date:\n            '4/2/2020'\n        },\n        {\n          id: '9',\n          type: 'folder',\n          name: 'Apps',\n          date:\n            '2/3/2020'\n        },\n        {\n          id: '10',\n          type: 'file',\n          name:\n            'Adobe Illustrator',\n          date:\n            '6/5/2020'\n        },\n        {\n          id: '11',\n          type: 'file',\n          name:\n            'Adobe Lightroom',\n          date:\n            '3/7/2020'\n        },\n        {\n          id: '12',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver',\n          date:\n            '3/9/2020'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <BidirectionalDnDTableView\n        list={list1}\n        columns={columns}\n        aria-label=\"First TableView in drag between table example\"\n      />\n      <BidirectionalDnDTableView\n        list={list2}\n        columns={columns}\n        aria-label=\"Second TableView in drag between table example\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenTablesExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenTablesExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "<DragBetweenTablesExample />",
                    "name": "Bi-directional dragging#"
                },
                {
                    "source": "function DraggableTableViewDefaultCopy(props: DndTableViewProps) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-copy-default': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewDefaultCopy(props: DndTableViewProps) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    getDropOperation: () => 'copy',    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      list.append(...processedItems);\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in default copy operation example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTablesDefaultCopy() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021' },\n      { id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010' },\n      { id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016' }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      { id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '6/7/2020' },\n      { id: '6', type: 'file', name: 'Adobe Fresco', date: '2/17/2020' },\n      { id: '7', type: 'file', name: 'Adobe Connect', date: '1/23/2020' },\n      { id: '8', type: 'file', name: 'Adobe Lightroom', date: '12/17/2020' }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewDefaultCopy list={sourceList} columns={columns} />\n      <DroppableTableViewDefaultCopy list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "function DraggableTableViewDefaultCopy(\n  props: DndTableViewProps\n) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-copy-default': JSON.stringify(\n            item\n          ),\n          'text/plain': item.name\n        };\n      }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewDefaultCopy(\n  props: DndTableViewProps\n) {\n  let { list, columns } = props;\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    getDropOperation: () => 'copy',    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {\n            ...JSON.parse(\n              await (item as TextDropItem).getText(\n                'custom-app-type-copy-default'\n              )\n            ),\n            id: Math.random().toString(36).slice(2)\n          }\n        ))\n      );      list.append(...processedItems);\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in default copy operation example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTablesDefaultCopy() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '6/7/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '4/7/2021'\n      },\n      {\n        id: '3',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '11/20/2010'\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '1/18/2016'\n      }\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {\n        id: '5',\n        type: 'file',\n        name: 'Adobe Dreamweaver',\n        date: '6/7/2020'\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe Fresco',\n        date: '2/17/2020'\n      },\n      {\n        id: '7',\n        type: 'file',\n        name: 'Adobe Connect',\n        date: '1/23/2020'\n      },\n      {\n        id: '8',\n        type: 'file',\n        name: 'Adobe Lightroom',\n        date: '12/17/2020'\n      }\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewDefaultCopy\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableViewDefaultCopy\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "function DraggableTableViewDefaultCopy(\n  props:\n    DndTableViewProps\n) {\n  let { list, columns } =\n    props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          // Setup the drag types and associated info for each dragged item.\n          return {\n            'custom-app-type-copy-default':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (\n        dropOperation ===\n          'move'\n      ) {\n        list.remove(\n          ...keys\n        );\n      }\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewDefaultCopy(\n  props:\n    DndTableViewProps\n) {\n  let { list, columns } =\n    props;\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    acceptedDragTypes: [\n      'custom-app-type-copy-default'\n    ],\n    getDropOperation:\n      () => 'copy',    onInsert: async (\n      e\n    ) => {\n      let {\n        items,\n        target\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) => (\n                {\n                  ...JSON\n                    .parse(\n                      await (item as TextDropItem)\n                        .getText(\n                          'custom-app-type-copy-default'\n                        )\n                    ),\n                  id:\n                    Math\n                      .random()\n                      .toString(\n                        36\n                      ).slice(\n                        2\n                      )\n                }\n              )\n            )\n          );      if (\n        target\n          .dropPosition ===\n          'before'\n      ) {\n        list\n          .insertBefore(\n            target.key,\n            ...processedItems\n          );\n      } else if (\n        target\n          .dropPosition ===\n          'after'\n      ) {\n        list.insertAfter(\n          target.key,\n          ...processedItems\n        );\n      }\n    },\n    onRootDrop: async (\n      e\n    ) => {\n      let {\n        items\n      } = e;\n\n      // Create random id to allow for multiple copies of the same item\n      let processedItems =\n        await Promise\n          .all(\n            items.map(\n              async (\n                item\n              ) => (\n                {\n                  ...JSON\n                    .parse(\n                      await (item as TextDropItem)\n                        .getText(\n                          'custom-app-type-copy-default'\n                        )\n                    ),\n                  id:\n                    Math\n                      .random()\n                      .toString(\n                        36\n                      ).slice(\n                        2\n                      )\n                }\n              )\n            )\n          );      list.append(\n        ...processedItems\n      );\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in default copy operation example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTablesDefaultCopy() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let sourceList =\n    useListData({\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '4/7/2021'\n        },\n        {\n          id: '3',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '11/20/2010'\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '1/18/2016'\n        }\n      ]\n    });\n\n  let targetList =\n    useListData({\n      initialItems: [\n        {\n          id: '5',\n          type: 'file',\n          name:\n            'Adobe Dreamweaver',\n          date:\n            '6/7/2020'\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe Fresco',\n          date:\n            '2/17/2020'\n        },\n        {\n          id: '7',\n          type: 'file',\n          name:\n            'Adobe Connect',\n          date:\n            '1/23/2020'\n        },\n        {\n          id: '8',\n          type: 'file',\n          name:\n            'Adobe Lightroom',\n          date:\n            '12/17/2020'\n        }\n      ]\n    });\n\n  return (\n    <Flex\n      wrap\n      gap=\"size-300\"\n    >\n      <DraggableTableViewDefaultCopy\n        list={sourceList}\n        columns={columns}\n      />\n      <DroppableTableViewDefaultCopy\n        list={targetList}\n        columns={columns}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoTablesDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoTablesDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "<DragIntoTablesDefaultCopy />",
                    "name": "Overriding default drop operation#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list = useListData({\n    initialItems: [\n      { id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020' },\n      { id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020' },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '5/1/2020',\n        childNodes: []\n      },\n      { id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020' },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/7/2020',\n        childNodes: []\n      },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020' }\n    ]\n  });\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    renderPreview: (keys, draggedKey) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>Custom Preview</strong>\n        <div>Keys: [{[...keys].join(', ')}]</div>\n        <div>Dragged: {draggedKey}</div>\n      </View>\n    )  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView example with custom drag preview\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let columns = [\n    { name: 'Name', id: 'name' },\n    { name: 'Type', id: 'type' },\n    { name: 'Date Modified', id: 'date' }\n  ];\n\n  let list = useListData({\n    initialItems: [\n      {\n        id: '1',\n        type: 'file',\n        name: 'Adobe Photoshop',\n        date: '6/3/2020'\n      },\n      {\n        id: '2',\n        type: 'file',\n        name: 'Adobe XD',\n        date: '2/2/2020'\n      },\n      {\n        id: '3',\n        type: 'folder',\n        name: 'Documents',\n        date: '5/1/2020',\n        childNodes: []\n      },\n      {\n        id: '4',\n        type: 'file',\n        name: 'Adobe InDesign',\n        date: '5/9/2020'\n      },\n      {\n        id: '5',\n        type: 'folder',\n        name: 'Utilities',\n        date: '12/7/2020',\n        childNodes: []\n      },\n      {\n        id: '6',\n        type: 'file',\n        name: 'Adobe AfterEffects',\n        date: '6/1/2020'\n      }\n    ]\n  });\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      }),\n    renderPreview: (keys, draggedKey) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>Custom Preview</strong>\n        <div>Keys: [{[...keys].join(', ')}]</div>\n        <div>Dragged: {draggedKey}</div>\n      </View>\n    )  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView example with custom drag preview\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {(item) => (\n          <Row>\n            {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "import {View} from '@adobe/react-spectrum';\n\nfunction CustomDragPreviewExample() {\n  let columns = [\n    {\n      name: 'Name',\n      id: 'name'\n    },\n    {\n      name: 'Type',\n      id: 'type'\n    },\n    {\n      name:\n        'Date Modified',\n      id: 'date'\n    }\n  ];\n\n  let list = useListData(\n    {\n      initialItems: [\n        {\n          id: '1',\n          type: 'file',\n          name:\n            'Adobe Photoshop',\n          date:\n            '6/3/2020'\n        },\n        {\n          id: '2',\n          type: 'file',\n          name:\n            'Adobe XD',\n          date:\n            '2/2/2020'\n        },\n        {\n          id: '3',\n          type: 'folder',\n          name:\n            'Documents',\n          date:\n            '5/1/2020',\n          childNodes: []\n        },\n        {\n          id: '4',\n          type: 'file',\n          name:\n            'Adobe InDesign',\n          date:\n            '5/9/2020'\n        },\n        {\n          id: '5',\n          type: 'folder',\n          name:\n            'Utilities',\n          date:\n            '12/7/2020',\n          childNodes: []\n        },\n        {\n          id: '6',\n          type: 'file',\n          name:\n            'Adobe AfterEffects',\n          date:\n            '6/1/2020'\n        }\n      ]\n    }\n  );\n  let {\n    dragAndDropHooks\n  } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map(\n        (key) => {\n          let item = list\n            .getItem(\n              key\n            );\n          return {\n            'custom-app-type':\n              JSON\n                .stringify(\n                  item\n                ),\n            'text/plain':\n              item.name\n          };\n        }\n      ),\n    renderPreview: (\n      keys,\n      draggedKey\n    ) => (\n      <View\n        backgroundColor=\"gray-50\"\n        padding=\"size-100\"\n        borderRadius=\"medium\"\n        borderWidth=\"thin\"\n        borderColor=\"blue-500\"\n      >\n        <strong>\n          Custom Preview\n        </strong>\n        <div>\n          Keys: [{[\n            ...keys\n          ].join(', ')}]\n        </div>\n        <div>\n          Dragged:{' '}\n          {draggedKey}\n        </div>\n      </View>\n    )  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView example with custom drag preview\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            key={column\n              .id}\n            align={column\n                .id ===\n                'date'\n              ? 'end'\n              : 'start'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list\n          .items}\n      >\n        {(item) => (\n          <Row>\n            {(columnKey) => (\n              <Cell>\n                {item[\n                  columnKey\n                ]}\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<CustomDragPreviewExample />",
                    "name": "Custom drag previews#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column alignment\">\n  <TableHeader>\n    <Column align=\"start\">Name</Column>\n    <Column align=\"center\">Type</Column>\n    <Column align=\"end\">Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column alignment#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column alignment\">\n  <TableHeader>\n    <Column align=\"start\">Name</Column>\n    <Column align=\"center\">Type</Column>\n    <Column align=\"end\">Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column alignment#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column alignment\">\n  <TableHeader>\n    <Column align=\"start\">\n      Name\n    </Column>\n    <Column align=\"center\">\n      Type\n    </Column>\n    <Column align=\"end\">\n      Size\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        2021406_Proposal\n      </Cell>\n      <Cell>PDF</Cell>\n      <Cell>\n        86 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Budget Template\n      </Cell>\n      <Cell>XLS</Cell>\n      <Cell>\n        120 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Onboarding\n      </Cell>\n      <Cell>PPT</Cell>\n      <Cell>\n        472 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Welcome\n      </Cell>\n      <Cell>TXT</Cell>\n      <Cell>\n        24 KB\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column alignment#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column dividers\">\n  <TableHeader>\n    <Column align=\"start\" showDivider>Name</Column>\n    <Column showDivider>Type</Column>\n    <Column align=\"end\" showDivider>Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column dividers#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column dividers\">\n  <TableHeader>\n    <Column align=\"start\" showDivider>Name</Column>\n    <Column showDivider>Type</Column>\n    <Column align=\"end\" showDivider>Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column dividers#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for column dividers\">\n  <TableHeader>\n    <Column\n      align=\"start\"\n      showDivider\n    >\n      Name\n    </Column>\n    <Column\n      showDivider\n    >\n      Type\n    </Column>\n    <Column\n      align=\"end\"\n      showDivider\n    >\n      Size\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>\n        2021406_Proposal\n      </Cell>\n      <Cell>PDF</Cell>\n      <Cell>\n        86 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Budget Template\n      </Cell>\n      <Cell>XLS</Cell>\n      <Cell>\n        120 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Onboarding\n      </Cell>\n      <Cell>PPT</Cell>\n      <Cell>\n        472 KB\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Welcome\n      </Cell>\n      <Cell>TXT</Cell>\n      <Cell>\n        24 KB\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Column dividers#"
                },
                {
                    "source": "function TableExample(props) {\n  let columns = [\n    { name: 'First Name', key: 'firstName' },\n    { name: 'Last Name', key: 'lastName' },\n    { name: 'Add Info', key: 'addInfo' },\n    { name: 'Age', key: 'age' }\n  ];\n\n  let rows = [\n    { id: '1', firstName: 'John', lastName: 'Doe', age: '45' },\n    { id: '2', firstName: 'Jane', lastName: 'Doe', age: '37' },\n    { id: '3', firstName: 'Joe', lastName: 'Schmoe', age: '67' },\n    { id: '4', firstName: 'Joe', lastName: 'Bloggs', age: '12' },\n    {\n      id: '5',\n      firstName: 'Taylor',\n      lastName: 'Rodriguez Lloyd-Atkinson',\n      age: '83'\n    }\n  ];\n\n  return (\n    <TableView\n      aria-label=\"Example table with hidden headers\"\n      maxWidth=\"size-6000\"\n      {...props}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            hideHeader={column.key === 'addInfo'}\n            align={column.key === 'age' ? 'end' : 'start'}\n            showDivider={column.key === 'addInfo'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <Row key={item.id}>\n            {(key) =>\n              key === 'addInfo'\n                ? (\n                  <Cell>\n                    <ActionButton aria-label=\"Add Info\" isQuiet>\n                      <Add />\n                    </ActionButton>\n                  </Cell>\n                )\n                : <Cell>{item[key]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Hide header#"
                },
                {
                    "source": "function TableExample(props) {\n  let columns = [\n    { name: 'First Name', key: 'firstName' },\n    { name: 'Last Name', key: 'lastName' },\n    { name: 'Add Info', key: 'addInfo' },\n    { name: 'Age', key: 'age' }\n  ];\n\n  let rows = [\n    {\n      id: '1',\n      firstName: 'John',\n      lastName: 'Doe',\n      age: '45'\n    },\n    {\n      id: '2',\n      firstName: 'Jane',\n      lastName: 'Doe',\n      age: '37'\n    },\n    {\n      id: '3',\n      firstName: 'Joe',\n      lastName: 'Schmoe',\n      age: '67'\n    },\n    {\n      id: '4',\n      firstName: 'Joe',\n      lastName: 'Bloggs',\n      age: '12'\n    },\n    {\n      id: '5',\n      firstName: 'Taylor',\n      lastName: 'Rodriguez Lloyd-Atkinson',\n      age: '83'\n    }\n  ];\n\n  return (\n    <TableView\n      aria-label=\"Example table with hidden headers\"\n      maxWidth=\"size-6000\"\n      {...props}\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column\n            hideHeader={column.key === 'addInfo'}\n            align={column.key === 'age' ? 'end' : 'start'}\n            showDivider={column.key === 'addInfo'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <Row key={item.id}>\n            {(key) =>\n              key === 'addInfo'\n                ? (\n                  <Cell>\n                    <ActionButton\n                      aria-label=\"Add Info\"\n                      isQuiet\n                    >\n                      <Add />\n                    </ActionButton>\n                  </Cell>\n                )\n                : <Cell>{item[key]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Hide header#"
                },
                {
                    "source": "function TableExample(\n  props\n) {\n  let columns = [\n    {\n      name: 'First Name',\n      key: 'firstName'\n    },\n    {\n      name: 'Last Name',\n      key: 'lastName'\n    },\n    {\n      name: 'Add Info',\n      key: 'addInfo'\n    },\n    {\n      name: 'Age',\n      key: 'age'\n    }\n  ];\n\n  let rows = [\n    {\n      id: '1',\n      firstName: 'John',\n      lastName: 'Doe',\n      age: '45'\n    },\n    {\n      id: '2',\n      firstName: 'Jane',\n      lastName: 'Doe',\n      age: '37'\n    },\n    {\n      id: '3',\n      firstName: 'Joe',\n      lastName: 'Schmoe',\n      age: '67'\n    },\n    {\n      id: '4',\n      firstName: 'Joe',\n      lastName: 'Bloggs',\n      age: '12'\n    },\n    {\n      id: '5',\n      firstName:\n        'Taylor',\n      lastName:\n        'Rodriguez Lloyd-Atkinson',\n      age: '83'\n    }\n  ];\n\n  return (\n    <TableView\n      aria-label=\"Example table with hidden headers\"\n      maxWidth=\"size-6000\"\n      {...props}\n    >\n      <TableHeader\n        columns={columns}\n      >\n        {(column) => (\n          <Column\n            hideHeader={column\n              .key ===\n              'addInfo'}\n            align={column\n                .key ===\n                'age'\n              ? 'end'\n              : 'start'}\n            showDivider={column\n              .key ===\n              'addInfo'}\n          >\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={rows}\n      >\n        {(item) => (\n          <Row\n            key={item.id}\n          >\n            {(key) =>\n              key ===\n                  'addInfo'\n                ? (\n                  <Cell>\n                    <ActionButton\n                      aria-label=\"Add Info\"\n                      isQuiet\n                    >\n                      <Add />\n                    </ActionButton>\n                  </Cell>\n                )\n                : (\n                  <Cell>\n                    {item[\n                      key\n                    ]}\n                  </Cell>\n                )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n",
                    "name": "Hide header#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "// Using same setup as hide header example\n<Flex direction=\"column\" gap=\"size-300\">\n  <TableExample density=\"compact\" />\n  <TableExample density=\"spacious\" />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "// Using same setup as hide header example\n<Flex direction=\"column\" gap=\"size-300\">\n  <TableExample density=\"compact\" />\n  <TableExample density=\"spacious\" />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "// Using same setup as hide header example\n<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <TableExample density=\"compact\" />\n  <TableExample density=\"spacious\" />\n</Flex>",
                    "name": "Density#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample overflowMode=\"wrap\" />",
                    "name": "Overflow mode#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample overflowMode=\"wrap\" />",
                    "name": "Overflow mode#"
                },
                {
                    "source": "// Using same setup as hide header example\n<TableExample overflowMode=\"wrap\" />",
                    "name": "Overflow mode#"
                },
                {
                    "source": "import {Content, Heading, IllustratedMessage} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<TableView\n  aria-label=\"Example table for empty state\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column>Size</Column>\n  </TableHeader>\n  <TableBody>\n    {[]}\n  </TableBody>\n</TableView>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  IllustratedMessage\n} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<TableView\n  aria-label=\"Example table for empty state\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column>Size</Column>\n  </TableHeader>\n  <TableBody>\n    {[]}\n  </TableBody>\n</TableView>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  IllustratedMessage\n} from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>\n        No results\n      </Heading>\n      <Content>\n        No results found\n      </Content>\n    </IllustratedMessage>\n  );\n}\n\n<TableView\n  aria-label=\"Example table for empty state\"\n  height=\"size-3000\"\n  renderEmptyState={renderEmptyState}\n>\n  <TableHeader>\n    <Column>\n      Name\n    </Column>\n    <Column>\n      Type\n    </Column>\n    <Column>\n      Size\n    </Column>\n  </TableHeader>\n  <TableBody>\n    {[]}\n  </TableBody>\n</TableView>",
                    "name": "Empty state#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader>\n    <Column title=\"Name\">\n      <Column isRowHeader>First Name</Column>\n      <Column isRowHeader>Last Name</Column>\n    </Column>\n    <Column title=\"Information\">\n      <Column>Age</Column>\n      <Column>Birthday</Column>\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Sam</Cell>\n      <Cell>Smith</Cell>\n      <Cell>36</Cell>\n      <Cell>May 3</Cell>\n    </Row>\n    <Row>\n      <Cell>Julia</Cell>\n      <Cell>Jones</Cell>\n      <Cell>24</Cell>\n      <Cell>February 10</Cell>\n    </Row>\n    <Row>\n      <Cell>Peter</Cell>\n      <Cell>Parker</Cell>\n      <Cell>28</Cell>\n      <Cell>September 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Bruce</Cell>\n      <Cell>Wayne</Cell>\n      <Cell>32</Cell>\n      <Cell>December 18</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader>\n    <Column title=\"Name\">\n      <Column isRowHeader>First Name</Column>\n      <Column isRowHeader>Last Name</Column>\n    </Column>\n    <Column title=\"Information\">\n      <Column>Age</Column>\n      <Column>Birthday</Column>\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Sam</Cell>\n      <Cell>Smith</Cell>\n      <Cell>36</Cell>\n      <Cell>May 3</Cell>\n    </Row>\n    <Row>\n      <Cell>Julia</Cell>\n      <Cell>Jones</Cell>\n      <Cell>24</Cell>\n      <Cell>February 10</Cell>\n    </Row>\n    <Row>\n      <Cell>Peter</Cell>\n      <Cell>Parker</Cell>\n      <Cell>28</Cell>\n      <Cell>September 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Bruce</Cell>\n      <Cell>Wayne</Cell>\n      <Cell>32</Cell>\n      <Cell>December 18</Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                },
                {
                    "source": "<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader>\n    <Column title=\"Name\">\n      <Column\n        isRowHeader\n      >\n        First Name\n      </Column>\n      <Column\n        isRowHeader\n      >\n        Last Name\n      </Column>\n    </Column>\n    <Column title=\"Information\">\n      <Column>\n        Age\n      </Column>\n      <Column>\n        Birthday\n      </Column>\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Sam</Cell>\n      <Cell>\n        Smith\n      </Cell>\n      <Cell>36</Cell>\n      <Cell>\n        May 3\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Julia\n      </Cell>\n      <Cell>\n        Jones\n      </Cell>\n      <Cell>24</Cell>\n      <Cell>\n        February 10\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Peter\n      </Cell>\n      <Cell>\n        Parker\n      </Cell>\n      <Cell>28</Cell>\n      <Cell>\n        September 7\n      </Cell>\n    </Row>\n    <Row>\n      <Cell>\n        Bruce\n      </Cell>\n      <Cell>\n        Wayne\n      </Cell>\n      <Cell>32</Cell>\n      <Cell>\n        December 18\n      </Cell>\n    </Row>\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                },
                {
                    "source": "interface ColumnDefinition {\n  name: string,\n  key: string,\n  children?: ColumnDefinition[],\n  isRowHeader?: boolean\n}\n\nlet columns: ColumnDefinition[] = [\n  {name: 'Name', key: 'name', children: [\n    {name: 'First Name', key: 'first', isRowHeader: true},\n    {name: 'Last Name', key: 'last', isRowHeader: true}\n  ]},\n  {name: 'Information', key: 'info', children: [\n    {name: 'Age', key: 'age'},\n    {name: 'Birthday', key: 'birthday'}\n  ]}\n];\n\nlet rows = [\n  {id: 1, first: 'Sam', last: 'Smith', age: 36, birthday: 'May 3'},\n  {id: 2, first: 'Julia', last: 'Jones', age: 24, birthday: 'February 10'},\n  {id: 3, first: 'Peter', last: 'Parker', age: 28, birthday: 'September 7'},\n  {id: 4, first: 'Bruce', last: 'Wayne', age: 32, birthday: 'December 18'}\n];\n\n<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader columns={columns}>\n    {column => (\n      <Column isRowHeader={column.isRowHeader} childColumns={column.children}>\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {item => (\n      <Row>\n        {columnKey => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                },
                {
                    "source": "interface ColumnDefinition {\n  name: string;\n  key: string;\n  children?: ColumnDefinition[];\n  isRowHeader?: boolean;\n}\n\nlet columns: ColumnDefinition[] = [\n  {\n    name: 'Name',\n    key: 'name',\n    children: [\n      {\n        name: 'First Name',\n        key: 'first',\n        isRowHeader: true\n      },\n      { name: 'Last Name', key: 'last', isRowHeader: true }\n    ]\n  },\n  {\n    name: 'Information',\n    key: 'info',\n    children: [\n      { name: 'Age', key: 'age' },\n      { name: 'Birthday', key: 'birthday' }\n    ]\n  }\n];\n\nlet rows = [\n  {\n    id: 1,\n    first: 'Sam',\n    last: 'Smith',\n    age: 36,\n    birthday: 'May 3'\n  },\n  {\n    id: 2,\n    first: 'Julia',\n    last: 'Jones',\n    age: 24,\n    birthday: 'February 10'\n  },\n  {\n    id: 3,\n    first: 'Peter',\n    last: 'Parker',\n    age: 28,\n    birthday: 'September 7'\n  },\n  {\n    id: 4,\n    first: 'Bruce',\n    last: 'Wayne',\n    age: 32,\n    birthday: 'December 18'\n  }\n];\n\n<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader columns={columns}>\n    {(column) => (\n      <Column\n        isRowHeader={column.isRowHeader}\n        childColumns={column.children}\n      >\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {(item) => (\n      <Row>\n        {(columnKey) => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                },
                {
                    "source": "interface ColumnDefinition {\n  name: string;\n  key: string;\n  children?:\n    ColumnDefinition[];\n  isRowHeader?: boolean;\n}\n\nlet columns:\n  ColumnDefinition[] = [\n    {\n      name: 'Name',\n      key: 'name',\n      children: [\n        {\n          name:\n            'First Name',\n          key: 'first',\n          isRowHeader:\n            true\n        },\n        {\n          name:\n            'Last Name',\n          key: 'last',\n          isRowHeader:\n            true\n        }\n      ]\n    },\n    {\n      name:\n        'Information',\n      key: 'info',\n      children: [\n        {\n          name: 'Age',\n          key: 'age'\n        },\n        {\n          name:\n            'Birthday',\n          key: 'birthday'\n        }\n      ]\n    }\n  ];\n\nlet rows = [\n  {\n    id: 1,\n    first: 'Sam',\n    last: 'Smith',\n    age: 36,\n    birthday: 'May 3'\n  },\n  {\n    id: 2,\n    first: 'Julia',\n    last: 'Jones',\n    age: 24,\n    birthday:\n      'February 10'\n  },\n  {\n    id: 3,\n    first: 'Peter',\n    last: 'Parker',\n    age: 28,\n    birthday:\n      'September 7'\n  },\n  {\n    id: 4,\n    first: 'Bruce',\n    last: 'Wayne',\n    age: 32,\n    birthday:\n      'December 18'\n  }\n];\n\n<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader\n    columns={columns}\n  >\n    {(column) => (\n      <Column\n        isRowHeader={column\n          .isRowHeader}\n        childColumns={column\n          .children}\n      >\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody\n    items={rows}\n  >\n    {(item) => (\n      <Row>\n        {(columnKey) => (\n          <Cell>\n            {item[\n              columnKey\n            ]}\n          </Cell>\n        )}\n      </Row>\n    )}\n  </TableBody>\n</TableView>",
                    "name": "Nested columns#"
                }
            ]
        },
        {
            "name": "TagGroup",
            "url": "https://react-spectrum.adobe.com/react-spectrum/TagGroup.html",
            "examples": [
                {
                    "source": "<TagGroup aria-label=\"Static TagGroup items example\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<TagGroup aria-label=\"Static TagGroup items example\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<TagGroup aria-label=\"Static TagGroup items example\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Example#"
                },
                {
                    "source": "const items = [\n  {id: 1, name: 'News'},\n  {id: 2, name: 'Travel'},\n  {id: 3, name: 'Gaming'},\n  {id: 4, name: 'Shopping'}\n];\n\n<TagGroup items={items} aria-label=\"Dynamic TagGroup items example\">\n  {item => <Item>{item.name}</Item>}\n</TagGroup>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  { id: 1, name: 'News' },\n  { id: 2, name: 'Travel' },\n  { id: 3, name: 'Gaming' },\n  { id: 4, name: 'Shopping' }\n];\n\n<TagGroup\n  items={items}\n  aria-label=\"Dynamic TagGroup items example\"\n>\n  {(item) => <Item>{item.name}</Item>}\n</TagGroup>",
                    "name": "Content#"
                },
                {
                    "source": "const items = [\n  {\n    id: 1,\n    name: 'News'\n  },\n  {\n    id: 2,\n    name: 'Travel'\n  },\n  {\n    id: 3,\n    name: 'Gaming'\n  },\n  {\n    id: 4,\n    name: 'Shopping'\n  }\n];\n\n<TagGroup\n  items={items}\n  aria-label=\"Dynamic TagGroup items example\"\n>\n  {(item) => (\n    <Item>\n      {item.name}\n    </Item>\n  )}\n</TagGroup>",
                    "name": "Content#"
                },
                {
                    "source": "<TagGroup label=\"Categories\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Labeling#"
                },
                {
                    "source": "<TagGroup label=\"Categories\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Labeling#"
                },
                {
                    "source": "<TagGroup label=\"Categories\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    {id: 1, name: 'News'},\n    {id: 2, name: 'Travel'},\n    {id: 3, name: 'Gaming'},\n    {id: 4, name: 'Shopping'}\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems(prevItems => prevItems.filter((item) => !keys.has(item.id)));\n  };\n\n  return (\n    <TagGroup\n      items={items}\n      onRemove={onRemove}      aria-label=\"Removable TagGroup example\">\n      {item => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}",
                    "name": "onRemove#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    { id: 1, name: 'News' },\n    { id: 2, name: 'Travel' },\n    { id: 3, name: 'Gaming' },\n    { id: 4, name: 'Shopping' }\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems((prevItems) =>\n      prevItems.filter((item) => !keys.has(item.id))\n    );\n  };\n\n  return (\n    <TagGroup\n      items={items}\n      onRemove={onRemove}      aria-label=\"Removable TagGroup example\"\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}\n",
                    "name": "onRemove#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    {\n      id: 1,\n      name: 'News'\n    },\n    {\n      id: 2,\n      name: 'Travel'\n    },\n    {\n      id: 3,\n      name: 'Gaming'\n    },\n    {\n      id: 4,\n      name: 'Shopping'\n    }\n  ];\n\n  let [items, setItems] =\n    React.useState(\n      defaultItems\n    );\n\n  let onRemove = (\n    keys\n  ) => {\n    setItems(\n      (prevItems) =>\n        prevItems.filter(\n          (item) =>\n            !keys.has(\n              item.id\n            )\n        )\n    );\n  };\n\n  return (\n    <TagGroup\n      items={items}\n      onRemove={onRemove}      aria-label=\"Removable TagGroup example\"\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </TagGroup>\n  );\n}\n",
                    "name": "onRemove#"
                },
                {
                    "source": "<TagGroup\n  actionLabel=\"Clear\"\n  onAction={() => alert('Clear action pressed.')}  aria-label=\"TagGroup with action\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "onAction#"
                },
                {
                    "source": "<TagGroup\n  actionLabel=\"Clear\"\n  onAction={() => alert('Clear action pressed.')}  aria-label=\"TagGroup with action\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "onAction#"
                },
                {
                    "source": "<TagGroup\n  actionLabel=\"Clear\"\n  onAction={() =>\n    alert(\n      'Clear action pressed.'\n    )}  aria-label=\"TagGroup with action\"\n>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "onAction#"
                },
                {
                    "source": "<TagGroup label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</TagGroup>",
                    "name": "Links#"
                },
                {
                    "source": "<TagGroup label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">\n    Adobe\n  </Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">\n    Apple\n  </Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">\n    Google\n  </Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">\n    Microsoft\n  </Item>\n</TagGroup>",
                    "name": "Links#"
                },
                {
                    "source": "<TagGroup label=\"Links\">\n  <Item\n    href=\"https://adobe.com/\"\n    target=\"_blank\"\n  >\n    Adobe\n  </Item>\n  <Item\n    href=\"https://apple.com/\"\n    target=\"_blank\"\n  >\n    Apple\n  </Item>\n  <Item\n    href=\"https://google.com/\"\n    target=\"_blank\"\n  >\n    Google\n  </Item>\n  <Item\n    href=\"https://microsoft.com/\"\n    target=\"_blank\"\n  >\n    Microsoft\n  </Item>\n</TagGroup>",
                    "name": "Links#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with icons example\">\n  <Item textValue=\"News\">\n    <News />\n    <Text>News</Text>\n  </Item>\n  <Item textValue=\"Travel\">\n    <Airplane />\n    <Text>Travel</Text>\n  </Item>\n  <Item textValue=\"Gaming\">\n    <Game />\n    <Text>Gaming</Text>\n  </Item>\n  <Item textValue=\"Shopping\">\n    <ShoppingCart />\n    <Text>Shopping</Text>\n  </Item>\n</TagGroup>",
                    "name": "With icons#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with icons example\">\n  <Item textValue=\"News\">\n    <News />\n    <Text>News</Text>\n  </Item>\n  <Item textValue=\"Travel\">\n    <Airplane />\n    <Text>Travel</Text>\n  </Item>\n  <Item textValue=\"Gaming\">\n    <Game />\n    <Text>Gaming</Text>\n  </Item>\n  <Item textValue=\"Shopping\">\n    <ShoppingCart />\n    <Text>Shopping</Text>\n  </Item>\n</TagGroup>",
                    "name": "With icons#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with icons example\">\n  <Item textValue=\"News\">\n    <News />\n    <Text>News</Text>\n  </Item>\n  <Item textValue=\"Travel\">\n    <Airplane />\n    <Text>Travel</Text>\n  </Item>\n  <Item textValue=\"Gaming\">\n    <Game />\n    <Text>Gaming</Text>\n  </Item>\n  <Item textValue=\"Shopping\">\n    <ShoppingCart />\n    <Text>\n      Shopping\n    </Text>\n  </Item>\n</TagGroup>",
                    "name": "With icons#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with avatars example\">\n  <Item textValue=\"Person 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 1</Text>\n  </Item>\n  <Item textValue=\"Person 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 2</Text>\n  </Item>\n  <Item textValue=\"Person 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 3</Text>\n  </Item>\n  <Item textValue=\"Person 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 4</Text>\n  </Item>\n</TagGroup>",
                    "name": "With avatars#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with avatars example\">\n  <Item textValue=\"Person 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 1</Text>\n  </Item>\n  <Item textValue=\"Person 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 2</Text>\n  </Item>\n  <Item textValue=\"Person 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 3</Text>\n  </Item>\n  <Item textValue=\"Person 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 4</Text>\n  </Item>\n</TagGroup>",
                    "name": "With avatars#"
                },
                {
                    "source": "<TagGroup aria-label=\"TagGroup with avatars example\">\n  <Item textValue=\"Person 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>\n      Person 1\n    </Text>\n  </Item>\n  <Item textValue=\"Person 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>\n      Person 2\n    </Text>\n  </Item>\n  <Item textValue=\"Person 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>\n      Person 3\n    </Text>\n  </Item>\n  <Item textValue=\"Person 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>\n      Person 4\n    </Text>\n  </Item>\n</TagGroup>",
                    "name": "With avatars#"
                },
                {
                    "source": "<TagGroup label=\"Categories\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<TagGroup\n  label=\"Categories\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<TagGroup\n  label=\"Categories\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    {id: 1, name: 'News'},\n    {id: 2, name: 'Travel'},\n    {id: 3, name: 'Gaming'},\n    {id: 4, name: 'Shopping'}\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems(prevItems => prevItems.filter((item) => !keys.has(item.id)));\n  };\n\n  let isValid = items.length <= 3;\n\n  return (\n    <TagGroup\n      label=\"Categories\"\n      items={items}\n      onRemove={onRemove}\n      aria-label=\"TagGroup help text example\"\n      isInvalid={!isValid}\n      description=\"Please include tags for related categories.\"\n      errorMessage=\"Must contain no more than 3 tags. Please remove some.\"\n      >\n      {item => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    { id: 1, name: 'News' },\n    { id: 2, name: 'Travel' },\n    { id: 3, name: 'Gaming' },\n    { id: 4, name: 'Shopping' }\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems((prevItems) =>\n      prevItems.filter((item) => !keys.has(item.id))\n    );\n  };\n\n  let isValid = items.length <= 3;\n\n  return (\n    <TagGroup\n      label=\"Categories\"\n      items={items}\n      onRemove={onRemove}\n      aria-label=\"TagGroup help text example\"\n      isInvalid={!isValid}\n      description=\"Please include tags for related categories.\"\n      errorMessage=\"Must contain no more than 3 tags. Please remove some.\"\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let defaultItems = [\n    {\n      id: 1,\n      name: 'News'\n    },\n    {\n      id: 2,\n      name: 'Travel'\n    },\n    {\n      id: 3,\n      name: 'Gaming'\n    },\n    {\n      id: 4,\n      name: 'Shopping'\n    }\n  ];\n\n  let [items, setItems] =\n    React.useState(\n      defaultItems\n    );\n\n  let onRemove = (\n    keys\n  ) => {\n    setItems(\n      (prevItems) =>\n        prevItems.filter(\n          (item) =>\n            !keys.has(\n              item.id\n            )\n        )\n    );\n  };\n\n  let isValid =\n    items.length <= 3;\n\n  return (\n    <TagGroup\n      label=\"Categories\"\n      items={items}\n      onRemove={onRemove}\n      aria-label=\"TagGroup help text example\"\n      isInvalid={!isValid}\n      description=\"Please include tags for related categories.\"\n      errorMessage=\"Must contain no more than 3 tags. Please remove some.\"\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </TagGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TagGroup\n  label=\"Categories\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What are tags?</Heading>\n      <Content>Tags allow users to categorize content.</Content>\n    </ContextualHelp>\n  }>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TagGroup\n  label=\"Categories\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What are tags?</Heading>\n      <Content>\n        Tags allow users to categorize content.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TagGroup\n  label=\"Categories\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What are tags?\n      </Heading>\n      <Content>\n        Tags allow\n        users to\n        categorize\n        content.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<View\n  maxWidth=\"size-3400\"\n  minHeight=\"size-2000\"\n  padding=\"size-150\"\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n>\n  <TagGroup\n    maxRows={2}    aria-label=\"Static TagGroup items example with maxRows set\"\n  >\n    <Item>News</Item>\n    <Item>Travel</Item>\n    <Item>Gaming</Item>\n    <Item>Shopping</Item>\n    <Item>Business</Item>\n    <Item>Entertainment</Item>\n    <Item>Food</Item>\n    <Item>Technology</Item>\n    <Item>Politics</Item>\n    <Item>Health</Item>\n    <Item>Science</Item>\n  </TagGroup>\n</View>",
                    "name": "Limit rows#"
                },
                {
                    "source": "<View\n  maxWidth=\"size-3400\"\n  minHeight=\"size-2000\"\n  padding=\"size-150\"\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n>\n  <TagGroup\n    maxRows={2}    aria-label=\"Static TagGroup items example with maxRows set\"\n  >\n    <Item>News</Item>\n    <Item>Travel</Item>\n    <Item>Gaming</Item>\n    <Item>Shopping</Item>\n    <Item>Business</Item>\n    <Item>Entertainment</Item>\n    <Item>Food</Item>\n    <Item>Technology</Item>\n    <Item>Politics</Item>\n    <Item>Health</Item>\n    <Item>Science</Item>\n  </TagGroup>\n</View>",
                    "name": "Limit rows#"
                },
                {
                    "source": "<View\n  maxWidth=\"size-3400\"\n  minHeight=\"size-2000\"\n  padding=\"size-150\"\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n>\n  <TagGroup\n    maxRows={2}    aria-label=\"Static TagGroup items example with maxRows set\"\n  >\n    <Item>News</Item>\n    <Item>Travel</Item>\n    <Item>Gaming</Item>\n    <Item>\n      Shopping\n    </Item>\n    <Item>\n      Business\n    </Item>\n    <Item>\n      Entertainment\n    </Item>\n    <Item>Food</Item>\n    <Item>\n      Technology\n    </Item>\n    <Item>\n      Politics\n    </Item>\n    <Item>Health</Item>\n    <Item>\n      Science\n    </Item>\n  </TagGroup>\n</View>",
                    "name": "Limit rows#"
                },
                {
                    "source": "import {Link} from '@adobe/react-spectrum';\n\nfunction renderEmptyState() {\n  return (\n    <span>\n      No categories.{' '}\n      <Link>\n        <a href=\"//react-spectrum.com\">Click here</a>\n      </Link>{' '}\n      to add some.\n    </span>\n  );\n}\n\n<TagGroup\n  label=\"Categories\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</TagGroup>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {Link} from '@adobe/react-spectrum';\n\nfunction renderEmptyState() {\n  return (\n    <span>\n      No categories.{' '}\n      <Link>\n        <a href=\"//react-spectrum.com\">Click here</a>\n      </Link>{' '}\n      to add some.\n    </span>\n  );\n}\n\n<TagGroup\n  label=\"Categories\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</TagGroup>",
                    "name": "Empty state#"
                },
                {
                    "source": "import {Link} from '@adobe/react-spectrum';\n\nfunction renderEmptyState() {\n  return (\n    <span>\n      No categories.{' '}\n      <Link>\n        <a href=\"//react-spectrum.com\">\n          Click here\n        </a>\n      </Link>{' '}\n      to add some.\n    </span>\n  );\n}\n\n<TagGroup\n  label=\"Categories\"\n  renderEmptyState={renderEmptyState}\n>\n  {[]}\n</TagGroup>",
                    "name": "Empty state#"
                }
            ]
        }
    ],
    "Color": [
        {
            "name": "ColorAreabeta",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ColorArea.html",
            "examples": [
                {
                    "source": "<ColorArea defaultValue=\"#7f0000\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorArea defaultValue=\"#7f0000\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorArea defaultValue=\"#7f0000\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <div>\n        <Label id=\"hsl-uncontrolled-id\">\n          x: Saturation, y: Lightness (uncontrolled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-uncontrolled-id\"\n          defaultValue={value}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n      <div>\n        <Label id=\"hsl-controlled-id\">\n          x: Saturation, y: Lightness (controlled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-controlled-id\"\n          value={value}\n          onChange={setValue}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseColor('hsl(0, 100%, 50%)')\n  );\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <div>\n        <Label id=\"hsl-uncontrolled-id\">\n          x: Saturation, y: Lightness (uncontrolled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-uncontrolled-id\"\n          defaultValue={value}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n      <div>\n        <Label id=\"hsl-controlled-id\">\n          x: Saturation, y: Lightness (controlled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-controlled-id\"\n          value={value}\n          onChange={setValue}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseColor(\n        'hsl(0, 100%, 50%)'\n      )\n    );\n  return (\n    <Flex\n      gap=\"size-300\"\n      wrap\n    >\n      <div>\n        <Label id=\"hsl-uncontrolled-id\">\n          x: Saturation,\n          y: Lightness\n          (uncontrolled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-uncontrolled-id\"\n          defaultValue={value}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n      <div>\n        <Label id=\"hsl-controlled-id\">\n          x: Saturation,\n          y: Lightness\n          (controlled)\n        </Label>\n        <ColorArea\n          aria-labelledby=\"hsl-controlled-id\"\n          value={value}\n          onChange={setValue}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\"\n        />\n      </div>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<ColorArea xName=\"red\" yName=\"green\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorArea xName=\"red\" yName=\"green\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorArea\n  xName=\"red\"\n  yName=\"green\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\n\n<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorArea\n    aria-label=\"Background color\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\" />\n  <div>\n    <Label\n      id=\"hsl-aria-labelledby-id\">Background color</Label>\n    <ColorArea\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\" />\n  </div>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\n\n<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorArea\n    aria-label=\"Background color\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\" />\n  <div>\n    <Label\n      id=\"hsl-aria-labelledby-id\">Background color</Label>\n    <ColorArea\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\" />\n  </div>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\n\n<Flex\n  gap=\"size-300\"\n  wrap\n  alignItems=\"end\"\n>\n  <ColorArea\n    aria-label=\"Background color\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\"\n  />\n  <div>\n    <Label id=\"hsl-aria-labelledby-id\">\n      Background color\n    </Label>\n    <ColorArea\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\"\n    />\n  </div>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorArea\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorArea\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [\n    currentValue,\n    setCurrentValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n  let [\n    finalValue,\n    setFinalValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n\n  return (\n    <div>\n      <ColorArea\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {ColorArea, ColorSlider} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n  let [redChannel, greenChannel, blueChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{ border: 0 }}>\n      <legend>{color.getColorSpace().toUpperCase()}A Example</legend>\n      <Flex direction=\"column\">\n        <ColorArea\n          xChannel={redChannel}\n          yChannel={greenChannel}\n          value={color}\n          onChange={setColor}\n        />\n        <ColorSlider channel={blueChannel} value={color} onChange={setColor} />\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('css')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "RGBA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider\n} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(\n    parseColor('#ff00ff')\n  );\n  let [redChannel, greenChannel, blueChannel] = color\n    .getColorChannels();\n  return (\n    <fieldset style={{ border: 0 }}>\n      <legend>\n        {color.getColorSpace().toUpperCase()}A Example\n      </legend>\n      <Flex direction=\"column\">\n        <ColorArea\n          xChannel={redChannel}\n          yChannel={greenChannel}\n          value={color}\n          onChange={setColor}\n        />\n        <ColorSlider\n          channel={blueChannel}\n          value={color}\n          onChange={setColor}\n        />\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>Current value: {color.toString('css')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "RGBA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider\n} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        '#ff00ff'\n      )\n    );\n  let [\n    redChannel,\n    greenChannel,\n    blueChannel\n  ] = color\n    .getColorChannels();\n  return (\n    <fieldset\n      style={{\n        border: 0\n      }}\n    >\n      <legend>\n        {color\n          .getColorSpace()\n          .toUpperCase()}A\n        Example\n      </legend>\n      <Flex direction=\"column\">\n        <ColorArea\n          xChannel={redChannel}\n          yChannel={greenChannel}\n          value={color}\n          onChange={setColor}\n        />\n        <ColorSlider\n          channel={blueChannel}\n          value={color}\n          onChange={setColor}\n        />\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>\n          Current value:\n          {' '}\n          {color\n            .toString(\n              'css'\n            )}\n        </p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "RGBA#"
                },
                {
                    "source": "import {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n  let [, saturationChannel, lightnessChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{border: 0}}>\n      <legend>HSLA Example</legend>\n      <Flex\n        direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\">\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\">\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={lightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\" />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\" />\n        </View>\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('hsla')}</p>\n      </Flex>\n    </fieldset>\n  );\n}",
                    "name": "HSLA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider,\n  ColorWheel\n} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(\n    parseColor('hsla(0, 100%, 50%, 0.5)')\n  );\n  let [, saturationChannel, lightnessChannel] = color\n    .getColorChannels();\n  return (\n    <fieldset style={{ border: 0 }}>\n      <legend>HSLA Example</legend>\n      <Flex direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\"\n        >\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={lightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\"\n            />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\"\n          />\n        </View>\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>Current value: {color.toString('hsla')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "HSLA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider,\n  ColorWheel\n} from '@react-spectrum/color';\nimport {\n  Flex,\n  Grid\n} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        'hsla(0, 100%, 50%, 0.5)'\n      )\n    );\n  let [\n    ,\n    saturationChannel,\n    lightnessChannel\n  ] = color\n    .getColorChannels();\n  return (\n    <fieldset\n      style={{\n        border: 0\n      }}\n    >\n      <legend>\n        HSLA Example\n      </legend>\n      <Flex direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\"\n        >\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={lightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\"\n            />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\"\n          />\n        </View>\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>\n          Current value:\n          {' '}\n          {color\n            .toString(\n              'hsla'\n            )}\n        </p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "HSLA#"
                },
                {
                    "source": "import {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  let [, saturationChannel, brightnessChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{border: 0}}>\n      <legend>HSBA Example</legend>\n      <Flex\n        direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\">\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\">\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={brightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\" />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\" />\n        </View>\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('hsba')}</p>\n      </Flex>\n    </fieldset>\n  );\n}",
                    "name": "HSBA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider,\n  ColorWheel\n} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(\n    parseColor('hsba(0, 100%, 50%, 0.5)')\n  );\n  let [, saturationChannel, brightnessChannel] = color\n    .getColorChannels();\n  return (\n    <fieldset style={{ border: 0 }}>\n      <legend>HSBA Example</legend>\n      <Flex direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\"\n        >\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={brightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\"\n            />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\"\n          />\n        </View>\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>Current value: {color.toString('hsba')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "HSBA#"
                },
                {
                    "source": "import {\n  ColorArea,\n  ColorSlider,\n  ColorWheel\n} from '@react-spectrum/color';\nimport {\n  Flex,\n  Grid\n} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        'hsba(0, 100%, 50%, 0.5)'\n      )\n    );\n  let [\n    ,\n    saturationChannel,\n    brightnessChannel\n  ] = color\n    .getColorChannels();\n  return (\n    <fieldset\n      style={{\n        border: 0\n      }}\n    >\n      <legend>\n        HSBA Example\n      </legend>\n      <Flex direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\"\n        >\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={brightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\"\n            />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\"\n          />\n        </View>\n        <ColorSlider\n          channel=\"alpha\"\n          value={color}\n          onChange={setColor}\n        />\n        <p>\n          Current value:\n          {' '}\n          {color\n            .toString(\n              'hsba'\n            )}\n        </p>\n      </Flex>\n    </fieldset>\n  );\n}\n",
                    "name": "HSBA#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\n\n<ColorArea defaultValue=\"#7f0000\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\n\n<ColorArea defaultValue=\"#7f0000\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\n\n<ColorArea\n  defaultValue=\"#7f0000\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex direction=\"column\" gap=\"size-300\">\n  <ColorArea defaultValue=\"#7f0000\" size=\"size-3600\" maxWidth=\"100%\" />\n</Flex>",
                    "name": "Custom Size#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex direction=\"column\" gap=\"size-300\">\n  <ColorArea\n    defaultValue=\"#7f0000\"\n    size=\"size-3600\"\n    maxWidth=\"100%\"\n  />\n</Flex>",
                    "name": "Custom Size#"
                },
                {
                    "source": "import {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <ColorArea\n    defaultValue=\"#7f0000\"\n    size=\"size-3600\"\n    maxWidth=\"100%\"\n  />\n</Flex>",
                    "name": "Custom Size#"
                }
            ]
        },
        {
            "name": "ColorFieldbeta",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ColorField.html",
            "examples": [
                {
                    "source": "<ColorField label=\"Primary Color\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('#e73623'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ColorField\n        label=\"Primary Color (Uncontrolled)\"\n        defaultValue=\"#e21\" />\n\n      <ColorField\n        label=\"Primary Color (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseColor('#e73623')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ColorField\n        label=\"Primary Color (Uncontrolled)\"\n        defaultValue=\"#e21\"\n      />\n\n      <ColorField\n        label=\"Primary Color (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseColor(\n        '#e73623'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <ColorField\n        label=\"Primary Color (Uncontrolled)\"\n        defaultValue=\"#e21\"\n      />\n\n      <ColorField\n        label=\"Primary Color (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<ColorField label=\"Color\" name=\"color\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorField label=\"Color\" name=\"color\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorField\n  label=\"Color\"\n  name=\"color\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <ColorField label=\"Primary Color\" />\n  <ColorField label=\"Primary Color\" isRequired />\n  <ColorField label=\"Primary Color\" isRequired necessityIndicator=\"label\" />\n  <ColorField label=\"Primary Color\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <ColorField label=\"Primary Color\" />\n  <ColorField label=\"Primary Color\" isRequired />\n  <ColorField\n    label=\"Primary Color\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <ColorField\n    label=\"Primary Color\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <ColorField label=\"Primary Color\" />\n  <ColorField\n    label=\"Primary Color\"\n    isRequired\n  />\n  <ColorField\n    label=\"Primary Color\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <ColorField\n    label=\"Primary Color\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <ColorField label=\"Color\" name=\"color\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <ColorField label=\"Color\" name=\"color\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <ColorField\n    label=\"Color\"\n    name=\"color\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" isDisabled defaultValue=\"#e73623\" />",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  isDisabled\n  defaultValue=\"#e73623\"\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  isDisabled\n  defaultValue=\"#e73623\"\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" isReadOnly defaultValue=\"#e73623\" />",
                    "name": "Read only#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  isReadOnly\n  defaultValue=\"#e73623\"\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  isReadOnly\n  defaultValue=\"#e73623\"\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <ColorField\n    label=\"Color\"\n    defaultValue=\"#abc\"\n    validationState=\"valid\"\n    description=\"Enter your favorite color.\"\n  />\n  <ColorField\n    label=\"Color\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <ColorField\n    label=\"Color\"\n    defaultValue=\"#abc\"\n    validationState=\"valid\"\n    description=\"Enter your favorite color.\"\n  />\n  <ColorField\n    label=\"Color\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <ColorField\n    label=\"Color\"\n    defaultValue=\"#abc\"\n    validationState=\"valid\"\n    description=\"Enter your favorite color.\"\n  />\n  <ColorField\n    label=\"Color\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<ColorField\n  label=\"Accent Color\"\n  defaultValue=\"#e73623\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is an accent color?</Heading>\n      <Content>\n        An accent color is the primary foreground color for your theme, used\n        across all components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ColorField\n  label=\"Accent Color\"\n  defaultValue=\"#e73623\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is an accent color?</Heading>\n      <Content>\n        An accent color is the primary foreground color\n        for your theme, used across all components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ColorField\n  label=\"Accent Color\"\n  defaultValue=\"#e73623\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What is an\n        accent color?\n      </Heading>\n      <Content>\n        An accent color\n        is the primary\n        foreground\n        color for your\n        theme, used\n        across all\n        components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<ColorField label=\"Primary Color\" width=\"size-3600\" maxWidth=\"100%\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n/>",
                    "name": "Custom width#"
                },
                {
                    "source": "<ColorField\n  label=\"Primary Color\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n/>",
                    "name": "Custom width#"
                }
            ]
        },
        {
            "name": "ColorSliderbeta",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ColorSlider.html",
            "examples": [
                {
                    "source": "<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n/>",
                    "name": "Example#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <ColorSlider\n        label=\"Hue (uncontrolled)\"\n        defaultValue=\"hsl(0, 100%, 50%)\"\n        channel=\"hue\" />\n      <ColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\" />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseColor('hsl(0, 100%, 50%)')\n  );\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <ColorSlider\n        label=\"Hue (uncontrolled)\"\n        defaultValue=\"hsl(0, 100%, 50%)\"\n        channel=\"hue\"\n      />\n      <ColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseColor(\n        'hsl(0, 100%, 50%)'\n      )\n    );\n  return (\n    <Flex\n      gap=\"size-300\"\n      wrap\n    >\n      <ColorSlider\n        label=\"Hue (uncontrolled)\"\n        defaultValue=\"hsl(0, 100%, 50%)\"\n        channel=\"hue\"\n      />\n      <ColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorSlider\n    channel=\"saturation\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    label={null}\n  />\n  <ColorSlider\n    channel=\"lightness\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    showValueLabel={false}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorSlider\n    channel=\"saturation\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    label={null}\n  />\n  <ColorSlider\n    channel=\"lightness\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    showValueLabel={false}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-300\"\n  wrap\n  alignItems=\"end\"\n>\n  <ColorSlider\n    channel=\"saturation\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    label={null}\n  />\n  <ColorSlider\n    channel=\"lightness\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    showValueLabel={false}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    currentValue,\n    setCurrentValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n  let [\n    finalValue,\n    setFinalValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n\n  return (\n    <div>\n      <ColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider channel=\"red\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"green\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"blue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </Flex>\n  );\n}",
                    "name": "RGBA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(\n    parseColor('#ff00ff')\n  );\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider\n        channel=\"red\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"green\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"blue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "RGBA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        '#ff00ff'\n      )\n    );\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider\n        channel=\"red\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"green\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"blue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "RGBA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"lightness\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </Flex>\n  );\n}",
                    "name": "HSLA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(\n    parseColor('hsla(0, 100%, 50%, 0.5)')\n  );\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider\n        channel=\"hue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"saturation\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"lightness\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "HSLA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        'hsla(0, 100%, 50%, 0.5)'\n      )\n    );\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider\n        channel=\"hue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"saturation\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"lightness\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "HSLA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  return (\n    <>\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"brightness\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}",
                    "name": "HSBA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] = React.useState(\n    parseColor('hsba(0, 100%, 50%, 0.5)')\n  );\n  return (\n    <>\n      <ColorSlider\n        channel=\"hue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"saturation\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"brightness\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </>\n  );\n}\n",
                    "name": "HSBA#"
                },
                {
                    "source": "function Example() {\n  let [color, setColor] =\n    React.useState(\n      parseColor(\n        'hsba(0, 100%, 50%, 0.5)'\n      )\n    );\n  return (\n    <>\n      <ColorSlider\n        channel=\"hue\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"saturation\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"brightness\"\n        value={color}\n        onChange={setColor}\n      />\n      <ColorSlider\n        channel=\"alpha\"\n        value={color}\n        onChange={setColor}\n      />\n    </>\n  );\n}\n",
                    "name": "HSBA#"
                },
                {
                    "source": "<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" orientation=\"vertical\" />",
                    "name": "Vertical#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  orientation=\"vertical\"\n/>",
                    "name": "Vertical#"
                },
                {
                    "source": "<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  orientation=\"vertical\"\n/>",
                    "name": "Vertical#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    orientation=\"vertical\"\n    height=\"size-3600\"\n  />\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    width=\"size-3600\"\n    maxWidth=\"100%\"\n  />\n</Flex>",
                    "name": "Custom Size#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    orientation=\"vertical\"\n    height=\"size-3600\"\n  />\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    width=\"size-3600\"\n    maxWidth=\"100%\"\n  />\n</Flex>",
                    "name": "Custom Size#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    orientation=\"vertical\"\n    height=\"size-3600\"\n  />\n  <ColorSlider\n    defaultValue=\"#7f0000\"\n    channel=\"red\"\n    width=\"size-3600\"\n    maxWidth=\"100%\"\n  />\n</Flex>",
                    "name": "Custom Size#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<ColorSlider\n  label=\"Accent Color\"\n  channel=\"hue\"\n  defaultValue=\"hsl(120, 100%, 50%)\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is an accent color?</Heading>\n      <Content>\n        An accent color is the primary foreground color for your theme, used\n        across all components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ColorSlider\n  label=\"Accent Color\"\n  channel=\"hue\"\n  defaultValue=\"hsl(120, 100%, 50%)\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is an accent color?</Heading>\n      <Content>\n        An accent color is the primary foreground color\n        for your theme, used across all components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ColorSlider\n  label=\"Accent Color\"\n  channel=\"hue\"\n  defaultValue=\"hsl(120, 100%, 50%)\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What is an\n        accent color?\n      </Heading>\n      <Content>\n        An accent color\n        is the primary\n        foreground\n        color for your\n        theme, used\n        across all\n        components.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                }
            ]
        },
        {
            "name": "ColorWheelbeta",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ColorWheel.html",
            "examples": [
                {
                    "source": "<ColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />",
                    "name": "Example#"
                },
                {
                    "source": "<ColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(30, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-1\">Hue (uncontrolled)</label>\n        <ColorWheel\n          defaultValue=\"hsl(30, 100%, 50%)\"\n          aria-labelledby=\"label-1\" />\n      </Flex>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-2\">Hue (controlled)</label>\n        <ColorWheel\n          value={value}\n          onChange={setValue}\n          aria-labelledby=\"label-1\" />\n      </Flex>\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseColor('hsl(30, 100%, 50%)')\n  );\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-1\">Hue (uncontrolled)</label>\n        <ColorWheel\n          defaultValue=\"hsl(30, 100%, 50%)\"\n          aria-labelledby=\"label-1\"\n        />\n      </Flex>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-2\">Hue (controlled)</label>\n        <ColorWheel\n          value={value}\n          onChange={setValue}\n          aria-labelledby=\"label-1\"\n        />\n      </Flex>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseColor(\n        'hsl(30, 100%, 50%)'\n      )\n    );\n  return (\n    <Flex\n      gap=\"size-300\"\n      wrap\n    >\n      <Flex\n        direction=\"column\"\n        alignItems=\"center\"\n      >\n        <label id=\"label-1\">\n          Hue\n          (uncontrolled)\n        </label>\n        <ColorWheel\n          defaultValue=\"hsl(30, 100%, 50%)\"\n          aria-labelledby=\"label-1\"\n        />\n      </Flex>\n      <Flex\n        direction=\"column\"\n        alignItems=\"center\"\n      >\n        <label id=\"label-2\">\n          Hue\n          (controlled)\n        </label>\n        <ColorWheel\n          value={value}\n          onChange={setValue}\n          aria-labelledby=\"label-1\"\n        />\n      </Flex>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<ColorWheel name=\"hue\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorWheel name=\"hue\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ColorWheel name=\"hue\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "function Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorWheel\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [currentValue, setCurrentValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n  let [finalValue, setFinalValue] = React.useState(\n    parseColor('hsl(50, 100%, 50%)')\n  );\n\n  return (\n    <div>\n      <ColorWheel\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    currentValue,\n    setCurrentValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n  let [\n    finalValue,\n    setFinalValue\n  ] = React.useState(\n    parseColor(\n      'hsl(50, 100%, 50%)'\n    )\n  );\n\n  return (\n    <div>\n      <ColorWheel\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ColorWheel isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorWheel isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorWheel isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<ColorWheel size=\"size-1600\" />",
                    "name": "Size#"
                },
                {
                    "source": "<ColorWheel size=\"size-1600\" />",
                    "name": "Size#"
                },
                {
                    "source": "<ColorWheel size=\"size-1600\" />",
                    "name": "Size#"
                }
            ]
        }
    ],
    "Date and Time": [
        {
            "name": "Calendar",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Calendar.html",
            "examples": [
                {
                    "source": "<Calendar aria-label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<Calendar aria-label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<Calendar aria-label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Calendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <Calendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseDate('2020-02-03')\n  );\n\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Calendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')}\n      />\n      <Calendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseDate(\n        '2020-02-03'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-300\"\n      wrap\n    >\n      <Calendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate(\n          '2020-02-03'\n        )}\n      />\n      <Calendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <Calendar aria-label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <Calendar\n        aria-label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <Calendar\n        aria-label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {date\n          ?.toString()}\n      </p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('2022-07-04'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <Calendar aria-label=\"Event date\" value={date} onChange={setDate} />\n      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(\n    parseDate('2022-07-04')\n  );\n  let formatter = useDateFormatter({ dateStyle: 'full' });\n\n  return (\n    <>\n      <Calendar\n        aria-label=\"Event date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:{' '}\n        {formatter.format(date.toDate(getLocalTimeZone()))}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(\n      parseDate(\n        '2022-07-04'\n      )\n    );\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'full'\n    });\n\n  return (\n    <>\n      <Calendar\n        aria-label=\"Event date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {formatter\n          .format(\n            date.toDate(\n              getLocalTimeZone()\n            )\n          )}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Calendar\n  aria-label=\"Appointment date\"\n  minValue={today(getLocalTimeZone())}\n/>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Calendar\n  aria-label=\"Appointment date\"\n  minValue={today(getLocalTimeZone())}\n/>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Calendar\n  aria-label=\"Appointment date\"\n  minValue={today(\n    getLocalTimeZone()\n  )}\n/>",
                    "name": "Validation#"
                },
                {
                    "source": "import {isWeekend, today} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let { locale } = useLocale();\n  let isDateUnavailable = (date) =>\n    isWeekend(date, locale) ||\n    disabledRanges.some((interval) =>\n      date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0\n    );\n\n  return (\n    <Calendar\n      aria-label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {isWeekend, today} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let { locale } = useLocale();\n  let isDateUnavailable = (date) =>\n    isWeekend(date, locale) ||\n    disabledRanges.some((interval) =>\n      date.compare(interval[0]) >= 0 &&\n      date.compare(interval[1]) <= 0\n    );\n\n  return (\n    <Calendar\n      aria-label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {\n  isWeekend,\n  today\n} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(\n    getLocalTimeZone()\n  );\n  let disabledRanges = [\n    [\n      now,\n      now.add({\n        days: 5\n      })\n    ],\n    [\n      now.add({\n        days: 14\n      }),\n      now.add({\n        days: 16\n      })\n    ],\n    [\n      now.add({\n        days: 23\n      }),\n      now.add({\n        days: 24\n      })\n    ]\n  ];\n\n  let { locale } =\n    useLocale();\n  let isDateUnavailable =\n    (date) =>\n      isWeekend(\n        date,\n        locale\n      ) ||\n      disabledRanges\n        .some((\n          interval\n        ) =>\n          date.compare(\n              interval[0]\n            ) >= 0 &&\n          date.compare(\n              interval[1]\n            ) <= 0\n        );\n\n  return (\n    <Calendar\n      aria-label=\"Appointment date\"\n      minValue={today(\n        getLocalTimeZone()\n      )}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"start\" gap=\"size-200\">\n      <ActionButton onPress={() => setFocusedDate(defaultDate)}>\n        Reset focused date\n      </ActionButton>\n      <Calendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(\n    defaultDate\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      alignItems=\"start\"\n      gap=\"size-200\"\n    >\n      <ActionButton\n        onPress={() => setFocusedDate(defaultDate)}\n      >\n        Reset focused date\n      </ActionButton>\n      <Calendar\n        focusedValue={focusedDate}\n        onFocusChange={setFocusedDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate =\n    new CalendarDate(\n      2021,\n      7,\n      1\n    );\n  let [\n    focusedDate,\n    setFocusedDate\n  ] = React.useState(\n    defaultDate\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      alignItems=\"start\"\n      gap=\"size-200\"\n    >\n      <ActionButton\n        onPress={() =>\n          setFocusedDate(\n            defaultDate\n          )}\n      >\n        Reset focused\n        date\n      </ActionButton>\n      <Calendar\n        focusedValue={focusedDate}\n        onFocusChange={setFocusedDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "<Calendar aria-label=\"Event date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<Calendar aria-label=\"Event date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<Calendar\n  aria-label=\"Event date\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Calendar\n  aria-label=\"Event date\"\n  value={today(getLocalTimeZone())}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<Calendar\n  aria-label=\"Event date\"\n  value={today(getLocalTimeZone())}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<Calendar\n  aria-label=\"Event date\"\n  value={today(\n    getLocalTimeZone()\n  )}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" visibleMonths={3} />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" visibleMonths={3} />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div\n  style={{\n    maxWidth: '100%',\n    overflow: 'auto'\n  }}\n>\n  <Calendar\n    aria-label=\"Event date\"\n    visibleMonths={3}\n  />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" visibleMonths={3} pageBehavior=\"single\" />\n</div>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<div style={{ maxWidth: '100%', overflow: 'auto' }}>\n  <Calendar\n    aria-label=\"Event date\"\n    visibleMonths={3}\n    pageBehavior=\"single\"\n  />\n</div>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<div\n  style={{\n    maxWidth: '100%',\n    overflow: 'auto'\n  }}\n>\n  <Calendar\n    aria-label=\"Event date\"\n    visibleMonths={3}\n    pageBehavior=\"single\"\n  />\n</div>",
                    "name": "Page behavior#"
                }
            ]
        },
        {
            "name": "DateField",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DateField.html",
            "examples": [
                {
                    "source": "<DateField label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DateField label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DateField label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <DateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseDate('2020-02-03')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')}\n      />\n      <DateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseDate(\n        '2020-02-03'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate(\n          '2020-02-03'\n        )}\n      />\n      <DateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] =\n    React.useState(\n      parseAbsoluteToLocal(\n        '2021-04-07T18:45:22Z'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateField\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DateField\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateField\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DateField\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DateField\n    label=\"Event date\"\n    granularity=\"second\"\n  />\n  <DateField\n    label=\"Event date\"\n    placeholderValue={now(\n      'America/New_York'\n    )}\n    granularity=\"second\"\n  />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateField label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateField\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateField\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {date\n          ?.toString()}\n      </p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "<DateField label=\"Birth date\" name=\"birthday\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DateField label=\"Birth date\" name=\"birthday\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  name=\"birthday\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DateField label=\"Birth date\" />\n  <DateField label=\"Birth date\" isRequired necessityIndicator=\"icon\" />\n  <DateField label=\"Birth date\" isRequired necessityIndicator=\"label\" />\n  <DateField label=\"Birth date\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DateField label=\"Birth date\" />\n  <DateField\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DateField\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DateField\n    label=\"Birth date\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DateField label=\"Birth date\" />\n  <DateField\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DateField\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DateField\n    label=\"Birth date\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({ dateStyle: 'full' });\n\n  return (\n    <>\n      <DateField label=\"Birth date\" value={date} onChange={setDate} />\n      <p>\n        Selected date:{' '}\n        {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(\n    parseDate('1985-07-03')\n  );\n  let formatter = useDateFormatter({ dateStyle: 'full' });\n\n  return (\n    <>\n      <DateField\n        label=\"Birth date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date: {date\n          ? formatter.format(\n            date.toDate(getLocalTimeZone())\n          )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(\n      parseDate(\n        '1985-07-03'\n      )\n    );\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'full'\n    });\n\n  return (\n    <>\n      <DateField\n        label=\"Birth date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {date\n          ? formatter\n            .format(\n              date\n                .toDate(\n                  getLocalTimeZone()\n                )\n            )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField label=\"Appointment date\" name=\"date\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField\n    label=\"Appointment date\"\n    name=\"date\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DateField\n    label=\"Appointment date\"\n    name=\"date\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField\n    label=\"Appointment date\"\n    minValue={today(getLocalTimeZone())}    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField\n    label=\"Appointment date\"\n    minValue={today(getLocalTimeZone())}    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DateField\n    label=\"Appointment date\"\n    minValue={today(\n      getLocalTimeZone()\n    )}    defaultValue={parseDate(\n      '2022-02-03'\n    )}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n      <DateField\n        label=\"Appointment date\"\n        validate={(date) =>\n          date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}        defaultValue={parseDate('2023-10-28')}\n      />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n      <DateField\n        label=\"Appointment date\"\n        validate={(date) =>\n          date && isWeekend(date, locale)\n            ? 'We are closed on weekends.'\n            : null}        defaultValue={parseDate('2023-10-28')}\n      />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">\n          Submit\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\">\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } =\n    useLocale();\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      maxWidth=\"size-3000\"\n    >\n      <DateField\n        label=\"Appointment date\"\n        validate={(date) =>\n          date &&\n            isWeekend(\n              date,\n              locale\n            )\n            ? 'We are closed on weekends.'\n            : null}        defaultValue={parseDate(\n          '2023-10-28'\n        )}\n      />\n      <ButtonGroup>\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n        <Button\n          type=\"reset\"\n          variant=\"secondary\"\n        >\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "<DateField label=\"Birth date\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateField label=\"Birth date\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateField label=\"Birth date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateField label=\"Birth date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateField label=\"Birth date\" value={today(getLocalTimeZone())} isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  value={today(getLocalTimeZone())}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  value={today(\n    getLocalTimeZone()\n  )}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DateField label=\"Birth date\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DateField\n    label=\"Date\"\n    defaultValue={today(getLocalTimeZone())}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DateField\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DateField\n    label=\"Date\"\n    defaultValue={today(getLocalTimeZone())}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DateField\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <DateField\n    label=\"Date\"\n    defaultValue={today(\n      getLocalTimeZone()\n    )}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DateField\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<DateField label=\"Birth date\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DateField label=\"Birth date\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DateField\n  label=\"Birth date\"\n  showFormatHelpText\n/>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<DateField\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment date cannot be changed once it is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DateField\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment date cannot be changed once it is\n        scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DateField\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Appointment\n        changes\n      </Heading>\n      <Content>\n        Your\n        appointment\n        date cannot be\n        changed once it\n        is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateField\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateField\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateField\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(\n    1980,\n    1,\n    1\n  )}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24}\n/>",
                    "name": "Hour cycle#"
                }
            ]
        },
        {
            "name": "DatePicker",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DatePicker.html",
            "examples": [
                {
                    "source": "<DatePicker label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DatePicker label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DatePicker label=\"Event date\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <DatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(\n    parseDate('2020-02-03')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')}\n      />\n      <DatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      parseDate(\n        '2020-02-03'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate(\n          '2020-02-03'\n        )}\n      />\n      <DatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] =\n    React.useState(\n      parseAbsoluteToLocal(\n        '2021-04-07T18:45:22Z'\n      )\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DatePicker\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DatePicker\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DatePicker\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DatePicker\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DatePicker\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DatePicker\n    label=\"Event date\"\n    granularity=\"second\"\n  />\n  <DatePicker\n    label=\"Event date\"\n    placeholderValue={now(\n      'America/New_York'\n    )}\n    granularity=\"second\"\n  />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DatePicker label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DatePicker\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DatePicker\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {date\n          ?.toString()}\n      </p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" name=\"birthday\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" name=\"birthday\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  name=\"birthday\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DatePicker label=\"Birth date\" />\n  <DatePicker label=\"Birth date\" isRequired necessityIndicator=\"icon\" />\n  <DatePicker label=\"Birth date\" isRequired necessityIndicator=\"label\" />\n  <DatePicker label=\"Birth date\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DatePicker label=\"Birth date\" />\n  <DatePicker\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DatePicker\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DatePicker\n    label=\"Birth date\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DatePicker label=\"Birth date\" />\n  <DatePicker\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DatePicker\n    label=\"Birth date\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DatePicker\n    label=\"Birth date\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({ dateStyle: 'full' });\n\n  return (\n    <>\n      <DatePicker label=\"Birth date\" value={date} onChange={setDate} />\n      <p>\n        Selected date:{' '}\n        {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(\n    parseDate('1985-07-03')\n  );\n  let formatter = useDateFormatter({ dateStyle: 'full' });\n\n  return (\n    <>\n      <DatePicker\n        label=\"Birth date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date: {date\n          ? formatter.format(\n            date.toDate(getLocalTimeZone())\n          )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(\n      parseDate(\n        '1985-07-03'\n      )\n    );\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'full'\n    });\n\n  return (\n    <>\n      <DatePicker\n        label=\"Birth date\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {date\n          ? formatter\n            .format(\n              date\n                .toDate(\n                  getLocalTimeZone()\n                )\n            )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DatePicker label=\"Appointment date\" name=\"date\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DatePicker\n    label=\"Appointment date\"\n    name=\"date\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DatePicker\n    label=\"Appointment date\"\n    name=\"date\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DatePicker\n    label=\"Appointment date\"\n    minValue={today(getLocalTimeZone())}    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DatePicker\n    label=\"Appointment date\"\n    minValue={today(getLocalTimeZone())}    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DatePicker\n    label=\"Appointment date\"\n    minValue={today(\n      getLocalTimeZone()\n    )}    defaultValue={parseDate(\n      '2022-02-03'\n    )}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {isWeekend, today} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let { locale } = useLocale();\n  return (\n    <DatePicker\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={(date) =>\n        isWeekend(date, locale) || disabledRanges.some((interval) =>\n          date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0\n        )}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {isWeekend, today} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let { locale } = useLocale();\n  return (\n    <DatePicker\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={(date) =>\n        isWeekend(date, locale) ||\n        disabledRanges.some((interval) =>\n          date.compare(interval[0]) >= 0 &&\n          date.compare(interval[1]) <= 0\n        )}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {\n  isWeekend,\n  today\n} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(\n    getLocalTimeZone()\n  );\n  let disabledRanges = [\n    [\n      now,\n      now.add({\n        days: 5\n      })\n    ],\n    [\n      now.add({\n        days: 14\n      }),\n      now.add({\n        days: 16\n      })\n    ],\n    [\n      now.add({\n        days: 23\n      }),\n      now.add({\n        days: 24\n      })\n    ]\n  ];\n\n  let { locale } =\n    useLocale();\n  return (\n    <DatePicker\n      label=\"Appointment date\"\n      minValue={today(\n        getLocalTimeZone()\n      )}\n      isDateUnavailable={(date) =>\n        isWeekend(\n          date,\n          locale\n        ) ||\n        disabledRanges\n          .some((\n            interval\n          ) =>\n            date.compare(\n                interval[\n                  0\n                ]\n              ) >= 0 &&\n            date.compare(\n                interval[\n                  1\n                ]\n              ) <= 0\n          )}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n      <DatePicker\n        label=\"Appointment date\"\n        validate={(date) =>\n          date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}        defaultValue={parseDate('2023-10-28')}\n      />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n      <DatePicker\n        label=\"Appointment date\"\n        validate={(date) =>\n          date && isWeekend(date, locale)\n            ? 'We are closed on weekends.'\n            : null}        defaultValue={parseDate('2023-10-28')}\n      />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">\n          Submit\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\">\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } =\n    useLocale();\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      maxWidth=\"size-3000\"\n    >\n      <DatePicker\n        label=\"Appointment date\"\n        validate={(date) =>\n          date &&\n            isWeekend(\n              date,\n              locale\n            )\n            ? 'We are closed on weekends.'\n            : null}        defaultValue={parseDate(\n          '2023-10-28'\n        )}\n      />\n      <ButtonGroup>\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n        <Button\n          type=\"reset\"\n          variant=\"secondary\"\n        >\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Custom validation#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" value={today(getLocalTimeZone())} isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  value={today(getLocalTimeZone())}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  value={today(\n    getLocalTimeZone()\n  )}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DatePicker\n    label=\"Date\"\n    defaultValue={today(getLocalTimeZone())}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DatePicker\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DatePicker\n    label=\"Date\"\n    defaultValue={today(getLocalTimeZone())}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DatePicker\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <DatePicker\n    label=\"Date\"\n    defaultValue={today(\n      getLocalTimeZone()\n    )}\n    validationState=\"valid\"\n    description=\"Select a meeting date.\"\n  />\n  <DatePicker\n    label=\"Date\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DatePicker label=\"Birth date\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DatePicker\n  label=\"Birth date\"\n  showFormatHelpText\n/>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<DatePicker\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment date cannot be changed once it is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DatePicker\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment date cannot be changed once it is\n        scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DatePicker\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Appointment\n        changes\n      </Heading>\n      <Content>\n        Your\n        appointment\n        date cannot be\n        changed once it\n        is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DatePicker\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DatePicker\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DatePicker\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(\n    1980,\n    1,\n    1\n  )}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<DatePicker label=\"Appointment date\" maxVisibleMonths={3} />",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DatePicker label=\"Appointment date\" maxVisibleMonths={3} />",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment date\"\n  maxVisibleMonths={3}\n/>",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment date\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment date\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment date\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24}\n/>",
                    "name": "Hour cycle#"
                }
            ]
        },
        {
            "name": "DateRangePicker",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DateRangePicker.html",
            "examples": [
                {
                    "source": "<DateRangePicker label=\"Date range\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" />",
                    "name": "Example#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-08')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-08')\n        }} />\n      <DateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-08')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-08')\n        }} />\n      <DateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState({\n      start: parseDate(\n        '2020-02-03'\n      ),\n      end: parseDate(\n        '2020-02-08'\n      )\n    });\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start:\n            parseDate(\n              '2020-02-03'\n            ),\n          end: parseDate(\n            '2020-02-08'\n          )\n        }}\n      />\n      <DateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')\n  }} />",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime(\n      '2022-11-07T00:45[America/Los_Angeles]'\n    ),\n    end: parseZonedDateTime(\n      '2022-11-08T11:15[America/Los_Angeles]'\n    )\n  }}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start:\n      parseZonedDateTime(\n        '2022-11-07T00:45[America/Los_Angeles]'\n      ),\n    end:\n      parseZonedDateTime(\n        '2022-11-08T11:15[America/Los_Angeles]'\n      )\n  }}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\n  }}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\n  }}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start:\n      parseAbsoluteToLocal(\n        '2021-11-07T07:45:00Z'\n      ),\n    end:\n      parseAbsoluteToLocal(\n        '2021-11-08T14:25:00Z'\n      )\n  }}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date and time range\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DateRangePicker\n        label=\"Date range\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </Flex>\n  );\n}",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date and time range\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DateRangePicker\n        label=\"Date range\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </Flex>\n  );\n}",
                    "name": "Granularity#"
                },
                {
                    "source": "function Example() {\n  let [date, setDate] =\n    React.useState({\n      start:\n        parseAbsoluteToLocal(\n          '2021-04-07T18:45:22Z'\n        ),\n      end:\n        parseAbsoluteToLocal(\n          '2021-04-08T20:00:00Z'\n        )\n    });\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <DateRangePicker\n        label=\"Date and time range\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate}\n      />\n      <DateRangePicker\n        label=\"Date range\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateRangePicker\n    label=\"Date range\"\n    granularity=\"second\" />\n  <DateRangePicker\n    label=\"Date range\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateRangePicker\n    label=\"Date range\"\n    granularity=\"second\" />\n  <DateRangePicker\n    label=\"Date range\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {now} from '@internationalized/date';\n\n<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DateRangePicker\n    label=\"Date range\"\n    granularity=\"second\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    placeholderValue={now(\n      'America/New_York'\n    )}\n    granularity=\"second\"\n  />\n</Flex>",
                    "name": "Granularity#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </Provider>\n  );\n}",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateRangePicker\n        label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] =\n    React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateRangePicker\n        label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Start date:{' '}\n        {range?.start\n          .toString()}\n      </p>\n      <p>\n        End date:{' '}\n        {range?.end\n          .toString()}\n      </p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "<DateRangePicker label=\"Trip dates\" startName=\"startDate\" endName=\"endDate\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Trip dates\"\n  startName=\"startDate\"\n  endName=\"endDate\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Trip dates\"\n  startName=\"startDate\"\n  endName=\"endDate\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DateRangePicker label=\"Date range\" />\n  <DateRangePicker label=\"Date range\" isRequired necessityIndicator=\"icon\" />\n  <DateRangePicker label=\"Date range\" isRequired necessityIndicator=\"label\" />\n  <DateRangePicker label=\"Date range\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <DateRangePicker label=\"Date range\" />\n  <DateRangePicker\n    label=\"Date range\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <DateRangePicker label=\"Date range\" />\n  <DateRangePicker\n    label=\"Date range\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({ dateStyle: 'long' });\n\n  return (\n    <>\n      <DateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>\n        Selected date: {range\n          ? formatter.formatRange(\n            range.start.toDate(getLocalTimeZone()),\n            range.end.toDate(getLocalTimeZone())\n          )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({ dateStyle: 'long' });\n\n  return (\n    <>\n      <DateRangePicker\n        label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Selected date: {range\n          ? formatter.formatRange(\n            range.start.toDate(getLocalTimeZone()),\n            range.end.toDate(getLocalTimeZone())\n          )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] =\n    React.useState({\n      start: parseDate(\n        '2020-07-03'\n      ),\n      end: parseDate(\n        '2020-07-10'\n      )\n    });\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'long'\n    });\n\n  return (\n    <>\n      <DateRangePicker\n        label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {range\n          ? formatter\n            .formatRange(\n              range.start\n                .toDate(\n                  getLocalTimeZone()\n                ),\n              range.end\n                .toDate(\n                  getLocalTimeZone()\n                )\n            )\n          : '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Button, ButtonGroup, Form} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Date range\"\n    startName=\"startDate\"\n    endName=\"endDate\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Date range\"\n    startName=\"startDate\"\n    endName=\"endDate\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DateRangePicker\n    label=\"Date range\"\n    startName=\"startDate\"\n    endName=\"endDate\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Trip dates\"\n    minValue={today(getLocalTimeZone())}    defaultValue={{\n      start: parseDate('2022-02-03'),\n      end: parseDate('2022-05-03')\n    }} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Trip dates\"\n    minValue={today(getLocalTimeZone())}    defaultValue={{\n      start: parseDate('2022-02-03'),\n      end: parseDate('2022-05-03')\n    }} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DateRangePicker\n    label=\"Trip dates\"\n    minValue={today(\n      getLocalTimeZone()\n    )}    defaultValue={{\n      start: parseDate(\n        '2022-02-03'\n      ),\n      end: parseDate(\n        '2022-05-03'\n      )\n    }}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Trip dates\"\n    validate={(range) =>\n      range?.end.compare(range.start) > 7\n        ? 'Maximum stay duration is 1 week.'\n        : null}    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })\n    }}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateRangePicker\n    label=\"Trip dates\"\n    validate={(range) =>\n      range?.end.compare(range.start) > 7\n        ? 'Maximum stay duration is 1 week.'\n        : null}    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({\n        weeks: 1,\n        days: 3\n      })\n    }}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <DateRangePicker\n    label=\"Trip dates\"\n    validate={(range) =>\n      range?.end\n          .compare(\n            range.start\n          ) > 7\n        ? 'Maximum stay duration is 1 week.'\n        : null}    defaultValue={{\n      start: today(\n        getLocalTimeZone()\n      ),\n      end: today(\n        getLocalTimeZone()\n      ).add({\n        weeks: 1,\n        days: 3\n      })\n    }}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  return (\n    <DateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={(date) =>\n        disabledRanges.some((interval) =>\n          date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0\n        )}\n      validate={(value) =>\n        disabledRanges.some((interval) =>\n            value && value.end.compare(interval[0]) >= 0 &&\n            value.start.compare(interval[1]) <= 0\n          )\n          ? 'Selected date range may not include unavailable dates.'\n          : null}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  return (\n    <DateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={(date) =>\n        disabledRanges.some((interval) =>\n          date.compare(interval[0]) >= 0 &&\n          date.compare(interval[1]) <= 0\n        )}\n      validate={(value) =>\n        disabledRanges.some((interval) =>\n            value && value.end.compare(interval[0]) >= 0 &&\n            value.start.compare(interval[1]) <= 0\n          )\n          ? 'Selected date range may not include unavailable dates.'\n          : null}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(\n    getLocalTimeZone()\n  );\n  let disabledRanges = [\n    [\n      now,\n      now.add({\n        days: 5\n      })\n    ],\n    [\n      now.add({\n        days: 14\n      }),\n      now.add({\n        days: 16\n      })\n    ],\n    [\n      now.add({\n        days: 23\n      }),\n      now.add({\n        days: 24\n      })\n    ]\n  ];\n\n  return (\n    <DateRangePicker\n      label=\"Trip dates\"\n      minValue={today(\n        getLocalTimeZone()\n      )}\n      isDateUnavailable={(date) =>\n        disabledRanges\n          .some((\n            interval\n          ) =>\n            date.compare(\n                interval[\n                  0\n                ]\n              ) >= 0 &&\n            date.compare(\n                interval[\n                  1\n                ]\n              ) <= 0\n          )}\n      validate={(value) =>\n        disabledRanges\n            .some(\n              (interval) =>\n                value &&\n                value.end\n                    .compare(\n                      interval[\n                        0\n                      ]\n                    ) >=\n                  0 &&\n                value\n                    .start\n                    .compare(\n                      interval[\n                        1\n                      ]\n                    ) <=\n                  0\n            )\n          ? 'Selected date range may not include unavailable dates.'\n          : null}      validationBehavior=\"native\"\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <DateRangePicker\n      label=\"Time off request\"\n      isDateUnavailable={(date) => isWeekend(date, locale)}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <DateRangePicker\n      label=\"Time off request\"\n      isDateUnavailable={(date) => isWeekend(date, locale)}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } =\n    useLocale();\n\n  return (\n    <DateRangePicker\n      label=\"Time off request\"\n      isDateUnavailable={(date) =>\n        isWeekend(\n          date,\n          locale\n        )}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  value={{\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1 })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  value={{\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1 })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  value={{\n    start: today(\n      getLocalTimeZone()\n    ),\n    end: today(\n      getLocalTimeZone()\n    ).add({\n      weeks: 1\n    })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DateRangePicker\n    label=\"Date range\"\n    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({ weeks: 1 })\n    }}\n    validationState=\"valid\"\n    description=\"Select your trip dates.\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DateRangePicker\n    label=\"Date range\"\n    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({ weeks: 1 })\n    }}\n    validationState=\"valid\"\n    description=\"Select your trip dates.\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <DateRangePicker\n    label=\"Date range\"\n    defaultValue={{\n      start: today(\n        getLocalTimeZone()\n      ),\n      end: today(\n        getLocalTimeZone()\n      ).add({\n        weeks: 1\n      })\n    }}\n    validationState=\"valid\"\n    description=\"Select your trip dates.\"\n  />\n  <DateRangePicker\n    label=\"Date range\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" showFormatHelpText />",
                    "name": "Help text#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  showFormatHelpText\n/>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<DateRangePicker\n  label=\"Trip dates\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Date changes</Heading>\n      <Content>Your trip dates cannot be changed once scheduled.</Content>\n    </ContextualHelp>\n  } />",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DateRangePicker\n  label=\"Trip dates\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Date changes</Heading>\n      <Content>\n        Your trip dates cannot be changed once scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<DateRangePicker\n  label=\"Trip dates\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Date changes\n      </Heading>\n      <Content>\n        Your trip dates\n        cannot be\n        changed once\n        scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  placeholderValue={new CalendarDate(1980, 1, 1)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  placeholderValue={new CalendarDate(\n    1980,\n    1,\n    1\n  )}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" maxVisibleMonths={3} />",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DateRangePicker label=\"Date range\" maxVisibleMonths={3} />",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  maxVisibleMonths={3}\n/>",
                    "name": "Maximum visible months#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  maxVisibleMonths={3}\n  pageBehavior=\"single\"\n/>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')\n  }}\n  hideTimeZone />",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime(\n      '2022-11-07T10:45[America/Los_Angeles]'\n    ),\n    end: parseZonedDateTime(\n      '2022-11-08T19:45[America/Los_Angeles]'\n    )\n  }}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start:\n      parseZonedDateTime(\n        '2022-11-07T10:45[America/Los_Angeles]'\n      ),\n    end:\n      parseZonedDateTime(\n        '2022-11-08T19:45[America/Los_Angeles]'\n      )\n  }}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<DateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                }
            ]
        },
        {
            "name": "RangeCalendar",
            "url": "https://react-spectrum.adobe.com/react-spectrum/RangeCalendar.html",
            "examples": [
                {
                    "source": "<RangeCalendar aria-label=\"Trip dates\" />",
                    "name": "Example#"
                },
                {
                    "source": "<RangeCalendar aria-label=\"Trip dates\" />",
                    "name": "Example#"
                },
                {
                    "source": "<RangeCalendar aria-label=\"Trip dates\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-12')\n  });\n\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <RangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-12')\n        }} />\n      <RangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-12')\n  });\n\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <RangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-12')\n        }} />\n      <RangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState({\n      start: parseDate(\n        '2020-02-03'\n      ),\n      end: parseDate(\n        '2020-02-12'\n      )\n    });\n\n  return (\n    <Flex\n      gap=\"size-300\"\n      wrap\n    >\n      <RangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start:\n            parseDate(\n              '2020-02-03'\n            ),\n          end: parseDate(\n            '2020-02-12'\n          )\n        }}\n      />\n      <RangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] =\n    React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Start date:{' '}\n        {range?.start\n          .toString()}\n      </p>\n      <p>\n        End date:{' '}\n        {range?.end\n          .toString()}\n      </p>\n    </Provider>\n  );\n}\n",
                    "name": "International calendars#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({ dateStyle: 'long' });\n\n  return (\n    <>\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Selected date: {formatter.formatRange(\n          range.start.toDate(getLocalTimeZone()),\n          range.end.toDate(getLocalTimeZone())\n        )}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({ dateStyle: 'long' });\n\n  return (\n    <>\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Selected date: {formatter.formatRange(\n          range.start.toDate(getLocalTimeZone()),\n          range.end.toDate(getLocalTimeZone())\n        )}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] =\n    React.useState({\n      start: parseDate(\n        '2020-07-03'\n      ),\n      end: parseDate(\n        '2020-07-10'\n      )\n    });\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'long'\n    });\n\n  return (\n    <>\n      <RangeCalendar\n        aria-label=\"Date range\"\n        value={range}\n        onChange={setRange}\n      />\n      <p>\n        Selected date:\n        {' '}\n        {formatter\n          .formatRange(\n            range.start\n              .toDate(\n                getLocalTimeZone()\n              ),\n            range.end\n              .toDate(\n                getLocalTimeZone()\n              )\n          )}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<RangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} />",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<RangeCalendar\n  aria-label=\"Trip dates\"\n  minValue={today(getLocalTimeZone())}\n/>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\n<RangeCalendar\n  aria-label=\"Trip dates\"\n  minValue={today(\n    getLocalTimeZone()\n  )}\n/>",
                    "name": "Validation#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let isDateUnavailable = (date) =>\n    disabledRanges.some((interval) =>\n      date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0\n    );\n\n  return (\n    <RangeCalendar\n      aria-label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({ days: 5 })],\n    [now.add({ days: 14 }), now.add({ days: 16 })],\n    [now.add({ days: 23 }), now.add({ days: 24 })]\n  ];\n\n  let isDateUnavailable = (date) =>\n    disabledRanges.some((interval) =>\n      date.compare(interval[0]) >= 0 &&\n      date.compare(interval[1]) <= 0\n    );\n\n  return (\n    <RangeCalendar\n      aria-label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(\n    getLocalTimeZone()\n  );\n  let disabledRanges = [\n    [\n      now,\n      now.add({\n        days: 5\n      })\n    ],\n    [\n      now.add({\n        days: 14\n      }),\n      now.add({\n        days: 16\n      })\n    ],\n    [\n      now.add({\n        days: 23\n      }),\n      now.add({\n        days: 24\n      })\n    ]\n  ];\n\n  let isDateUnavailable =\n    (date) =>\n      disabledRanges\n        .some((\n          interval\n        ) =>\n          date.compare(\n              interval[0]\n            ) >= 0 &&\n          date.compare(\n              interval[1]\n            ) <= 0\n        );\n\n  return (\n    <RangeCalendar\n      aria-label=\"Trip dates\"\n      minValue={today(\n        getLocalTimeZone()\n      )}\n      isDateUnavailable={isDateUnavailable}\n    />\n  );\n}\n",
                    "name": "Unavailable dates#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <RangeCalendar\n      aria-label=\"Time off request\"\n      isDateUnavailable={(date) => isWeekend(date, locale)}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } = useLocale();\n\n  return (\n    <RangeCalendar\n      aria-label=\"Time off request\"\n      isDateUnavailable={(date) => isWeekend(date, locale)}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "import {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let { locale } =\n    useLocale();\n\n  return (\n    <RangeCalendar\n      aria-label=\"Time off request\"\n      isDateUnavailable={(date) =>\n        isWeekend(\n          date,\n          locale\n        )}\n      allowsNonContiguousRanges\n    />\n  );\n}\n",
                    "name": "Non-contiguous ranges#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"start\" gap=\"size-200\">\n      <ActionButton onPress={() => setFocusedDate(defaultDate)}>\n        Reset focused date\n      </ActionButton>\n      <RangeCalendar\n        focusedValue={focusedDate}\n        onFocusChange={setFocusedDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(\n    defaultDate\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      alignItems=\"start\"\n      gap=\"size-200\"\n    >\n      <ActionButton\n        onPress={() => setFocusedDate(defaultDate)}\n      >\n        Reset focused date\n      </ActionButton>\n      <RangeCalendar\n        focusedValue={focusedDate}\n        onFocusChange={setFocusedDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "import {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate =\n    new CalendarDate(\n      2021,\n      7,\n      1\n    );\n  let [\n    focusedDate,\n    setFocusedDate\n  ] = React.useState(\n    defaultDate\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      alignItems=\"start\"\n      gap=\"size-200\"\n    >\n      <ActionButton\n        onPress={() =>\n          setFocusedDate(\n            defaultDate\n          )}\n      >\n        Reset focused\n        date\n      </ActionButton>\n      <RangeCalendar\n        focusedValue={focusedDate}\n        onFocusChange={setFocusedDate}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Controlling the focused date#"
                },
                {
                    "source": "<RangeCalendar aria-label=\"Trip dates\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<RangeCalendar aria-label=\"Trip dates\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<RangeCalendar\n  aria-label=\"Trip dates\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RangeCalendar\n  aria-label=\"Trip dates\"\n  value={{\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1 })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<RangeCalendar\n  aria-label=\"Trip dates\"\n  value={{\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1 })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<RangeCalendar\n  aria-label=\"Trip dates\"\n  value={{\n    start: today(\n      getLocalTimeZone()\n    ),\n    end: today(\n      getLocalTimeZone()\n    ).add({\n      weeks: 1\n    })\n  }}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <RangeCalendar aria-label=\"Trip dates\" visibleMonths={3} />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div style={{ maxWidth: '100%', overflow: 'auto' }}>\n  <RangeCalendar\n    aria-label=\"Trip dates\"\n    visibleMonths={3}\n  />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div\n  style={{\n    maxWidth: '100%',\n    overflow: 'auto'\n  }}\n>\n  <RangeCalendar\n    aria-label=\"Trip dates\"\n    visibleMonths={3}\n  />\n</div>",
                    "name": "Visible months#"
                },
                {
                    "source": "<div style={{ maxWidth: '100%', overflow: 'auto' }}>\n  <RangeCalendar\n    aria-label=\"Trip dates\"\n    visibleMonths={3}\n    pageBehavior=\"single\"\n  />\n</div>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<div style={{ maxWidth: '100%', overflow: 'auto' }}>\n  <RangeCalendar\n    aria-label=\"Trip dates\"\n    visibleMonths={3}\n    pageBehavior=\"single\"\n  />\n</div>",
                    "name": "Page behavior#"
                },
                {
                    "source": "<div\n  style={{\n    maxWidth: '100%',\n    overflow: 'auto'\n  }}\n>\n  <RangeCalendar\n    aria-label=\"Trip dates\"\n    visibleMonths={3}\n    pageBehavior=\"single\"\n  />\n</div>",
                    "name": "Page behavior#"
                }
            ]
        },
        {
            "name": "TimeField",
            "url": "https://react-spectrum.adobe.com/react-spectrum/TimeField.html",
            "examples": [
                {
                    "source": "<TimeField label=\"Event time\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TimeField label=\"Event time\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TimeField label=\"Event time\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(new Time(11, 45));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(11, 45)} />\n      <TimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(new Time(11, 45));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(11, 45)} />\n      <TimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] =\n    React.useState(\n      new Time(11, 45)\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <TimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(\n          11,\n          45\n        )}\n      />\n      <TimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseZonedDateTime} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T00:45[America/Los_Angeles]'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "import {parseAbsoluteToLocal} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-11-07T07:45:00Z'\n  )}\n/>",
                    "name": "Time zones#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />",
                    "name": "Granularity#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-04-07T18:45:22Z'\n  )}\n/>",
                    "name": "Granularity#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal(\n    '2021-04-07T18:45:22Z'\n  )}\n/>",
                    "name": "Granularity#"
                },
                {
                    "source": "<TimeField label=\"Meeting time\" name=\"meetingTime\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TimeField label=\"Meeting time\" name=\"meetingTime\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TimeField\n  label=\"Meeting time\"\n  name=\"meetingTime\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TimeField label=\"Event time\" />\n  <TimeField label=\"Event time\" isRequired necessityIndicator=\"icon\" />\n  <TimeField label=\"Event time\" isRequired necessityIndicator=\"label\" />\n  <TimeField label=\"Event time\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TimeField label=\"Event time\" />\n  <TimeField\n    label=\"Event time\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TimeField\n    label=\"Event time\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TimeField\n    label=\"Event time\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <TimeField label=\"Event time\" />\n  <TimeField\n    label=\"Event time\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TimeField\n    label=\"Event time\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TimeField\n    label=\"Event time\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n  let formatter = useDateFormatter({ dateStyle: 'long', timeStyle: 'long' });\n\n  return (\n    <>\n      <TimeField label=\"Time\" value={date} onChange={setDate} />\n      <p>\n        Selected date and time:{' '}\n        {(date?.toDate && formatter.format(date.toDate())) ||\n          (date && date.toString()) || '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(\n    parseAbsoluteToLocal('2021-04-07T18:45:22Z')\n  );\n  let formatter = useDateFormatter({\n    dateStyle: 'long',\n    timeStyle: 'long'\n  });\n\n  return (\n    <>\n      <TimeField\n        label=\"Time\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date and time:{' '}\n        {(date?.toDate &&\n          formatter.format(date.toDate())) ||\n          (date && date.toString()) || '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] =\n    React.useState(\n      parseAbsoluteToLocal(\n        '2021-04-07T18:45:22Z'\n      )\n    );\n  let formatter =\n    useDateFormatter({\n      dateStyle: 'long',\n      timeStyle: 'long'\n    });\n\n  return (\n    <>\n      <TimeField\n        label=\"Time\"\n        value={date}\n        onChange={setDate}\n      />\n      <p>\n        Selected date and\n        time:{' '}\n        {(date?.toDate &&\n          formatter\n            .format(\n              date\n                .toDate()\n            )) ||\n          (date &&\n            date\n              .toString()) ||\n          '--'}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField label=\"Meeting time\" name=\"time\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    name=\"time\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TimeField\n    label=\"Meeting time\"\n    name=\"time\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    minValue={new Time(9)}\n    maxValue={new Time(17)}    defaultValue={new Time(8)} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    minValue={new Time(9)}\n    maxValue={new Time(17)}    defaultValue={new Time(8)} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TimeField\n    label=\"Meeting time\"\n    minValue={new Time(\n      9\n    )}\n    maxValue={new Time(\n      17\n    )}    defaultValue={new Time(\n      8\n    )}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    validate={(time) =>\n      time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}    defaultValue={new Time(9, 25)}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    validate={(time) =>\n      time?.minute % 15 !== 0\n        ? 'Meetings start every 15 minutes.'\n        : null}    defaultValue={new Time(9, 25)}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TimeField\n    label=\"Meeting time\"\n    validate={(time) =>\n      time?.minute %\n            15 !== 0\n        ? 'Meetings start every 15 minutes.'\n        : null}    defaultValue={new Time(\n      9,\n      25\n    )}\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Custom validation#"
                },
                {
                    "source": "<TimeField label=\"Event time\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TimeField label=\"Event time\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<TimeField label=\"Event time\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TimeField label=\"Event time\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<TimeField label=\"Event time\" value={new Time(11)} isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  value={new Time(11)}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  value={new Time(11)}\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TimeField label=\"Event time\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TimeField\n  label=\"Event time\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TimeField\n    label=\"Time\"\n    defaultValue={new Time(9)}\n    validationState=\"valid\"\n    description=\"Select a meeting time.\"\n  />\n  <TimeField\n    label=\"Time\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TimeField\n    label=\"Time\"\n    defaultValue={new Time(9)}\n    validationState=\"valid\"\n    description=\"Select a meeting time.\"\n  />\n  <TimeField\n    label=\"Time\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <TimeField\n    label=\"Time\"\n    defaultValue={new Time(\n      9\n    )}\n    validationState=\"valid\"\n    description=\"Select a meeting time.\"\n  />\n  <TimeField\n    label=\"Time\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TimeField\n  label=\"Appointment time\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment time cannot be changed once it is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TimeField\n  label=\"Appointment time\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>\n        Your appointment time cannot be changed once it is\n        scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TimeField\n  label=\"Appointment time\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Appointment\n        changes\n      </Heading>\n      <Content>\n        Your\n        appointment\n        time cannot be\n        changed once it\n        is scheduled.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<TimeField label=\"Appointment time\" placeholderValue={new Time(9)} />",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  placeholderValue={new Time(9)}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  placeholderValue={new Time(\n    9\n  )}\n/>",
                    "name": "Placeholder value#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime(\n    '2022-11-07T10:45[America/Los_Angeles]'\n  )}\n  hideTimeZone\n/>",
                    "name": "Hide time zone#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  hourCycle={24} />",
                    "name": "Hour cycle#"
                },
                {
                    "source": "<TimeField\n  label=\"Appointment time\"\n  hourCycle={24}\n/>",
                    "name": "Hour cycle#"
                }
            ]
        }
    ],
    "Drag and drop": [
        {
            "name": "DropZonerc",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DropZone.html",
            "examples": [
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() => setIsFilled(true)}>\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled ? 'You dropped something!' : 'Drag and drop your file'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  )\n}",
                    "name": "Example#"
                },
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() => setIsFilled(true)}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop your file'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [\n    isFilled,\n    setIsFilled\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() =>\n          setIsFilled(\n            true\n          )}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop your file'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let { dragProps, isDragging } = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'my-app-custom-type': JSON.stringify({ message: 'hello world' })\n      }];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${isDragging ? 'dragging' : ''}`}\n    >\n      Drag me\n    </div>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let { dragProps, isDragging } = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'my-app-custom-type': JSON.stringify({\n          message: 'hello world'\n        })\n      }];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${\n        isDragging ? 'dragging' : ''\n      }`}\n    >\n      Drag me\n    </div>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let {\n    dragProps,\n    isDragging\n  } = useDrag({\n    getItems() {\n      return [{\n        'text/plain':\n          'hello world',\n        'my-app-custom-type':\n          JSON.stringify(\n            {\n              message:\n                'hello world'\n            }\n          )\n      }];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${\n        isDragging\n          ? 'dragging'\n          : ''\n      }`}\n    >\n      Drag me\n    </div>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": ".draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 10px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  height: fit-content;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}",
                    "name": "Example#"
                },
                {
                    "source": ".draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 10px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  height: fit-content;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}",
                    "name": "Example#"
                },
                {
                    "source": ".draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 10px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  height: fit-content;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}",
                    "name": "Example#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() => setIsFilled(true)}>\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled ? 'You dropped something!' : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              onSelect={()=> setIsFilled(true)}>\n              <Button variant=\"primary\">Browse</Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  )\n}",
                    "name": "Content#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() => setIsFilled(true)}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              onSelect={() => setIsFilled(true)}\n            >\n              <Button variant=\"primary\">Browse</Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [\n    isFilled,\n    setIsFilled\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() =>\n          setIsFilled(\n            true\n          )}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              onSelect={() =>\n                setIsFilled(\n                  true\n                )}\n            >\n              <Button variant=\"primary\">\n                Browse\n              </Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport {Text} from 'react-aria-components';\nimport {Flex} from '@react-spectrum/layout';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              setFilledSrc(item.name);\n            } else if (item.kind === 'text' && item.types.has('text/plain')) {\n              setFilledSrc(await item.getText('text/plain'));\n            }\n          });\n        }}\n      >\n        {filledSrc\n          ? (\n            <Flex\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              gap=\"size-100\"\n            >\n              <File />\n              {filledSrc}\n            </Flex>\n          )\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag and drop here\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport {Text} from 'react-aria-components';\nimport {Flex} from '@react-spectrum/layout';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              setFilledSrc(item.name);\n            } else if (\n              item.kind === 'text' &&\n              item.types.has('text/plain')\n            ) {\n              setFilledSrc(\n                await item.getText('text/plain')\n              );\n            }\n          });\n        }}\n      >\n        {filledSrc\n          ? (\n            <Flex\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              gap=\"size-100\"\n            >\n              <File />\n              {filledSrc}\n            </Flex>\n          )\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag and drop here\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import File from '@spectrum-icons/illustrations/File';\nimport {Text} from 'react-aria-components';\nimport {Flex} from '@react-spectrum/layout';\n\nfunction Example() {\n  let [\n    filledSrc,\n    setFilledSrc\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        onDrop={async (\n          e\n        ) => {\n          e.items.find(\n            async (\n              item\n            ) => {\n              if (\n                item\n                  .kind ===\n                  'file'\n              ) {\n                setFilledSrc(\n                  item\n                    .name\n                );\n              } else if (\n                item\n                    .kind ===\n                  'text' &&\n                item\n                  .types\n                  .has(\n                    'text/plain'\n                  )\n              ) {\n                setFilledSrc(\n                  await item\n                    .getText(\n                      'text/plain'\n                    )\n                );\n              }\n            }\n          );\n        }}\n      >\n        {filledSrc\n          ? (\n            <Flex\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              gap=\"size-100\"\n            >\n              <File />\n              {filledSrc}\n            </Flex>\n          )\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag\n                  and\n                  drop\n                  here\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <DraggableImage />\n      <DropZone\n        isFilled={!!filledSrc}\n        maxWidth=\"size-3000\"\n        height=\"size-2400\"\n        getDropOperation={(types) =>\n          (types.has('image/png') || types.has('image/jpeg'))\n            ? 'copy'\n            : 'cancel'}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              if (item.type === 'image/jpeg' || item.type === 'image/png') {\n                setFilledSrc(URL.createObjectURL(await item.getFile()));\n              }\n            } else if (item.kind === 'text') {\n              setFilledSrc(await item.getText('image/jpeg'));\n            }\n          });\n        }}\n      >\n        {filledSrc\n          ? <img className=\"images\" alt=\"\" src={filledSrc} />\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag and drop photos\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Filled state#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <DraggableImage />\n      <DropZone\n        isFilled={!!filledSrc}\n        maxWidth=\"size-3000\"\n        height=\"size-2400\"\n        getDropOperation={(types) =>\n          (types.has('image/png') ||\n              types.has('image/jpeg'))\n            ? 'copy'\n            : 'cancel'}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              if (\n                item.type === 'image/jpeg' ||\n                item.type === 'image/png'\n              ) {\n                setFilledSrc(\n                  URL.createObjectURL(await item.getFile())\n                );\n              }\n            } else if (item.kind === 'text') {\n              setFilledSrc(\n                await item.getText('image/jpeg')\n              );\n            }\n          });\n        }}\n      >\n        {filledSrc\n          ? (\n            <img\n              className=\"images\"\n              alt=\"\"\n              src={filledSrc}\n            />\n          )\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag and drop photos\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Filled state#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [\n    filledSrc,\n    setFilledSrc\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <DraggableImage />\n      <DropZone\n        isFilled={!!filledSrc}\n        maxWidth=\"size-3000\"\n        height=\"size-2400\"\n        getDropOperation={(\n          types\n        ) =>\n          (types.has(\n              'image/png'\n            ) ||\n              types.has(\n                'image/jpeg'\n              ))\n            ? 'copy'\n            : 'cancel'}\n        onDrop={async (\n          e\n        ) => {\n          e.items.find(\n            async (\n              item\n            ) => {\n              if (\n                item\n                  .kind ===\n                  'file'\n              ) {\n                if (\n                  item\n                      .type ===\n                    'image/jpeg' ||\n                  item\n                      .type ===\n                    'image/png'\n                ) {\n                  setFilledSrc(\n                    URL\n                      .createObjectURL(\n                        await item\n                          .getFile()\n                      )\n                  );\n                }\n              } else if (\n                item\n                  .kind ===\n                  'text'\n              ) {\n                setFilledSrc(\n                  await item\n                    .getText(\n                      'image/jpeg'\n                    )\n                );\n              }\n            }\n          );\n        }}\n      >\n        {filledSrc\n          ? (\n            <img\n              className=\"images\"\n              alt=\"\"\n              src={filledSrc}\n            />\n          )\n          : (\n            <IllustratedMessage>\n              <Upload />\n              <Heading>\n                <Text slot=\"label\">\n                  Drag\n                  and\n                  drop\n                  photos\n                </Text>\n              </Heading>\n            </IllustratedMessage>\n          )}\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Filled state#"
                },
                {
                    "source": ".images {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: var(--spectrum-alias-border-radius-small);\n}",
                    "name": "Filled state#"
                },
                {
                    "source": ".images {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: var(--spectrum-alias-border-radius-small);\n}",
                    "name": "Filled state#"
                },
                {
                    "source": ".images {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: var(--spectrum-alias-border-radius-small);\n}",
                    "name": "Filled state#"
                },
                {
                    "source": "function DraggableImage() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [\n        {\n          'image/jpeg': 'https://i.imgur.com/Z7AzH2c.jpg'\n        }\n      ];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${isDragging ? 'dragging' : ''}`} >\n      <img\n        width=\"150px\"\n        height=\"100px\"\n        alt=\"Traditional Roof\"\n        src=\"https://i.imgur.com/Z7AzH2c.jpg\"/>\n    </div>\n  );\n}",
                    "name": "Filled state#"
                },
                {
                    "source": "function DraggableImage() {\n  let { dragProps, isDragging } = useDrag({\n    getItems() {\n      return [\n        {\n          'image/jpeg': 'https://i.imgur.com/Z7AzH2c.jpg'\n        }\n      ];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${\n        isDragging ? 'dragging' : ''\n      }`}\n    >\n      <img\n        width=\"150px\"\n        height=\"100px\"\n        alt=\"Traditional Roof\"\n        src=\"https://i.imgur.com/Z7AzH2c.jpg\"\n      />\n    </div>\n  );\n}\n",
                    "name": "Filled state#"
                },
                {
                    "source": "function DraggableImage() {\n  let {\n    dragProps,\n    isDragging\n  } = useDrag({\n    getItems() {\n      return [\n        {\n          'image/jpeg':\n            'https://i.imgur.com/Z7AzH2c.jpg'\n        }\n      ];\n    }\n  });\n\n  return (\n    <div\n      {...dragProps}\n      role=\"button\"\n      tabIndex={0}\n      className={`draggable ${\n        isDragging\n          ? 'dragging'\n          : ''\n      }`}\n    >\n      <img\n        width=\"150px\"\n        height=\"100px\"\n        alt=\"Traditional Roof\"\n        src=\"https://i.imgur.com/Z7AzH2c.jpg\"\n      />\n    </div>\n  );\n}\n",
                    "name": "Filled state#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        isFilled={isFilled}\n        maxWidth=\"size-3000\"\n        replaceMessage=\"This is a custom message\"\n        onDrop={() => setIsFilled(true)}>\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled ? 'You dropped something!' : 'Drag and drop here'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}",
                    "name": "Replace message#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        isFilled={isFilled}\n        maxWidth=\"size-3000\"\n        replaceMessage=\"This is a custom message\"\n        onDrop={() => setIsFilled(true)}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Replace message#"
                },
                {
                    "source": "import {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [\n    isFilled,\n    setIsFilled\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        isFilled={isFilled}\n        maxWidth=\"size-3000\"\n        replaceMessage=\"This is a custom message\"\n        onDrop={() =>\n          setIsFilled(\n            true\n          )}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {isFilled\n                ? 'You dropped something!'\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Replace message#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DraggableImage />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        getDropOperation={(types) =>\n          types.has('image/jpeg') ? 'copy' : 'cancel'}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              if (item.type === 'image/jpeg') {\n                let file = await item.getFile();\n                setFilledSrc({\n                  type: file.type,\n                  name: file.name\n                });\n              }\n            } else if (item.kind === 'text') {\n              let file = await item.getText('image/jpeg');\n              setFilledSrc({\n                type: 'image/jpeg',\n                name: file\n              });\n            }\n          });\n        }}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {filledSrc\n                ? `${filledSrc.type} ${filledSrc.name}`\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              acceptedFileTypes={['image/jpeg']}\n              onSelect={(e) => {\n                let file = (Array.from(e)).find((file) =>\n                  file.type === 'image/jpeg'\n                );\n                if (file) {\n                  setFilledSrc({\n                    type: file.type,\n                    name: file.name\n                  });\n                }\n              }}\n            >\n              <Button variant=\"primary\">Browse</Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Visual feedback#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DraggableImage />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        getDropOperation={(types) =>\n          types.has('image/jpeg') ? 'copy' : 'cancel'}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              if (item.type === 'image/jpeg') {\n                let file = await item.getFile();\n                setFilledSrc({\n                  type: file.type,\n                  name: file.name\n                });\n              }\n            } else if (item.kind === 'text') {\n              let file = await item.getText('image/jpeg');\n              setFilledSrc({\n                type: 'image/jpeg',\n                name: file\n              });\n            }\n          });\n        }}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {filledSrc\n                ? `${filledSrc.type} ${filledSrc.name}`\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              acceptedFileTypes={['image/jpeg']}\n              onSelect={(e) => {\n                let file = (Array.from(e)).find((file) =>\n                  file.type === 'image/jpeg'\n                );\n                if (file) {\n                  setFilledSrc({\n                    type: file.type,\n                    name: file.name\n                  });\n                }\n              }}\n            >\n              <Button variant=\"primary\">Browse</Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Visual feedback#"
                },
                {
                    "source": "import {FileTrigger} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [\n    filledSrc,\n    setFilledSrc\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <Draggable />\n      <DraggableImage />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        getDropOperation={(\n          types\n        ) =>\n          types.has(\n              'image/jpeg'\n            )\n            ? 'copy'\n            : 'cancel'}\n        onDrop={async (\n          e\n        ) => {\n          e.items.find(\n            async (\n              item\n            ) => {\n              if (\n                item\n                  .kind ===\n                  'file'\n              ) {\n                if (\n                  item\n                    .type ===\n                    'image/jpeg'\n                ) {\n                  let file =\n                    await item\n                      .getFile();\n                  setFilledSrc(\n                    {\n                      type:\n                        file\n                          .type,\n                      name:\n                        file\n                          .name\n                    }\n                  );\n                }\n              } else if (\n                item\n                  .kind ===\n                  'text'\n              ) {\n                let file =\n                  await item\n                    .getText(\n                      'image/jpeg'\n                    );\n                setFilledSrc(\n                  {\n                    type:\n                      'image/jpeg',\n                    name:\n                      file\n                  }\n                );\n              }\n            }\n          );\n        }}\n      >\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            <Text slot=\"label\">\n              {filledSrc\n                ? `${filledSrc.type} ${filledSrc.name}`\n                : 'Drag and drop here'}\n            </Text>\n          </Heading>\n          <Content>\n            <FileTrigger\n              acceptedFileTypes={[\n                'image/jpeg'\n              ]}\n              onSelect={(\n                e\n              ) => {\n                let file =\n                  (Array\n                    .from(\n                      e\n                    )).find(\n                      (\n                        file\n                      ) =>\n                        file\n                          .type ===\n                          'image/jpeg'\n                    );\n                if (\n                  file\n                ) {\n                  setFilledSrc(\n                    {\n                      type:\n                        file\n                          .type,\n                      name:\n                        file\n                          .name\n                    }\n                  );\n                }\n              }}\n            >\n              <Button variant=\"primary\">\n                Browse\n              </Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n",
                    "name": "Visual feedback#"
                }
            ]
        }
    ],
    "Forms": [
        {
            "name": "Checkbox",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Checkbox.html",
            "examples": [
                {
                    "source": "<Checkbox>Unsubscribe</Checkbox>",
                    "name": "Example#"
                },
                {
                    "source": "<Checkbox>Unsubscribe</Checkbox>",
                    "name": "Example#"
                },
                {
                    "source": "<Checkbox>\n  Unsubscribe\n</Checkbox>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState(true);\n\n  return (\n    <Flex direction=\"row\">\n      <Checkbox defaultSelected>Subscribe (uncontrolled)</Checkbox>\n      <Checkbox isSelected={selected} onChange={setSelected}>\n        Subscribe (controlled)\n      </Checkbox>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState(true);\n\n  return (\n    <Flex direction=\"row\">\n      <Checkbox defaultSelected>\n        Subscribe (uncontrolled)\n      </Checkbox>\n      <Checkbox\n        isSelected={selected}\n        onChange={setSelected}\n      >\n        Subscribe (controlled)\n      </Checkbox>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState(\n    true\n  );\n\n  return (\n    <Flex direction=\"row\">\n      <Checkbox\n        defaultSelected\n      >\n        Subscribe\n        (uncontrolled)\n      </Checkbox>\n      <Checkbox\n        isSelected={selected}\n        onChange={setSelected}\n      >\n        Subscribe\n        (controlled)\n      </Checkbox>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<Checkbox isIndeterminate>Subscribe</Checkbox>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<Checkbox isIndeterminate>Subscribe</Checkbox>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<Checkbox\n  isIndeterminate\n>\n  Subscribe\n</Checkbox>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<Checkbox name=\"newsletter\" value=\"subscribe\">Subscribe</Checkbox>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Checkbox name=\"newsletter\" value=\"subscribe\">\n  Subscribe\n</Checkbox>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Checkbox\n  name=\"newsletter\"\n  value=\"subscribe\"\n>\n  Subscribe\n</Checkbox>",
                    "name": "HTML forms#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <Flex direction=\"column\">\n      <Checkbox isSelected={selected} onChange={setSelection}>\n        Subscribe\n      </Checkbox>\n      <View>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</View>\n    </Flex>\n  );\n }",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <Flex direction=\"column\">\n      <Checkbox\n        isSelected={selected}\n        onChange={setSelection}\n      >\n        Subscribe\n      </Checkbox>\n      <View>\n        {`You are ${\n          selected ? 'subscribed' : 'unsubscribed'\n        }`}\n      </View>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelection\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <Flex direction=\"column\">\n      <Checkbox\n        isSelected={selected}\n        onChange={setSelection}\n      >\n        Subscribe\n      </Checkbox>\n      <View>\n        {`You are ${\n          selected\n            ? 'subscribed'\n            : 'unsubscribed'\n        }`}\n      </View>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<Checkbox isInvalid>I accept the terms and conditions</Checkbox>",
                    "name": "Validation#"
                },
                {
                    "source": "<Checkbox isInvalid>\n  I accept the terms and conditions\n</Checkbox>",
                    "name": "Validation#"
                },
                {
                    "source": "<Checkbox isInvalid>\n  I accept the terms\n  and conditions\n</Checkbox>",
                    "name": "Validation#"
                },
                {
                    "source": "<Checkbox isDisabled>Subscribe</Checkbox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Checkbox isDisabled>Subscribe</Checkbox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Checkbox isDisabled>\n  Subscribe\n</Checkbox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Checkbox isEmphasized defaultSelected>Subscribe</Checkbox>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Checkbox isEmphasized defaultSelected>Subscribe</Checkbox>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Checkbox\n  isEmphasized\n  defaultSelected\n>\n  Subscribe\n</Checkbox>",
                    "name": "Emphasized#"
                }
            ]
        },
        {
            "name": "CheckboxGroup",
            "url": "https://react-spectrum.adobe.com/react-spectrum/CheckboxGroup.html",
            "examples": [
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState(['soccer', 'baseball']);\n\n  return (\n    <Flex gap=\"size-300\">\n      <CheckboxGroup\n        label=\"Favorite sports (uncontrolled)\"\n        defaultValue={['soccer', 'baseball']}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n\n      <CheckboxGroup\n        label=\"Favorite sports (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState([\n    'soccer',\n    'baseball'\n  ]);\n\n  return (\n    <Flex gap=\"size-300\">\n      <CheckboxGroup\n        label=\"Favorite sports (uncontrolled)\"\n        defaultValue={['soccer', 'baseball']}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n\n      <CheckboxGroup\n        label=\"Favorite sports (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState([\n    'soccer',\n    'baseball'\n  ]);\n\n  return (\n    <Flex gap=\"size-300\">\n      <CheckboxGroup\n        label=\"Favorite sports (uncontrolled)\"\n        defaultValue={[\n          'soccer',\n          'baseball'\n        ]}\n      >\n        <Checkbox value=\"soccer\">\n          Soccer\n        </Checkbox>\n        <Checkbox value=\"baseball\">\n          Baseball\n        </Checkbox>\n        <Checkbox value=\"basketball\">\n          Basketball\n        </Checkbox>\n      </CheckboxGroup>\n\n      <CheckboxGroup\n        label=\"Favorite sports (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">\n          Soccer\n        </Checkbox>\n        <Checkbox value=\"baseball\">\n          Baseball\n        </Checkbox>\n        <Checkbox value=\"basketball\">\n          Basketball\n        </Checkbox>\n      </CheckboxGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<CheckboxGroup label=\"Condiments\" name=\"condiments\">\n  <Checkbox value=\"mayo\">Mayo</Checkbox>\n  <Checkbox value=\"mustart\">Mustard</Checkbox>\n  <Checkbox value=\"ketchup\">Ketchup</Checkbox>\n</CheckboxGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<CheckboxGroup label=\"Condiments\" name=\"condiments\">\n  <Checkbox value=\"mayo\">Mayo</Checkbox>\n  <Checkbox value=\"mustart\">Mustard</Checkbox>\n  <Checkbox value=\"ketchup\">Ketchup</Checkbox>\n</CheckboxGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Condiments\"\n  name=\"condiments\"\n>\n  <Checkbox value=\"mayo\">\n    Mayo\n  </Checkbox>\n  <Checkbox value=\"mustart\">\n    Mustard\n  </Checkbox>\n  <Checkbox value=\"ketchup\">\n    Ketchup\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <CheckboxGroup label=\"Favorite sports\">\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup label=\"Favorite sports\" isRequired necessityIndicator=\"icon\">\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup label=\"Favorite sports\" isRequired necessityIndicator=\"label\">\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup label=\"Favorite sports\" necessityIndicator=\"label\">\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <CheckboxGroup label=\"Favorite sports\">\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    isRequired\n    necessityIndicator=\"icon\"\n  >\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    isRequired\n    necessityIndicator=\"label\"\n  >\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    necessityIndicator=\"label\"\n  >\n    <Checkbox value=\"soccer\">Soccer</Checkbox>\n    <Checkbox value=\"baseball\">Baseball</Checkbox>\n    <Checkbox value=\"basketball\">Basketball</Checkbox>\n  </CheckboxGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-300\"\n  wrap\n>\n  <CheckboxGroup label=\"Favorite sports\">\n    <Checkbox value=\"soccer\">\n      Soccer\n    </Checkbox>\n    <Checkbox value=\"baseball\">\n      Baseball\n    </Checkbox>\n    <Checkbox value=\"basketball\">\n      Basketball\n    </Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    isRequired\n    necessityIndicator=\"icon\"\n  >\n    <Checkbox value=\"soccer\">\n      Soccer\n    </Checkbox>\n    <Checkbox value=\"baseball\">\n      Baseball\n    </Checkbox>\n    <Checkbox value=\"basketball\">\n      Basketball\n    </Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    isRequired\n    necessityIndicator=\"label\"\n  >\n    <Checkbox value=\"soccer\">\n      Soccer\n    </Checkbox>\n    <Checkbox value=\"baseball\">\n      Baseball\n    </Checkbox>\n    <Checkbox value=\"basketball\">\n      Basketball\n    </Checkbox>\n  </CheckboxGroup>\n  <CheckboxGroup\n    label=\"Favorite sports\"\n    necessityIndicator=\"label\"\n  >\n    <Checkbox value=\"soccer\">\n      Soccer\n    </Checkbox>\n    <Checkbox value=\"baseball\">\n      Baseball\n    </Checkbox>\n    <Checkbox value=\"basketball\">\n      Basketball\n    </Checkbox>\n  </CheckboxGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState([]);\n\n  return (\n    <>\n      <CheckboxGroup\n        label=\"Favorite sports\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n      <div>You have selected: {selected.join(', ')}</div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState([]);\n\n  return (\n    <>\n      <CheckboxGroup\n        label=\"Favorite sports\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">Soccer</Checkbox>\n        <Checkbox value=\"baseball\">Baseball</Checkbox>\n        <Checkbox value=\"basketball\">Basketball</Checkbox>\n      </CheckboxGroup>\n      <div>You have selected: {selected.join(', ')}</div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState([]);\n\n  return (\n    <>\n      <CheckboxGroup\n        label=\"Favorite sports\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Checkbox value=\"soccer\">\n          Soccer\n        </Checkbox>\n        <Checkbox value=\"baseball\">\n          Baseball\n        </Checkbox>\n        <Checkbox value=\"basketball\">\n          Basketball\n        </Checkbox>\n      </CheckboxGroup>\n      <div>\n        You have\n        selected:{' '}\n        {selected.join(\n          ', '\n        )}\n      </div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <CheckboxGroup label=\"Sandwich condiments\" name=\"condiments\" isRequired>    <Checkbox value=\"lettuce\">Lettuce</Checkbox>\n    <Checkbox value=\"tomato\">Tomato</Checkbox>\n    <Checkbox value=\"onion\">Onion</Checkbox>\n    <Checkbox value=\"sprouts\">Sprouts</Checkbox>\n  </CheckboxGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Group validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <CheckboxGroup\n    label=\"Sandwich condiments\"\n    name=\"condiments\"\n    isRequired\n  >    <Checkbox value=\"lettuce\">Lettuce</Checkbox>\n    <Checkbox value=\"tomato\">Tomato</Checkbox>\n    <Checkbox value=\"onion\">Onion</Checkbox>\n    <Checkbox value=\"sprouts\">Sprouts</Checkbox>\n  </CheckboxGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Group validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <CheckboxGroup\n    label=\"Sandwich condiments\"\n    name=\"condiments\"\n    isRequired\n  >    <Checkbox value=\"lettuce\">\n      Lettuce\n    </Checkbox>\n    <Checkbox value=\"tomato\">\n      Tomato\n    </Checkbox>\n    <Checkbox value=\"onion\">\n      Onion\n    </Checkbox>\n    <Checkbox value=\"sprouts\">\n      Sprouts\n    </Checkbox>\n  </CheckboxGroup>\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Group validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\">\n  <CheckboxGroup label=\"Agree to the following\" isRequired>\n    <Checkbox value=\"terms\" isRequired>Terms and conditions</Checkbox>\n    <Checkbox value=\"privacy\" isRequired>Privacy policy</Checkbox>\n    <Checkbox value=\"cookies\" isRequired>Cookie policy</Checkbox>  </CheckboxGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Individual Checkbox validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\">\n  <CheckboxGroup\n    label=\"Agree to the following\"\n    isRequired\n  >\n    <Checkbox value=\"terms\" isRequired>\n      Terms and conditions\n    </Checkbox>\n    <Checkbox value=\"privacy\" isRequired>\n      Privacy policy\n    </Checkbox>\n    <Checkbox value=\"cookies\" isRequired>\n      Cookie policy\n    </Checkbox>  </CheckboxGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Individual Checkbox validation#"
                },
                {
                    "source": "<Form validationBehavior=\"native\">\n  <CheckboxGroup\n    label=\"Agree to the following\"\n    isRequired\n  >\n    <Checkbox\n      value=\"terms\"\n      isRequired\n    >\n      Terms and\n      conditions\n    </Checkbox>\n    <Checkbox\n      value=\"privacy\"\n      isRequired\n    >\n      Privacy policy\n    </Checkbox>\n    <Checkbox\n      value=\"cookies\"\n      isRequired\n    >\n      Cookie policy\n    </Checkbox>  </CheckboxGroup>\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Individual Checkbox validation#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\" orientation=\"horizontal\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  orientation=\"horizontal\"\n>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  orientation=\"horizontal\"\n>\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\" labelPosition=\"side\" labelAlign=\"end\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "function Example() {\n  let [checked, setChecked] = React.useState(['dogs', 'dragons']);\n  let isValid = checked.length === 2 && checked.includes('dogs') &&\n    checked.includes('dragons');\n\n  return (\n    <CheckboxGroup\n      label=\"Pets\"\n      onChange={setChecked}\n      value={checked}\n      isInvalid={!isValid}\n      description=\"Select your pets.\"\n      errorMessage={checked.includes('cats')\n        ? 'No cats allowed.'\n        : 'Select only dogs and dragons.'}\n    >\n      <Checkbox value=\"dogs\">Dogs</Checkbox>\n      <Checkbox value=\"cats\">Cats</Checkbox>\n      <Checkbox value=\"dragons\">Dragons</Checkbox>\n    </CheckboxGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [checked, setChecked] = React.useState([\n    'dogs',\n    'dragons'\n  ]);\n  let isValid = checked.length === 2 &&\n    checked.includes('dogs') && checked.includes('dragons');\n\n  return (\n    <CheckboxGroup\n      label=\"Pets\"\n      onChange={setChecked}\n      value={checked}\n      isInvalid={!isValid}\n      description=\"Select your pets.\"\n      errorMessage={checked.includes('cats')\n        ? 'No cats allowed.'\n        : 'Select only dogs and dragons.'}\n    >\n      <Checkbox value=\"dogs\">Dogs</Checkbox>\n      <Checkbox value=\"cats\">Cats</Checkbox>\n      <Checkbox value=\"dragons\">Dragons</Checkbox>\n    </CheckboxGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [\n    checked,\n    setChecked\n  ] = React.useState([\n    'dogs',\n    'dragons'\n  ]);\n  let isValid =\n    checked.length ===\n      2 &&\n    checked.includes(\n      'dogs'\n    ) &&\n    checked.includes(\n      'dragons'\n    );\n\n  return (\n    <CheckboxGroup\n      label=\"Pets\"\n      onChange={setChecked}\n      value={checked}\n      isInvalid={!isValid}\n      description=\"Select your pets.\"\n      errorMessage={checked\n          .includes(\n            'cats'\n          )\n        ? 'No cats allowed.'\n        : 'Select only dogs and dragons.'}\n    >\n      <Checkbox value=\"dogs\">\n        Dogs\n      </Checkbox>\n      <Checkbox value=\"cats\">\n        Cats\n      </Checkbox>\n      <Checkbox value=\"dragons\">\n        Dragons\n      </Checkbox>\n    </CheckboxGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<CheckboxGroup\n  label=\"Favorite genres\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What does this do?</Heading>\n      <Content>\n        Your musical taste is used to train our machine learning\n        recommendation algorithm.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Checkbox value=\"rock\">Rock</Checkbox>\n  <Checkbox value=\"pop\">Pop</Checkbox>\n  <Checkbox value=\"classical\">Classical</Checkbox>\n</CheckboxGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<CheckboxGroup\n  label=\"Favorite genres\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What does this do?</Heading>\n      <Content>\n        Your musical taste is used to train our machine\n        learning recommendation algorithm.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Checkbox value=\"rock\">Rock</Checkbox>\n  <Checkbox value=\"pop\">Pop</Checkbox>\n  <Checkbox value=\"classical\">Classical</Checkbox>\n</CheckboxGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<CheckboxGroup\n  label=\"Favorite genres\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What does this\n        do?\n      </Heading>\n      <Content>\n        Your musical\n        taste is used\n        to train our\n        machine\n        learning\n        recommendation\n        algorithm.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Checkbox value=\"rock\">\n    Rock\n  </Checkbox>\n  <Checkbox value=\"pop\">\n    Pop\n  </Checkbox>\n  <Checkbox value=\"classical\">\n    Classical\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\" isDisabled>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\" isDisabled>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  isDisabled\n>\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\" isDisabled>Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\" isDisabled>Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox\n    value=\"baseball\"\n    isDisabled\n  >\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<CheckboxGroup label=\"Favorite sports\" defaultValue={['baseball']} isReadOnly>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  defaultValue={['baseball']}\n  isReadOnly\n>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  defaultValue={[\n    'baseball'\n  ]}\n  isReadOnly\n>\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  defaultValue={['soccer', 'baseball']}\n  isEmphasized\n>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  defaultValue={['soccer', 'baseball']}\n  isEmphasized\n>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<CheckboxGroup\n  label=\"Favorite sports\"\n  defaultValue={[\n    'soccer',\n    'baseball'\n  ]}\n  isEmphasized\n>\n  <Checkbox value=\"soccer\">\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    Basketball\n  </Checkbox>\n</CheckboxGroup>",
                    "name": "Emphasized#"
                }
            ]
        },
        {
            "name": "Form",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Form.html",
            "examples": [
                {
                    "source": "<Form maxWidth=\"size-3600\">\n  <TextField label=\"Email\" />\n  <TextField label=\"Password\" />\n  <Checkbox>Remember me</Checkbox>\n</Form>",
                    "name": "Example#"
                },
                {
                    "source": "<Form maxWidth=\"size-3600\">\n  <TextField label=\"Email\" />\n  <TextField label=\"Password\" />\n  <Checkbox>Remember me</Checkbox>\n</Form>",
                    "name": "Example#"
                },
                {
                    "source": "<Form maxWidth=\"size-3600\">\n  <TextField label=\"Email\" />\n  <TextField label=\"Password\" />\n  <Checkbox>\n    Remember me\n  </Checkbox>\n</Form>",
                    "name": "Example#"
                },
                {
                    "source": "<Form maxWidth=\"size-3600\" isRequired necessityIndicator=\"label\">\n  <TextField label=\"Name\" />\n  <TextField label=\"Email\" />\n  <TextField label=\"Address\" isRequired={false} />\n</Form>",
                    "name": "Content#"
                },
                {
                    "source": "<Form\n  maxWidth=\"size-3600\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <TextField label=\"Name\" />\n  <TextField label=\"Email\" />\n  <TextField label=\"Address\" isRequired={false} />\n</Form>",
                    "name": "Content#"
                },
                {
                    "source": "<Form\n  maxWidth=\"size-3600\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <TextField label=\"Name\" />\n  <TextField label=\"Email\" />\n  <TextField\n    label=\"Address\"\n    isRequired={false}\n  />\n</Form>",
                    "name": "Content#"
                },
                {
                    "source": "<h3 id=\"label-3\">Personal Information</h3>\n<Form maxWidth=\"size-3600\" aria-labelledby=\"label-3\">\n  <TextField label=\"First Name\" />\n  <TextField label=\"Last Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n    <Radio value=\"dragons\">Dragons</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<h3 id=\"label-3\">Personal Information</h3>\n<Form maxWidth=\"size-3600\" aria-labelledby=\"label-3\">\n  <TextField label=\"First Name\" />\n  <TextField label=\"Last Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n    <Radio value=\"dragons\">Dragons</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<h3 id=\"label-3\">\n  Personal Information\n</h3>\n<Form\n  maxWidth=\"size-3600\"\n  aria-labelledby=\"label-3\"\n>\n  <TextField label=\"First Name\" />\n  <TextField label=\"Last Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n    <Radio value=\"dragons\">\n      Dragons\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Form\n  validationErrors={{ username: 'Sorry, this username is taken.' }}\n  maxWidth=\"size-3000\"\n>\n  <TextField label=\"Username\" name=\"username\" />\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<Form\n  validationErrors={{\n    username: 'Sorry, this username is taken.'\n  }}\n  maxWidth=\"size-3000\"\n>\n  <TextField label=\"Username\" name=\"username\" />\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<Form\n  validationErrors={{\n    username:\n      'Sorry, this username is taken.'\n  }}\n  maxWidth=\"size-3000\"\n>\n  <TextField\n    label=\"Username\"\n    name=\"username\"\n  />\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField label=\"Email\" name=\"email\" type=\"email\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation behavior#"
                },
                {
                    "source": "import {Button, ButtonGroup} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    isRequired\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation behavior#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TextField\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    isRequired\n  />\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation behavior#"
                },
                {
                    "source": "import {InlineAlert, Heading, Content} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [isInvalid, setInvalid] = React.useState(false);\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      onInvalid={e => {\n        e.preventDefault();\n        setInvalid(true);\n      }}      onSubmit={e => {\n        e.preventDefault();\n        setInvalid(false);\n      }}\n      onReset={() => setInvalid(false)}\n      maxWidth=\"size-3600\">\n      {isInvalid &&\n        <InlineAlert variant=\"negative\" autoFocus>          <Heading>Unable to submit</Heading>\n          <Content>\n            Please fix the validation errors below, and re-submit the form.\n          </Content>\n        </InlineAlert>\n      }\n      <TextField label=\"First Name\" isRequired />\n      <TextField label=\"Last Name\" isRequired />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}",
                    "name": "Focus management#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  InlineAlert\n} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [isInvalid, setInvalid] = React.useState(false);\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      onInvalid={(e) => {\n        e.preventDefault();\n        setInvalid(true);\n      }}      onSubmit={(e) => {\n        e.preventDefault();\n        setInvalid(false);\n      }}\n      onReset={() => setInvalid(false)}\n      maxWidth=\"size-3600\"\n    >\n      {isInvalid &&         <InlineAlert variant=\"negative\" autoFocus>          <Heading>Unable to submit</Heading>\n          <Content>\n            Please fix the validation errors below, and\n            re-submit the form.\n          </Content>\n        </InlineAlert>}\n      <TextField label=\"First Name\" isRequired />\n      <TextField label=\"Last Name\" isRequired />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">\n          Submit\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\">\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Focus management#"
                },
                {
                    "source": "import {\n  Content,\n  Heading,\n  InlineAlert\n} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    isInvalid,\n    setInvalid\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      onInvalid={(e) => {\n        e.preventDefault();\n        setInvalid(true);\n      }}      onSubmit={(e) => {\n        e.preventDefault();\n        setInvalid(\n          false\n        );\n      }}\n      onReset={() =>\n        setInvalid(\n          false\n        )}\n      maxWidth=\"size-3600\"\n    >\n      {isInvalid &&         <InlineAlert\n          variant=\"negative\"\n          autoFocus\n        >          <Heading>\n            Unable to\n            submit\n          </Heading>\n          <Content>\n            Please fix\n            the\n            validation\n            errors below,\n            and re-submit\n            the form.\n          </Content>\n        </InlineAlert>}\n      <TextField\n        label=\"First Name\"\n        isRequired\n      />\n      <TextField\n        label=\"Last Name\"\n        isRequired\n      />\n      <ButtonGroup>\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n        <Button\n          type=\"reset\"\n          variant=\"secondary\"\n        >\n          Reset\n        </Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n",
                    "name": "Focus management#"
                },
                {
                    "source": "<Form\n  labelPosition=\"top\"\n  labelAlign=\"start\"\n  aria-label=\"Top position, start alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"top\"\n  labelAlign=\"start\"\n  aria-label=\"Top position, start alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"top\"\n  labelAlign=\"start\"\n  aria-label=\"Top position, start alignment example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"start\"\n  aria-label=\"Side position, start alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"start\"\n  aria-label=\"Side position, start alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"start\"\n  aria-label=\"Side position, start alignment example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  aria-label=\"Side position, end alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  aria-label=\"Side position, end alignment example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  aria-label=\"Side position, end alignment example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<Form\n  isQuiet\n  aria-label=\"Quiet example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <TextField label=\"Address\" />\n</Form>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Form\n  isQuiet\n  aria-label=\"Quiet example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <TextField label=\"Address\" />\n</Form>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Form\n  isQuiet\n  aria-label=\"Quiet example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <TextField label=\"Address\" />\n</Form>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Form\n  isEmphasized\n  aria-label=\"Emphasized example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\"/>\n  <RadioGroup label=\"Favorite pet\" defaultValue=\"dogs\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Form\n  isEmphasized\n  aria-label=\"Emphasized example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\"/>\n  <RadioGroup label=\"Favorite pet\" defaultValue=\"dogs\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Form\n  isEmphasized\n  aria-label=\"Emphasized example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup\n    label=\"Favorite pet\"\n    defaultValue=\"dogs\"\n  >\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Form\n  isDisabled\n  aria-label=\"Disabled example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Form\n  isDisabled\n  aria-label=\"Disabled example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Form\n  isDisabled\n  aria-label=\"Disabled example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Form\n  necessityIndicator=\"label\"\n  aria-label=\"Optional with label example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  necessityIndicator=\"label\"\n  aria-label=\"Optional with label example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  necessityIndicator=\"label\"\n  aria-label=\"Optional with label example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"label\"\n  aria-label=\"Required with label example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"label\"\n  aria-label=\"Required with label example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"label\"\n  aria-label=\"Required with label example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"icon\"\n  aria-label=\"Required with asterisk example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"icon\"\n  aria-label=\"Required with asterisk example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isRequired\n  necessityIndicator=\"icon\"\n  aria-label=\"Required with asterisk example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Required and necessity indicator#"
                },
                {
                    "source": "<Form\n  isReadOnly\n  aria-label=\"isReadOnly example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" value=\"John Smith\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Read only#"
                },
                {
                    "source": "<Form\n  isReadOnly\n  aria-label=\"isReadOnly example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" value=\"John Smith\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Read only#"
                },
                {
                    "source": "<Form\n  isReadOnly\n  aria-label=\"isReadOnly example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField\n    label=\"Name\"\n    value=\"John Smith\"\n  />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Read only#"
                },
                {
                    "source": "<Form\n  validationState=\"invalid\"\n  aria-label=\"Invalid validationState example\"\n  maxWidth=\"size-3600\"\n  marginBottom=\"size-300\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                },
                {
                    "source": "<Form\n  validationState=\"invalid\"\n  aria-label=\"Invalid validationState example\"\n  maxWidth=\"size-3600\"\n  marginBottom=\"size-300\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                },
                {
                    "source": "<Form\n  validationState=\"invalid\"\n  aria-label=\"Invalid validationState example\"\n  maxWidth=\"size-3600\"\n  marginBottom=\"size-300\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                },
                {
                    "source": "<Form\n  validationState=\"valid\"\n  aria-label=\"Valid validationState example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                },
                {
                    "source": "<Form\n  validationState=\"valid\"\n  aria-label=\"Valid validationState example\"\n  maxWidth=\"size-3600\">\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                },
                {
                    "source": "<Form\n  validationState=\"valid\"\n  aria-label=\"Valid validationState example\"\n  maxWidth=\"size-3600\"\n>\n  <TextField label=\"Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">\n      Dogs\n    </Radio>\n    <Radio value=\"cats\">\n      Cats\n    </Radio>\n  </RadioGroup>\n</Form>",
                    "name": "Validation state#"
                }
            ]
        },
        {
            "name": "NumberField",
            "url": "https://react-spectrum.adobe.com/react-spectrum/NumberField.html",
            "examples": [
                {
                    "source": "<NumberField label=\"Width\" defaultValue={1024} minValue={0} />",
                    "name": "Example#"
                },
                {
                    "source": "<NumberField\n  label=\"Width\"\n  defaultValue={1024}\n  minValue={0}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<NumberField\n  label=\"Width\"\n  defaultValue={1024}\n  minValue={0}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(15);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <NumberField\n        label=\"Cookies (Uncontrolled)\"\n        defaultValue={15}\n        minValue={0} />\n\n      <NumberField\n        label=\"Cookies (Controlled)\"\n        value={value}\n        onChange={setValue}\n        minValue={0} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(15);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <NumberField\n        label=\"Cookies (Uncontrolled)\"\n        defaultValue={15}\n        minValue={0} />\n\n      <NumberField\n        label=\"Cookies (Controlled)\"\n        value={value}\n        onChange={setValue}\n        minValue={0} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(15);\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <NumberField\n        label=\"Cookies (Uncontrolled)\"\n        defaultValue={15}\n        minValue={0}\n      />\n\n      <NumberField\n        label=\"Cookies (Controlled)\"\n        value={value}\n        onChange={setValue}\n        minValue={0}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  name=\"amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  name=\"amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  name=\"amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }}\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <NumberField label=\"Cookies\" minValue={0} />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"icon\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"label\"\n    minValue={0}\n  />\n  <NumberField label=\"Cookies\" necessityIndicator=\"label\" minValue={0} />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <NumberField label=\"Cookies\" minValue={0} />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"icon\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"label\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    necessityIndicator=\"label\"\n    minValue={0}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <NumberField\n    label=\"Cookies\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"icon\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    isRequired\n    necessityIndicator=\"label\"\n    minValue={0}\n  />\n  <NumberField\n    label=\"Cookies\"\n    necessityIndicator=\"label\"\n    minValue={0}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<NumberField\n  label=\"Adjust exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0} />",
                    "name": "Decimals#"
                },
                {
                    "source": "<NumberField\n  label=\"Adjust exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0} />",
                    "name": "Decimals#"
                },
                {
                    "source": "<NumberField\n  label=\"Adjust exposure\"\n  formatOptions={{\n    signDisplay:\n      'exceptZero',\n    minimumFractionDigits:\n      1,\n    maximumFractionDigits:\n      2\n  }}\n  defaultValue={0}\n/>",
                    "name": "Decimals#"
                },
                {
                    "source": "<NumberField\n  label=\"Sales tax\"\n  formatOptions={{style: 'percent'}}\n  minValue={0}\n  defaultValue={0.05} />",
                    "name": "Percentages#"
                },
                {
                    "source": "<NumberField\n  label=\"Sales tax\"\n  formatOptions={{style: 'percent'}}\n  minValue={0}\n  defaultValue={0.05} />",
                    "name": "Percentages#"
                },
                {
                    "source": "<NumberField\n  label=\"Sales tax\"\n  formatOptions={{\n    style: 'percent'\n  }}\n  minValue={0}\n  defaultValue={0.05}\n/>",
                    "name": "Percentages#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />",
                    "name": "Currency values#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />",
                    "name": "Currency values#"
                },
                {
                    "source": "<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay:\n      'code',\n    currencySign:\n      'accounting'\n  }}\n/>",
                    "name": "Currency values#"
                },
                {
                    "source": "<NumberField\n  label=\"Package width\"\n  defaultValue={4}\n  minValue={0}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />",
                    "name": "Units#"
                },
                {
                    "source": "<NumberField\n  label=\"Package width\"\n  defaultValue={4}\n  minValue={0}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />",
                    "name": "Units#"
                },
                {
                    "source": "<NumberField\n  label=\"Package width\"\n  defaultValue={4}\n  minValue={0}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />",
                    "name": "Units#"
                },
                {
                    "source": "<NumberField\n  label=\"Enter your age\"\n  minValue={0} />",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<NumberField\n  label=\"Enter your age\"\n  minValue={0} />",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<NumberField\n  label=\"Enter your age\"\n  minValue={0} />",
                    "name": "Minimum and maximum values#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-150\">\n  <NumberField\n    label=\"Step\"\n    step={10} />\n  <NumberField\n    label=\"Step + minValue\"\n    minValue={2}\n    step={3} />\n  <NumberField\n    label=\"Step + minValue + maxValue\"\n    minValue={2}\n    maxValue={21}\n    step={3} />\n</Flex>",
                    "name": "Step values#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-150\">\n  <NumberField\n    label=\"Step\"\n    step={10} />\n  <NumberField\n    label=\"Step + minValue\"\n    minValue={2}\n    step={3} />\n  <NumberField\n    label=\"Step + minValue + maxValue\"\n    minValue={2}\n    maxValue={21}\n    step={3} />\n</Flex>",
                    "name": "Step values#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-150\"\n>\n  <NumberField\n    label=\"Step\"\n    step={10}\n  />\n  <NumberField\n    label=\"Step + minValue\"\n    minValue={2}\n    step={3}\n  />\n  <NumberField\n    label=\"Step + minValue + maxValue\"\n    minValue={2}\n    maxValue={21}\n    step={3}\n  />\n</Flex>",
                    "name": "Step values#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(null);\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <NumberField\n        onChange={setValue}\n        label=\"Number of cookies to buy\"\n        minValue={0} />\n      <pre>How many cookies you are ordering: {isNaN(value) ? 0 : value}</pre>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(null);\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <NumberField\n        onChange={setValue}\n        label=\"Number of cookies to buy\"\n        minValue={0}\n      />\n      <pre>How many cookies you are ordering: {isNaN(value) ? 0 : value}</pre>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(null);\n\n  return (\n    <Flex\n      direction=\"column\"\n      gap=\"size-150\"\n    >\n      <NumberField\n        onChange={setValue}\n        label=\"Number of cookies to buy\"\n        minValue={0}\n      />\n      <pre>How many cookies you are ordering: {isNaN(value) ? 0 : value}</pre>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <NumberField label=\"Width\" name=\"width\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <NumberField label=\"Width\" name=\"width\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <NumberField\n    label=\"Width\"\n    name=\"width\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" isQuiet minValue={0} />",
                    "name": "Quiet#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" isQuiet minValue={0} />",
                    "name": "Quiet#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  isQuiet\n  minValue={0}\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" hideStepper minValue={0} />",
                    "name": "Hidden Steppers#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" hideStepper minValue={0} />",
                    "name": "Hidden Steppers#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  hideStepper\n  minValue={0}\n/>",
                    "name": "Hidden Steppers#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" isDisabled minValue={0} />",
                    "name": "Disabled#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" isDisabled minValue={0} />",
                    "name": "Disabled#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  isDisabled\n  minValue={0}\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" defaultValue={15} isReadOnly minValue={0} />",
                    "name": "Read only#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  defaultValue={15}\n  isReadOnly\n  minValue={0}\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  defaultValue={15}\n  isReadOnly\n  minValue={0}\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  minValue={0}\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  minValue={0}\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n  minValue={0}\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(1);\n  let isValid = React.useMemo(() => value > 0 || Number.isNaN(value), [value]);\n\n  return (\n    <NumberField\n      validationState={Number.isNaN(value)\n        ? undefined\n        : (isValid ? 'valid' : 'invalid')}\n      value={value}\n      onChange={setValue}\n      label=\"Positive numbers only\"\n      description=\"Enter a positive number.\"\n      errorMessage={value === 0\n        ? 'Is zero positive?'\n        : 'Positive numbers are bigger than 0.'}\n    />\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(1);\n  let isValid = React.useMemo(\n    () => value > 0 || Number.isNaN(value),\n    [value]\n  );\n\n  return (\n    <NumberField\n      validationState={Number.isNaN(value)\n        ? undefined\n        : (isValid ? 'valid' : 'invalid')}\n      value={value}\n      onChange={setValue}\n      label=\"Positive numbers only\"\n      description=\"Enter a positive number.\"\n      errorMessage={value === 0\n        ? 'Is zero positive?'\n        : 'Positive numbers are bigger than 0.'}\n    />\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(1);\n  let isValid = React\n    .useMemo(\n      () =>\n        value > 0 ||\n        Number.isNaN(\n          value\n        ),\n      [value]\n    );\n\n  return (\n    <NumberField\n      validationState={Number\n          .isNaN(value)\n        ? undefined\n        : (isValid\n          ? 'valid'\n          : 'invalid')}\n      value={value}\n      onChange={setValue}\n      label=\"Positive numbers only\"\n      description=\"Enter a positive number.\"\n      errorMessage={value ===\n          0\n        ? 'Is zero positive?'\n        : 'Positive numbers are bigger than 0.'}\n    />\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<NumberField\n  label=\"Exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>Exposure adjusts how bright the image is.</Content>\n    </ContextualHelp>\n  } />",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<NumberField\n  label=\"Exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>\n        Exposure adjusts how bright the image is.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<NumberField\n  label=\"Exposure\"\n  formatOptions={{\n    signDisplay:\n      'exceptZero',\n    minimumFractionDigits:\n      1,\n    maximumFractionDigits:\n      2\n  }}\n  defaultValue={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What is\n        exposure?\n      </Heading>\n      <Content>\n        Exposure\n        adjusts how\n        bright the\n        image is.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<NumberField label=\"Cookies\" width=\"size-3600\" maxWidth=\"100%\" minValue={0} />",
                    "name": "Custom width#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n  minValue={0}\n/>",
                    "name": "Custom width#"
                },
                {
                    "source": "<NumberField\n  label=\"Cookies\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n  minValue={0}\n/>",
                    "name": "Custom width#"
                }
            ]
        },
        {
            "name": "RadioGroup",
            "url": "https://react-spectrum.adobe.com/react-spectrum/RadioGroup.html",
            "examples": [
                {
                    "source": "<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>",
                    "name": "Example#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">\n    Dogs\n  </Radio>\n  <Radio value=\"cats\">\n    Cats\n  </Radio>\n</RadioGroup>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('yes');\n\n  return (\n    <Flex gap=\"size-300\">\n      <RadioGroup label=\"Are you a wizard? (uncontrolled)\" defaultValue=\"yes\">\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n\n      <RadioGroup\n        label=\"Are you a wizard? (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('yes');\n\n  return (\n    <Flex gap=\"size-300\">\n      <RadioGroup\n        label=\"Are you a wizard? (uncontrolled)\"\n        defaultValue=\"yes\"\n      >\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n\n      <RadioGroup\n        label=\"Are you a wizard? (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState(\n    'yes'\n  );\n\n  return (\n    <Flex gap=\"size-300\">\n      <RadioGroup\n        label=\"Are you a wizard? (uncontrolled)\"\n        defaultValue=\"yes\"\n      >\n        <Radio value=\"yes\">\n          Yes\n        </Radio>\n        <Radio value=\"no\">\n          No\n        </Radio>\n      </RadioGroup>\n\n      <RadioGroup\n        label=\"Are you a wizard? (controlled)\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"yes\">\n          Yes\n        </Radio>\n        <Radio value=\"no\">\n          No\n        </Radio>\n      </RadioGroup>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite pet\"\n  name=\"pet\"\n>\n  <Radio value=\"dogs\">\n    Dogs\n  </Radio>\n  <Radio value=\"cats\">\n    Cats\n  </Radio>\n</RadioGroup>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <RadioGroup label=\"Favorite avatar\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" isRequired necessityIndicator=\"icon\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" isRequired necessityIndicator=\"label\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" necessityIndicator=\"label\">\n   <Radio value=\"wizard\">Wizard</Radio>\n   <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <RadioGroup label=\"Favorite avatar\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    isRequired\n    necessityIndicator=\"icon\"\n  >\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    isRequired\n    necessityIndicator=\"label\"\n  >\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    necessityIndicator=\"label\"\n  >\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-300\"\n  wrap\n>\n  <RadioGroup label=\"Favorite avatar\">\n    <Radio value=\"wizard\">\n      Wizard\n    </Radio>\n    <Radio value=\"dragon\">\n      Dragon\n    </Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    isRequired\n    necessityIndicator=\"icon\"\n  >\n    <Radio value=\"wizard\">\n      Wizard\n    </Radio>\n    <Radio value=\"dragon\">\n      Dragon\n    </Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    isRequired\n    necessityIndicator=\"label\"\n  >\n    <Radio value=\"wizard\">\n      Wizard\n    </Radio>\n    <Radio value=\"dragon\">\n      Dragon\n    </Radio>\n  </RadioGroup>\n   <RadioGroup\n    label=\"Favorite avatar\"\n    necessityIndicator=\"label\"\n  >\n    <Radio value=\"wizard\">\n      Wizard\n    </Radio>\n    <Radio value=\"dragon\">\n      Dragon\n    </Radio>\n  </RadioGroup>\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('');\n\n  return (\n    <>\n      <RadioGroup\n        label=\"Favorite avatar\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </RadioGroup>\n      <div>You have selected: {selected}</div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('');\n\n  return (\n    <>\n      <RadioGroup\n        label=\"Favorite avatar\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </RadioGroup>\n      <div>You have selected: {selected}</div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState('');\n\n  return (\n    <>\n      <RadioGroup\n        label=\"Favorite avatar\"\n        value={selected}\n        onChange={setSelected}\n      >\n        <Radio value=\"wizard\">\n          Wizard\n        </Radio>\n        <Radio value=\"dragon\">\n          Dragon\n        </Radio>\n      </RadioGroup>\n      <div>\n        You have\n        selected:{' '}\n        {selected}\n      </div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <RadioGroup label=\"Favorite pet\" name=\"pet\" isRequired>    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <RadioGroup label=\"Favorite pet\" name=\"pet\" isRequired>    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <RadioGroup\n    label=\"Favorite pet\"\n    name=\"pet\"\n    isRequired\n  >    <Radio value=\"dogs\">\n      Dog\n    </Radio>\n    <Radio value=\"cats\">\n      Cat\n    </Radio>\n    <Radio value=\"dragon\">\n      Dragon\n    </Radio>\n  </RadioGroup>\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" orientation=\"horizontal\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  orientation=\"horizontal\"\n>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  orientation=\"horizontal\"\n>\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio value=\"dragon\">\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Orientation#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" labelPosition=\"side\" labelAlign=\"end\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio value=\"dragon\">\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Label position and alignment#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('dogs');\n  let isValid = selected === 'dogs';\n\n  return (\n    <RadioGroup\n      aria-label=\"Favorite pet\"\n      onChange={setSelected}\n      isInvalid={!isValid}\n      description=\"Please select a pet.\"\n      errorMessage={\n        selected === 'cats'\n          ? 'No cats allowed.'\n          : 'Please select dogs.'\n      }>\n      <Radio value=\"dogs\">\n        Dogs\n      </Radio>\n      <Radio value=\"cats\">\n        Cats\n      </Radio>\n      <Radio value=\"dragons\">\n        Dragons\n      </Radio>\n    </RadioGroup>\n  );\n}",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelected] = React.useState('dogs');\n  let isValid = selected === 'dogs';\n\n  return (\n    <RadioGroup\n      aria-label=\"Favorite pet\"\n      onChange={setSelected}\n      isInvalid={!isValid}\n      description=\"Please select a pet.\"\n      errorMessage={\n        selected === 'cats'\n          ? 'No cats allowed.'\n          : 'Please select dogs.'\n      }>\n      <Radio value=\"dogs\">\n        Dogs\n      </Radio>\n      <Radio value=\"cats\">\n        Cats\n      </Radio>\n      <Radio value=\"dragons\">\n        Dragons\n      </Radio>\n    </RadioGroup>\n  );\n}",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelected\n  ] = React.useState(\n    'dogs'\n  );\n  let isValid =\n    selected === 'dogs';\n\n  return (\n    <RadioGroup\n      aria-label=\"Favorite pet\"\n      onChange={setSelected}\n      isInvalid={!isValid}\n      description=\"Please select a pet.\"\n      errorMessage={selected ===\n          'cats'\n        ? 'No cats allowed.'\n        : 'Please select dogs.'}\n    >\n      <Radio value=\"dogs\">\n        Dogs\n      </Radio>\n      <Radio value=\"cats\">\n        Cats\n      </Radio>\n      <Radio value=\"dragons\">\n        Dragons\n      </Radio>\n    </RadioGroup>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<RadioGroup\n  label=\"T-shirt size\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Size and fit</Heading>\n      <Content>\n        Our sizes run on the small side. Choose a size up from your usual.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Radio value=\"S\">Small</Radio>\n  <Radio value=\"M\">Medium</Radio>\n  <Radio value=\"L\">Large</Radio>\n</RadioGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<RadioGroup\n  label=\"T-shirt size\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Size and fit</Heading>\n      <Content>\n        Our sizes run on the small side. Choose a size up\n        from your usual.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Radio value=\"S\">Small</Radio>\n  <Radio value=\"M\">Medium</Radio>\n  <Radio value=\"L\">Large</Radio>\n</RadioGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<RadioGroup\n  label=\"T-shirt size\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Size and fit\n      </Heading>\n      <Content>\n        Our sizes run\n        on the small\n        side. Choose a\n        size up from\n        your usual.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Radio value=\"S\">\n    Small\n  </Radio>\n  <Radio value=\"M\">\n    Medium\n  </Radio>\n  <Radio value=\"L\">\n    Large\n  </Radio>\n</RadioGroup>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" isDisabled>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" isDisabled>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  isDisabled\n>\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio value=\"dragon\">\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\" isDisabled>Dragon</Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\" isDisabled>Dragon</Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\">\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio\n    value=\"dragon\"\n    isDisabled\n  >\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" defaultValue=\"wizard\" isReadOnly>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  defaultValue=\"wizard\"\n  isReadOnly\n>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  defaultValue=\"wizard\"\n  isReadOnly\n>\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio value=\"dragon\">\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Read only#"
                },
                {
                    "source": "<RadioGroup label=\"Favorite avatar\" defaultValue=\"dragon\" isEmphasized>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  defaultValue=\"dragon\"\n  isEmphasized\n>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<RadioGroup\n  label=\"Favorite avatar\"\n  defaultValue=\"dragon\"\n  isEmphasized\n>\n  <Radio value=\"wizard\">\n    Wizard\n  </Radio>\n  <Radio value=\"dragon\">\n    Dragon\n  </Radio>\n</RadioGroup>",
                    "name": "Emphasized#"
                }
            ]
        },
        {
            "name": "RangeSlider",
            "url": "https://react-spectrum.adobe.com/react-spectrum/RangeSlider.html",
            "examples": [
                {
                    "source": "<RangeSlider label=\"Range\" defaultValue={{ start: 12, end: 36 }} />",
                    "name": "Example#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  defaultValue={{ start: 12, end: 36 }}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  defaultValue={{\n    start: 12,\n    end: 36\n  }}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState({start: 25, end: 75});\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <RangeSlider\n        label=\"Range (uncontrolled)\"\n        defaultValue={{start: 25, end: 75}} />\n      <RangeSlider\n        label=\"Range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState({\n    start: 25,\n    end: 75\n  });\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <RangeSlider\n        label=\"Range (uncontrolled)\"\n        defaultValue={{ start: 25, end: 75 }}\n      />\n      <RangeSlider\n        label=\"Range (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState({\n      start: 25,\n      end: 75\n    });\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <RangeSlider\n        label=\"Range (uncontrolled)\"\n        defaultValue={{\n          start: 25,\n          end: 75\n        }}\n      />\n      <RangeSlider\n        label=\"Range (controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={{start: 75, end: 100}} />",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={{start: 75, end: 100}} />",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={{\n    start: 75,\n    end: 100\n  }}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price range\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={{start: 75, end: 100}} />",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price range\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={{start: 75, end: 100}} />",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price range\"\n  formatOptions={{\n    style: 'currency',\n    currency: 'JPY'\n  }}\n  defaultValue={{\n    start: 75,\n    end: 100\n  }}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  defaultValue={{start: 12, end: 36}}\n  startName=\"start\"\n  endName=\"end\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  defaultValue={{start: 12, end: 36}}\n  startName=\"start\"\n  endName=\"end\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Range\"\n  defaultValue={{\n    start: 12,\n    end: 36\n  }}\n  startName=\"start\"\n  endName=\"end\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-5000\" gap=\"size-300\">\n  <RangeSlider\n    label=\"Jeans price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    defaultValue={{ start: 75, end: 100 }}\n  />\n  <RangeSlider\n    label=\"Shoes price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    labelPosition=\"side\"\n    defaultValue={{ start: 50, end: 100 }}\n  />\n  <RangeSlider\n    label=\"Hats price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    showValueLabel={false}\n    defaultValue={{ start: 15, end: 30 }}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-5000\"\n  gap=\"size-300\"\n>\n  <RangeSlider\n    label=\"Jeans price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    defaultValue={{ start: 75, end: 100 }}\n  />\n  <RangeSlider\n    label=\"Shoes price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    labelPosition=\"side\"\n    defaultValue={{ start: 50, end: 100 }}\n  />\n  <RangeSlider\n    label=\"Hats price range\"\n    formatOptions={{ style: 'currency', currency: 'USD' }}\n    showValueLabel={false}\n    defaultValue={{ start: 15, end: 30 }}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-5000\"\n  gap=\"size-300\"\n>\n  <RangeSlider\n    label=\"Jeans price range\"\n    formatOptions={{\n      style:\n        'currency',\n      currency: 'USD'\n    }}\n    defaultValue={{\n      start: 75,\n      end: 100\n    }}\n  />\n  <RangeSlider\n    label=\"Shoes price range\"\n    formatOptions={{\n      style:\n        'currency',\n      currency: 'USD'\n    }}\n    labelPosition=\"side\"\n    defaultValue={{\n      start: 50,\n      end: 100\n    }}\n  />\n  <RangeSlider\n    label=\"Hats price range\"\n    formatOptions={{\n      style:\n        'currency',\n      currency: 'USD'\n    }}\n    showValueLabel={false}\n    defaultValue={{\n      start: 15,\n      end: 30\n    }}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <RangeSlider\n    label=\"Level range\"\n    showValueLabel={false}\n    defaultValue={{start: 75, end: 100}} />\n\n  <RangeSlider\n    label=\"Cacao percentage\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{style: 'percent', minimumFractionDigits: 1}}\n    defaultValue={{start: .75, end: 1}} />\n\n  <RangeSlider\n    label=\"Search radius\"\n    maxValue={200}\n    getValueLabel={meters => `${meters.start}m to ${meters.end}m away`}\n    defaultValue={{start: 15, end: 60}} />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <RangeSlider\n    label=\"Level range\"\n    showValueLabel={false}\n    defaultValue={{ start: 75, end: 100 }}\n  />\n   <RangeSlider\n    label=\"Cacao percentage\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits: 1\n    }}\n    defaultValue={{ start: .75, end: 1 }}\n  />\n   <RangeSlider\n    label=\"Search radius\"\n    maxValue={200}\n    getValueLabel={(meters) =>\n      `${meters.start}m to ${meters.end}m away`}\n    defaultValue={{ start: 15, end: 60 }}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <RangeSlider\n    label=\"Level range\"\n    showValueLabel={false}\n    defaultValue={{\n      start: 75,\n      end: 100\n    }}\n  />\n   <RangeSlider\n    label=\"Cacao percentage\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits:\n        1\n    }}\n    defaultValue={{\n      start: .75,\n      end: 1\n    }}\n  />\n   <RangeSlider\n    label=\"Search radius\"\n    maxValue={200}\n    getValueLabel={(meters) =>\n      `${meters.start}m to ${meters.end}m away`}\n    defaultValue={{\n      start: 15,\n      end: 60\n    }}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<RangeSlider\n  label=\"Search radius\"\n  formatOptions={{style: 'unit', unit: 'mile'}}\n  defaultValue={{start: 15, end: 60}}\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Ranking</Heading>\n      <Content>Search results are sorted by distance from city center.</Content>\n    </ContextualHelp>\n  } />",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<RangeSlider\n  label=\"Search radius\"\n  formatOptions={{ style: 'unit', unit: 'mile' }}\n  defaultValue={{ start: 15, end: 60 }}\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Ranking</Heading>\n      <Content>\n        Search results are sorted by distance from city\n        center.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<RangeSlider\n  label=\"Search radius\"\n  formatOptions={{\n    style: 'unit',\n    unit: 'mile'\n  }}\n  defaultValue={{\n    start: 15,\n    end: 60\n  }}\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Ranking\n      </Heading>\n      <Content>\n        Search results\n        are sorted by\n        distance from\n        city center.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price filter\"\n  defaultValue={{ start: 25, end: 50 }}\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price filter\"\n  defaultValue={{ start: 25, end: 50 }}\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<RangeSlider\n  label=\"Price filter\"\n  defaultValue={{\n    start: 25,\n    end: 50\n  }}\n  isDisabled\n/>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "SearchField",
            "url": "https://react-spectrum.adobe.com/react-spectrum/SearchField.html",
            "examples": [
                {
                    "source": "function Example() {\n  let [submittedText, setSubmittedText] = React.useState(null);\n\n  return (\n    <>\n      <SearchField\n        label=\"Search\"\n        onSubmit={setSubmittedText} />\n      <p>Submitted text: {submittedText}</p>\n    </>\n  );\n}",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [submittedText, setSubmittedText] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <SearchField\n        label=\"Search\"\n        onSubmit={setSubmittedText}\n      />\n      <p>Submitted text: {submittedText}</p>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [\n    submittedText,\n    setSubmittedText\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <SearchField\n        label=\"Search\"\n        onSubmit={setSubmittedText}\n      />\n      <p>\n        Submitted text:\n        {' '}\n        {submittedText}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [searchValue, setSearchValue] = React.useState('puppies');\n  return (\n    <Flex gap=\"size-300\">\n      <SearchField\n        defaultValue=\"puppies\"\n        label=\"Search (uncontrolled)\" />\n\n      <SearchField\n        value={searchValue}\n        onChange={setSearchValue}\n        label=\"Search (controlled)\" />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [searchValue, setSearchValue] = React.useState(\n    'puppies'\n  );\n  return (\n    <Flex gap=\"size-300\">\n      <SearchField\n        defaultValue=\"puppies\"\n        label=\"Search (uncontrolled)\"\n      />\n\n      <SearchField\n        value={searchValue}\n        onChange={setSearchValue}\n        label=\"Search (controlled)\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [\n    searchValue,\n    setSearchValue\n  ] = React.useState(\n    'puppies'\n  );\n  return (\n    <Flex gap=\"size-300\">\n      <SearchField\n        defaultValue=\"puppies\"\n        label=\"Search (uncontrolled)\"\n      />\n\n      <SearchField\n        value={searchValue}\n        onChange={setSearchValue}\n        label=\"Search (controlled)\"\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<SearchField label=\"Email\" name=\"email\" type=\"email\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<SearchField label=\"Email\" name=\"email\" type=\"email\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<SearchField\n  label=\"Email\"\n  name=\"email\"\n  type=\"email\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <SearchField label=\"Search\" />\n  <SearchField label=\"Search\" isRequired necessityIndicator=\"icon\" />\n  <SearchField label=\"Search\" isRequired necessityIndicator=\"label\" />\n  <SearchField label=\"Search\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-300\" wrap>\n  <SearchField label=\"Search\" />\n  <SearchField\n    label=\"Search\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <SearchField\n    label=\"Search\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <SearchField\n    label=\"Search\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-300\"\n  wrap\n>\n  <SearchField label=\"Search\" />\n  <SearchField\n    label=\"Search\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <SearchField\n    label=\"Search\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <SearchField\n    label=\"Search\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [currentText, setCurrentText] = React.useState('');\n  let [submittedText, setSubmittedText] = React.useState('');\n\n  return (\n    <div>\n      <SearchField\n        onClear={() => setCurrentText('')}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <pre>Mirrored text: {currentText}</pre>\n      <pre>Submitted text: {submittedText}</pre>\n    </div>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [currentText, setCurrentText] = React.useState('');\n  let [submittedText, setSubmittedText] = React.useState(\n    ''\n  );\n\n  return (\n    <div>\n      <SearchField\n        onClear={() => setCurrentText('')}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <pre>Mirrored text: {currentText}</pre>\n      <pre>Submitted text: {submittedText}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    currentText,\n    setCurrentText\n  ] = React.useState('');\n  let [\n    submittedText,\n    setSubmittedText\n  ] = React.useState('');\n\n  return (\n    <div>\n      <SearchField\n        onClear={() =>\n          setCurrentText(\n            ''\n          )}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <pre>Mirrored text: {currentText}</pre>\n      <pre>Submitted text: {submittedText}</pre>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <SearchField label=\"Search\" name=\"search\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <SearchField label=\"Search\" name=\"search\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <SearchField\n    label=\"Search\"\n    name=\"search\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<SearchField label=\"Search\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<SearchField label=\"Search\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<SearchField label=\"Search\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<SearchField label=\"Search\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<SearchField label=\"Search\" defaultValue=\"abc@adobe.com\" isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<SearchField label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <SearchField\n    label=\"Search\"\n    defaultValue=\"Burritos\"\n    validationState=\"valid\"\n    description=\"Enter a query.\"\n  />\n  <SearchField\n    label=\"Search\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <SearchField\n    label=\"Search\"\n    defaultValue=\"Burritos\"\n    validationState=\"valid\"\n    description=\"Enter a query.\"\n  />\n  <SearchField\n    label=\"Search\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <SearchField\n    label=\"Search\"\n    defaultValue=\"Burritos\"\n    validationState=\"valid\"\n    description=\"Enter a query.\"\n  />\n  <SearchField\n    label=\"Search\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<SearchField\n  label=\"Search\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Search tips</Heading>\n      <Content>\n        You can use modifiers like \"date:\" and \"from:\" to search by specific\n        attributes.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<SearchField\n  label=\"Search\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Search tips</Heading>\n      <Content>\n        You can use modifiers like \"date:\" and \"from:\" to\n        search by specific attributes.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<SearchField\n  label=\"Search\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Search tips\n      </Heading>\n      <Content>\n        You can use\n        modifiers like\n        \"date:\" and\n        \"from:\" to\n        search by\n        specific\n        attributes.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<SearchField label=\"Search\" width=\"size-3600\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<SearchField label=\"Search\" width=\"size-3600\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<SearchField\n  label=\"Search\"\n  width=\"size-3600\"\n/>",
                    "name": "Custom width#"
                },
                {
                    "source": "<SearchField label=\"Search for users\" icon={<User />} />",
                    "name": "Custom icon#"
                },
                {
                    "source": "<SearchField label=\"Search for users\" icon={<User />} />",
                    "name": "Custom icon#"
                },
                {
                    "source": "<SearchField\n  label=\"Search for users\"\n  icon={<User />}\n/>",
                    "name": "Custom icon#"
                }
            ]
        },
        {
            "name": "Slider",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Slider.html",
            "examples": [
                {
                    "source": "<Slider label=\"Cookies to buy\" defaultValue={12} />",
                    "name": "Example#"
                },
                {
                    "source": "<Slider label=\"Cookies to buy\" defaultValue={12} />",
                    "name": "Example#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to buy\"\n  defaultValue={12}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Slider\n        label=\"Cookies to buy (Uncontrolled)\"\n        defaultValue={25} />\n      <Slider\n        label=\"Cookies to buy (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Slider\n        label=\"Cookies to buy (Uncontrolled)\"\n        defaultValue={25} />\n      <Slider\n        label=\"Cookies to buy (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(25);\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <Slider\n        label=\"Cookies to buy (Uncontrolled)\"\n        defaultValue={25}\n      />\n      <Slider\n        label=\"Cookies to buy (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Currency\"\n  formatOptions={{\n    style: 'currency',\n    currency: 'JPY'\n  }}\n  defaultValue={60}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<Slider\n  label=\"Opacity\"\n  defaultValue={50}\n  name=\"opacity\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Slider\n  label=\"Opacity\"\n  defaultValue={50}\n  name=\"opacity\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Slider\n  label=\"Opacity\"\n  defaultValue={50}\n  name=\"opacity\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-5000\" gap=\"size-300\">\n  <Slider label=\"Cookies to buy\" defaultValue={25} />\n  <Slider label=\"Donuts to buy\" labelPosition=\"side\" defaultValue={25} />\n  <Slider label=\"Pastries to buy\" showValueLabel={false} defaultValue={25} />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-5000\"\n  gap=\"size-300\"\n>\n  <Slider label=\"Cookies to buy\" defaultValue={25} />\n  <Slider\n    label=\"Donuts to buy\"\n    labelPosition=\"side\"\n    defaultValue={25}\n  />\n  <Slider\n    label=\"Pastries to buy\"\n    showValueLabel={false}\n    defaultValue={25}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-5000\"\n  gap=\"size-300\"\n>\n  <Slider\n    label=\"Cookies to buy\"\n    defaultValue={25}\n  />\n  <Slider\n    label=\"Donuts to buy\"\n    labelPosition=\"side\"\n    defaultValue={25}\n  />\n  <Slider\n    label=\"Pastries to buy\"\n    showValueLabel={false}\n    defaultValue={25}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Slider\n    label=\"Cookies to buy\"\n    showValueLabel={false}\n    defaultValue={90} />\n  <Slider\n    label=\"Percent donus eaten\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{style: 'percent', minimumFractionDigits: 1}}\n    defaultValue={0.891} />\n  <Slider\n    label=\"Donuts to buy\"\n    maxValue={60}\n    getValueLabel={donuts => `${donuts} of 60 Donuts`} />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Slider\n    label=\"Cookies to buy\"\n    showValueLabel={false}\n    defaultValue={90}\n  />\n  <Slider\n    label=\"Percent donus eaten\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits: 1\n    }}\n    defaultValue={0.891}\n  />\n  <Slider\n    label=\"Donuts to buy\"\n    maxValue={60}\n    getValueLabel={(donuts) => `${donuts} of 60 Donuts`}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Slider\n    label=\"Cookies to buy\"\n    showValueLabel={false}\n    defaultValue={90}\n  />\n  <Slider\n    label=\"Percent donus eaten\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits:\n        1\n    }}\n    defaultValue={0.891}\n  />\n  <Slider\n    label=\"Donuts to buy\"\n    maxValue={60}\n    getValueLabel={(donuts) =>\n      `${donuts} of 60 Donuts`}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Slider\n    label=\"Opacity\"\n    maxValue={1}\n    formatOptions={{ style: 'percent' }}\n    defaultValue={0.9}\n    step={0.01}\n    isFilled\n  />\n  <Slider\n    label=\"Exposure\"\n    minValue={-5}\n    maxValue={5}\n    defaultValue={1.83}\n    formatOptions={{ signDisplay: 'always' }}\n    step={0.01}\n    fillOffset={0}\n    isFilled\n  />\n</Flex>",
                    "name": "Fill#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Slider\n    label=\"Opacity\"\n    maxValue={1}\n    formatOptions={{ style: 'percent' }}\n    defaultValue={0.9}\n    step={0.01}\n    isFilled\n  />\n  <Slider\n    label=\"Exposure\"\n    minValue={-5}\n    maxValue={5}\n    defaultValue={1.83}\n    formatOptions={{ signDisplay: 'always' }}\n    step={0.01}\n    fillOffset={0}\n    isFilled\n  />\n</Flex>",
                    "name": "Fill#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <Slider\n    label=\"Opacity\"\n    maxValue={1}\n    formatOptions={{\n      style: 'percent'\n    }}\n    defaultValue={0.9}\n    step={0.01}\n    isFilled\n  />\n  <Slider\n    label=\"Exposure\"\n    minValue={-5}\n    maxValue={5}\n    defaultValue={1.83}\n    formatOptions={{\n      signDisplay:\n        'always'\n    }}\n    step={0.01}\n    fillOffset={0}\n    isFilled\n  />\n</Flex>",
                    "name": "Fill#"
                },
                {
                    "source": "<Slider\n  label=\"Filter density\"\n  trackGradient={['white', 'rgba(177,141,32,1)']}\n  defaultValue={.3}\n  maxValue={1}\n  step={0.01}\n  formatOptions={{ style: 'percent' }}\n  isFilled\n/>",
                    "name": "Gradient#"
                },
                {
                    "source": "<Slider\n  label=\"Filter density\"\n  trackGradient={['white', 'rgba(177,141,32,1)']}\n  defaultValue={.3}\n  maxValue={1}\n  step={0.01}\n  formatOptions={{ style: 'percent' }}\n  isFilled\n/>",
                    "name": "Gradient#"
                },
                {
                    "source": "<Slider\n  label=\"Filter density\"\n  trackGradient={[\n    'white',\n    'rgba(177,141,32,1)'\n  ]}\n  defaultValue={.3}\n  maxValue={1}\n  step={0.01}\n  formatOptions={{\n    style: 'percent'\n  }}\n  isFilled\n/>",
                    "name": "Gradient#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<Slider\n  label=\"Exposure\"\n  minValue={-100}\n  maxValue={100}\n  defaultValue={0}\n  formatOptions={{signDisplay: 'always'}}\n  isFilled\n  fillOffset={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>Exposure adjusts how bright the image is.</Content>\n    </ContextualHelp>\n  } />",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<Slider\n  label=\"Exposure\"\n  minValue={-100}\n  maxValue={100}\n  defaultValue={0}\n  formatOptions={{ signDisplay: 'always' }}\n  isFilled\n  fillOffset={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>\n        Exposure adjusts how bright the image is.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<Slider\n  label=\"Exposure\"\n  minValue={-100}\n  maxValue={100}\n  defaultValue={0}\n  formatOptions={{\n    signDisplay:\n      'always'\n  }}\n  isFilled\n  fillOffset={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What is\n        exposure?\n      </Heading>\n      <Content>\n        Exposure\n        adjusts how\n        bright the\n        image is.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<Slider label=\"Cookies to share\" defaultValue={25} isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to share\"\n  defaultValue={25}\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Slider\n  label=\"Cookies to share\"\n  defaultValue={25}\n  isDisabled\n/>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "Switch",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Switch.html",
            "examples": [
                {
                    "source": "<Switch>Low power mode</Switch>",
                    "name": "Example#"
                },
                {
                    "source": "<Switch>Low power mode</Switch>",
                    "name": "Example#"
                },
                {
                    "source": "<Switch>\n  Low power mode\n</Switch>",
                    "name": "Example#"
                },
                {
                    "source": "<Switch aria-label=\"Low power mode\" />",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Switch aria-label=\"Low power mode\" />",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Switch aria-label=\"Low power mode\" />",
                    "name": "Accessibility#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <Switch\n        defaultSelected>\n        Low power mode (uncontrolled)\n      </Switch>\n\n      <Switch\n        isSelected={selected}\n        onChange={setSelection}>\n        Low power mode (controlled)\n      </Switch>\n    </>\n  )\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <Switch\n        defaultSelected>\n        Low power mode (uncontrolled)\n      </Switch>\n\n      <Switch\n        isSelected={selected}\n        onChange={setSelection}>\n        Low power mode (controlled)\n      </Switch>\n    </>\n  )\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelection\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <Switch\n        defaultSelected\n      >\n        Low power mode\n        (uncontrolled)\n      </Switch>\n\n      <Switch\n        isSelected={selected}\n        onChange={setSelection}\n      >\n        Low power mode\n        (controlled)\n      </Switch>\n    </>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<Switch name=\"power\" value=\"low\">Low power mode</Switch>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Switch name=\"power\" value=\"low\">Low power mode</Switch>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Switch\n  name=\"power\"\n  value=\"low\"\n>\n  Low power mode\n</Switch>",
                    "name": "HTML forms#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <Switch onChange={setSelection}>\n        Switch Label\n      </Switch>\n      <div>The Switch is on: {selected.toString()}</div>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <Switch onChange={setSelection}>\n        Switch Label\n      </Switch>\n      <div>The Switch is on: {selected.toString()}</div>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [\n    selected,\n    setSelection\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <Switch\n        onChange={setSelection}\n      >\n        Switch Label\n      </Switch>\n      <div>\n        The Switch is on:\n        {' '}\n        {selected\n          .toString()}\n      </div>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<Switch isDisabled>Switch Label</Switch>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Switch isDisabled>Switch Label</Switch>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Switch isDisabled>\n  Switch Label\n</Switch>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Switch isEmphasized defaultSelected>Switch Label</Switch>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Switch isEmphasized defaultSelected>Switch Label</Switch>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Switch\n  isEmphasized\n  defaultSelected\n>\n  Switch Label\n</Switch>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Switch isReadOnly isSelected>Switch Label</Switch>",
                    "name": "Read only#"
                },
                {
                    "source": "<Switch isReadOnly isSelected>Switch Label</Switch>",
                    "name": "Read only#"
                },
                {
                    "source": "<Switch\n  isReadOnly\n  isSelected\n>\n  Switch Label\n</Switch>",
                    "name": "Read only#"
                }
            ]
        },
        {
            "name": "TextArea",
            "url": "https://react-spectrum.adobe.com/react-spectrum/TextArea.html",
            "examples": [
                {
                    "source": "<TextArea label=\"Description\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TextArea label=\"Description\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TextArea label=\"Description\" />",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState('This is on a wait list');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextArea\n        label=\"Notes (Uncontrolled)\"\n        defaultValue=\"This is on a wait list\" />\n\n      <TextArea\n        label=\"Notes (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState(\n    'This is on a wait list'\n  );\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextArea\n        label=\"Notes (Uncontrolled)\"\n        defaultValue=\"This is on a wait list\"\n      />\n\n      <TextArea\n        label=\"Notes (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(\n      'This is on a wait list'\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <TextArea\n        label=\"Notes (Uncontrolled)\"\n        defaultValue=\"This is on a wait list\"\n      />\n\n      <TextArea\n        label=\"Notes (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<TextArea label=\"Comment\" name=\"comment\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TextArea label=\"Comment\" name=\"comment\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TextArea\n  label=\"Comment\"\n  name=\"comment\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TextArea label=\"Address\" />\n  <TextArea label=\"Address\" isRequired necessityIndicator=\"icon\" />\n  <TextArea label=\"Address\" isRequired necessityIndicator=\"label\" />\n  <TextArea label=\"Address\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TextArea label=\"Address\" />\n  <TextArea\n    label=\"Address\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TextArea\n    label=\"Address\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TextArea label=\"Address\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <TextArea label=\"Address\" />\n  <TextArea\n    label=\"Address\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TextArea\n    label=\"Address\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TextArea\n    label=\"Address\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\">\n      <TextArea\n        onChange={setText}\n        label=\"Your text\"\n      />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\">\n      <TextArea\n        onChange={setText}\n        label=\"Your text\"\n      />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] =\n    React.useState('');\n\n  return (\n    <Flex direction=\"column\">\n      <TextArea\n        onChange={setText}\n        label=\"Your text\"\n      />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextArea label=\"Comment\" name=\"comment\" isRequired minLength={10} />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextArea\n    label=\"Comment\"\n    name=\"comment\"\n    isRequired\n    minLength={10}\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TextArea\n    label=\"Comment\"\n    name=\"comment\"\n    isRequired\n    minLength={10}\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<TextArea label=\"Email\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextArea label=\"Email\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextArea\n  label=\"Email\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextArea label=\"Email\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextArea label=\"Email\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextArea\n  label=\"Email\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextArea label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<TextArea\n  label=\"Email\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TextArea\n  label=\"Email\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TextArea label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TextArea\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TextArea\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TextArea\n    label=\"Comment\"\n    defaultValue=\"Awesome!\"\n    validationState=\"valid\"\n    description=\"Enter a comment.\"\n  />\n  <TextArea\n    label=\"Comment\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TextArea\n    label=\"Comment\"\n    defaultValue=\"Awesome!\"\n    validationState=\"valid\"\n    description=\"Enter a comment.\"\n  />\n  <TextArea\n    label=\"Comment\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <TextArea\n    label=\"Comment\"\n    defaultValue=\"Awesome!\"\n    validationState=\"valid\"\n    description=\"Enter a comment.\"\n  />\n  <TextArea\n    label=\"Comment\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TextArea\n  label=\"Comment\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Comment tips</Heading>\n      <Content>\n        Comments will be screened prior to being published. Please be nice!\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TextArea\n  label=\"Comment\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Comment tips</Heading>\n      <Content>\n        Comments will be screened prior to being\n        published. Please be nice!\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TextArea\n  label=\"Comment\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Comment tips\n      </Heading>\n      <Content>\n        Comments will\n        be screened\n        prior to being\n        published.\n        Please be nice!\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<TextArea label=\"Email\" width=\"size-3600\" maxWidth=\"100%\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<TextArea label=\"Email\" width=\"size-3600\" maxWidth=\"100%\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<TextArea\n  label=\"Email\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n/>",
                    "name": "Custom width#"
                }
            ]
        },
        {
            "name": "TextField",
            "url": "https://react-spectrum.adobe.com/react-spectrum/TextField.html",
            "examples": [
                {
                    "source": "<TextField label=\"Name\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TextField label=\"Name\" />",
                    "name": "Example#"
                },
                {
                    "source": "<TextField label=\"Name\" />",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState('me@email.com');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextField\n        label=\"Email (Uncontrolled)\"\n        defaultValue=\"me@email.com\" />\n\n      <TextField\n        label=\"Email (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] = React.useState('me@email.com');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextField\n        label=\"Email (Uncontrolled)\"\n        defaultValue=\"me@email.com\" />\n\n      <TextField\n        label=\"Email (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let [value, setValue] =\n    React.useState(\n      'me@email.com'\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <TextField\n        label=\"Email (Uncontrolled)\"\n        defaultValue=\"me@email.com\"\n      />\n\n      <TextField\n        label=\"Email (Controlled)\"\n        value={value}\n        onChange={setValue}\n      />\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "<TextField label=\"Email\" name=\"email\" type=\"email\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TextField label=\"Email\" name=\"email\" type=\"email\" />",
                    "name": "HTML forms#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  name=\"email\"\n  type=\"email\"\n/>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TextField label=\"Street address\" />\n  <TextField label=\"Street address\" isRequired necessityIndicator=\"icon\" />\n  <TextField label=\"Street address\" isRequired necessityIndicator=\"label\" />\n  <TextField label=\"Street address\" necessityIndicator=\"label\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex gap=\"size-150\" wrap>\n  <TextField label=\"Street address\" />\n  <TextField\n    label=\"Street address\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TextField\n    label=\"Street address\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TextField\n    label=\"Street address\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  gap=\"size-150\"\n  wrap\n>\n  <TextField label=\"Street address\" />\n  <TextField\n    label=\"Street address\"\n    isRequired\n    necessityIndicator=\"icon\"\n  />\n  <TextField\n    label=\"Street address\"\n    isRequired\n    necessityIndicator=\"label\"\n  />\n  <TextField\n    label=\"Street address\"\n    necessityIndicator=\"label\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <TextField\n        onChange={setText}\n        label=\"Your text\" />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <TextField\n        onChange={setText}\n        label=\"Your text\" />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [text, setText] =\n    React.useState('');\n\n  return (\n    <Flex\n      direction=\"column\"\n      gap=\"size-150\"\n    >\n      <TextField\n        onChange={setText}\n        label=\"Your text\"\n      />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField label=\"Email\" name=\"email\" type=\"email\" isRequired />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    isRequired\n  />  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <TextField\n    label=\"Email\"\n    name=\"email\"\n    type=\"email\"\n    isRequired\n  />  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<TextField label=\"Email\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextField label=\"Email\" isQuiet />",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  isQuiet\n/>",
                    "name": "Quiet#"
                },
                {
                    "source": "<TextField label=\"Email\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextField label=\"Email\" isDisabled />",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<TextField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />",
                    "name": "Read only#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  defaultValue=\"abc@adobe.com\"\n  isReadOnly\n/>",
                    "name": "Read only#"
                },
                {
                    "source": "<TextField label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TextField\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<TextField\n  label=\"Search\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TextField\n    label=\"Name\"\n    defaultValue=\"John\"\n    validationState=\"valid\"\n    description=\"Enter your name.\"\n  />\n  <TextField\n    label=\"Name\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <TextField\n    label=\"Name\"\n    defaultValue=\"John\"\n    validationState=\"valid\"\n    description=\"Enter your name.\"\n  />\n  <TextField\n    label=\"Name\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <TextField\n    label=\"Name\"\n    defaultValue=\"John\"\n    validationState=\"valid\"\n    description=\"Enter your name.\"\n  />\n  <TextField\n    label=\"Name\"\n    validationState=\"invalid\"\n    errorMessage=\"Empty input is not allowed.\"\n  />\n</Flex>",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TextField\n  label=\"Password\"\n  type=\"password\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>Need help?</Heading>\n      <Content>\n        If you're having trouble accessing your account, contact our customer\n        support team for help.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TextField\n  label=\"Password\"\n  type=\"password\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>Need help?</Heading>\n      <Content>\n        If you're having trouble accessing your account,\n        contact our customer support team for help.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<TextField\n  label=\"Password\"\n  type=\"password\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        Need help?\n      </Heading>\n      <Content>\n        If you're\n        having trouble\n        accessing your\n        account,\n        contact our\n        customer\n        support team\n        for help.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<TextField label=\"Email\" width=\"size-3600\" maxWidth=\"100%\" />",
                    "name": "Custom width#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n/>",
                    "name": "Custom width#"
                },
                {
                    "source": "<TextField\n  label=\"Email\"\n  width=\"size-3600\"\n  maxWidth=\"100%\"\n/>",
                    "name": "Custom width#"
                }
            ]
        }
    ],
    "Icons": [
        {
            "name": "Custom Icons",
            "url": "https://react-spectrum.adobe.com/react-spectrum/custom-icons.html",
            "examples": [
                {
                    "source": "function CustomIcon(props) {\n  return (\n    <Icon {...props}>\n      <svg viewBox=\"0 0 36 36\">\n        <path d=\"M18.477.593,22.8,12.029l12.212.578a.51.51,0,0,1,.3.908l-9.54,7.646,3.224,11.793a.51.51,0,0,1-.772.561L18,26.805,7.78,33.515a.51.51,0,0,1-.772-.561l3.224-11.793L.692,13.515a.51.51,0,0,1,.3-.908L13.2,12.029,17.523.593A.51.51,0,0,1,18.477.593Z\" />\n      </svg>\n    </Icon>\n  );\n}\n\n<CustomIcon aria-label=\"Star\" />",
                    "name": "Example#"
                },
                {
                    "source": "function CustomIcon(props) {\n  return (\n    <Icon {...props}>\n      <svg viewBox=\"0 0 36 36\">\n        <path d=\"M18.477.593,22.8,12.029l12.212.578a.51.51,0,0,1,.3.908l-9.54,7.646,3.224,11.793a.51.51,0,0,1-.772.561L18,26.805,7.78,33.515a.51.51,0,0,1-.772-.561l3.224-11.793L.692,13.515a.51.51,0,0,1,.3-.908L13.2,12.029,17.523.593A.51.51,0,0,1,18.477.593Z\" />\n      </svg>\n    </Icon>\n  );\n}\n\n<CustomIcon aria-label=\"Star\" />",
                    "name": "Example#"
                },
                {
                    "source": "function CustomIcon(\n  props\n) {\n  return (\n    <Icon {...props}>\n      <svg viewBox=\"0 0 36 36\">\n        <path d=\"M18.477.593,22.8,12.029l12.212.578a.51.51,0,0,1,.3.908l-9.54,7.646,3.224,11.793a.51.51,0,0,1-.772.561L18,26.805,7.78,33.515a.51.51,0,0,1-.772-.561l3.224-11.793L.692,13.515a.51.51,0,0,1,.3-.908L13.2,12.029,17.523.593A.51.51,0,0,1,18.477.593Z\" />\n      </svg>\n    </Icon>\n  );\n}\n\n<CustomIcon aria-label=\"Star\" />",
                    "name": "Example#"
                },
                {
                    "source": "import {Button, Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <CustomIcon />\n  <Text>Favorite</Text>\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "import {Button, Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <CustomIcon />\n  <Text>Favorite</Text>\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  Button,\n  Text\n} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <CustomIcon />\n  <Text>Favorite</Text>\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"XXS Star\" size=\"XXS\" />\n  <CustomIcon aria-label=\"XS Star\" size=\"XS\" />\n  <CustomIcon aria-label=\"S Star\" size=\"S\" />\n  <CustomIcon aria-label=\"M Star\" size=\"M\" />\n  <CustomIcon aria-label=\"L Star\" size=\"L\" />\n  <CustomIcon aria-label=\"XL Star\" size=\"XL\" />\n  <CustomIcon aria-label=\"XXL Star\" size=\"XXL\" />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"XXS Star\" size=\"XXS\" />\n  <CustomIcon aria-label=\"XS Star\" size=\"XS\" />\n  <CustomIcon aria-label=\"S Star\" size=\"S\" />\n  <CustomIcon aria-label=\"M Star\" size=\"M\" />\n  <CustomIcon aria-label=\"L Star\" size=\"L\" />\n  <CustomIcon aria-label=\"XL Star\" size=\"XL\" />\n  <CustomIcon aria-label=\"XXL Star\" size=\"XXL\" />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon\n    aria-label=\"XXS Star\"\n    size=\"XXS\"\n  />\n  <CustomIcon\n    aria-label=\"XS Star\"\n    size=\"XS\"\n  />\n  <CustomIcon\n    aria-label=\"S Star\"\n    size=\"S\"\n  />\n  <CustomIcon\n    aria-label=\"M Star\"\n    size=\"M\"\n  />\n  <CustomIcon\n    aria-label=\"L Star\"\n    size=\"L\"\n  />\n  <CustomIcon\n    aria-label=\"XL Star\"\n    size=\"XL\"\n  />\n  <CustomIcon\n    aria-label=\"XXL Star\"\n    size=\"XXL\"\n  />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"Default Star\" />\n  <CustomIcon aria-label=\"Negative Star\" color=\"negative\" />\n  <CustomIcon aria-label=\"Notification Star\" color=\"notice\" />\n  <CustomIcon aria-label=\"Positive Star\" color=\"positive\" />\n  <CustomIcon aria-label=\"Informative Star\" color=\"informative\" />\n</Flex>",
                    "name": "Coloring#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"Default Star\" />\n  <CustomIcon\n    aria-label=\"Negative Star\"\n    color=\"negative\"\n  />\n  <CustomIcon\n    aria-label=\"Notification Star\"\n    color=\"notice\"\n  />\n  <CustomIcon\n    aria-label=\"Positive Star\"\n    color=\"positive\"\n  />\n  <CustomIcon\n    aria-label=\"Informative Star\"\n    color=\"informative\"\n  />\n</Flex>",
                    "name": "Coloring#"
                },
                {
                    "source": "<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"Default Star\" />\n  <CustomIcon\n    aria-label=\"Negative Star\"\n    color=\"negative\"\n  />\n  <CustomIcon\n    aria-label=\"Notification Star\"\n    color=\"notice\"\n  />\n  <CustomIcon\n    aria-label=\"Positive Star\"\n    color=\"positive\"\n  />\n  <CustomIcon\n    aria-label=\"Informative Star\"\n    color=\"informative\"\n  />\n</Flex>",
                    "name": "Coloring#"
                }
            ]
        },
        {
            "name": "Workflow Icons",
            "url": "https://react-spectrum.adobe.com/react-spectrum/workflow-icons.html",
            "examples": [
                {
                    "source": "import Airplane from '@spectrum-icons/workflow/Airplane';\n\n<Airplane aria-label=\"Airplane\" />",
                    "name": "Example#"
                },
                {
                    "source": "import Airplane from '@spectrum-icons/workflow/Airplane';\n\n<Airplane aria-label=\"Airplane\" />",
                    "name": "Example#"
                },
                {
                    "source": "import Airplane from '@spectrum-icons/workflow/Airplane';\n\n<Airplane aria-label=\"Airplane\" />",
                    "name": "Example#"
                },
                {
                    "source": "import Beaker from '@spectrum-icons/workflow/Beaker';\n\n<Flex gap=\"size-100\">\n  <Beaker aria-label=\"XXS Beaker\" size=\"XXS\" />\n  <Beaker aria-label=\"XS Beaker\" size=\"XS\" />\n  <Beaker aria-label=\"S Beaker\" size=\"S\" />\n  <Beaker aria-label=\"M Beaker\" size=\"M\" />\n  <Beaker aria-label=\"L Beaker\" size=\"L\" />\n  <Beaker aria-label=\"XL Beaker\" size=\"XL\" />\n  <Beaker aria-label=\"XXL Beaker\" size=\"XXL\" />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "import Beaker from '@spectrum-icons/workflow/Beaker';\n\n<Flex gap=\"size-100\">\n  <Beaker aria-label=\"XXS Beaker\" size=\"XXS\" />\n  <Beaker aria-label=\"XS Beaker\" size=\"XS\" />\n  <Beaker aria-label=\"S Beaker\" size=\"S\" />\n  <Beaker aria-label=\"M Beaker\" size=\"M\" />\n  <Beaker aria-label=\"L Beaker\" size=\"L\" />\n  <Beaker aria-label=\"XL Beaker\" size=\"XL\" />\n  <Beaker aria-label=\"XXL Beaker\" size=\"XXL\" />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "import Beaker from '@spectrum-icons/workflow/Beaker';\n\n<Flex gap=\"size-100\">\n  <Beaker\n    aria-label=\"XXS Beaker\"\n    size=\"XXS\"\n  />\n  <Beaker\n    aria-label=\"XS Beaker\"\n    size=\"XS\"\n  />\n  <Beaker\n    aria-label=\"S Beaker\"\n    size=\"S\"\n  />\n  <Beaker\n    aria-label=\"M Beaker\"\n    size=\"M\"\n  />\n  <Beaker\n    aria-label=\"L Beaker\"\n    size=\"L\"\n  />\n  <Beaker\n    aria-label=\"XL Beaker\"\n    size=\"XL\"\n  />\n  <Beaker\n    aria-label=\"XXL Beaker\"\n    size=\"XXL\"\n  />\n</Flex>",
                    "name": "Sizing#"
                },
                {
                    "source": "import Alert from '@spectrum-icons/workflow/Alert';\n\n<Flex gap=\"size-100\">\n  <Alert aria-label=\"Default Alert\" />\n  <Alert aria-label=\"Negative Alert\" color=\"negative\" />\n  <Alert aria-label=\"Notification Alert\" color=\"notice\" />\n  <Alert aria-label=\"Positive Alert\" color=\"positive\" />\n  <Alert aria-label=\"Informative Alert\" color=\"informative\" />\n</Flex>",
                    "name": "Coloring#"
                },
                {
                    "source": "import Alert from '@spectrum-icons/workflow/Alert';\n\n<Flex gap=\"size-100\">\n  <Alert aria-label=\"Default Alert\" />\n  <Alert aria-label=\"Negative Alert\" color=\"negative\" />\n  <Alert aria-label=\"Notification Alert\" color=\"notice\" />\n  <Alert aria-label=\"Positive Alert\" color=\"positive\" />\n  <Alert\n    aria-label=\"Informative Alert\"\n    color=\"informative\"\n  />\n</Flex>",
                    "name": "Coloring#"
                },
                {
                    "source": "import Alert from '@spectrum-icons/workflow/Alert';\n\n<Flex gap=\"size-100\">\n  <Alert aria-label=\"Default Alert\" />\n  <Alert\n    aria-label=\"Negative Alert\"\n    color=\"negative\"\n  />\n  <Alert\n    aria-label=\"Notification Alert\"\n    color=\"notice\"\n  />\n  <Alert\n    aria-label=\"Positive Alert\"\n    color=\"positive\"\n  />\n  <Alert\n    aria-label=\"Informative Alert\"\n    color=\"informative\"\n  />\n</Flex>",
                    "name": "Coloring#"
                },
                {
                    "source": "import LockClosed from '@spectrum-icons/workflow/LockClosed';\n\n<LockClosed aria-label=\"Locked\" />",
                    "name": "Labeling#"
                },
                {
                    "source": "import LockClosed from '@spectrum-icons/workflow/LockClosed';\n\n<LockClosed aria-label=\"Locked\" />",
                    "name": "Labeling#"
                },
                {
                    "source": "import LockClosed from '@spectrum-icons/workflow/LockClosed';\n\n<LockClosed aria-label=\"Locked\" />",
                    "name": "Labeling#"
                }
            ]
        }
    ],
    "Navigation": [
        {
            "name": "Breadcrumbs",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Breadcrumbs.html",
            "examples": [
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Example#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Example#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n  <Item key=\"march 2020 assets\">\n    March 2020 Assets\n  </Item>\n</Breadcrumbs>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let folders = [\n    {id: 1, label: 'Home'},\n    {id: 2, label: 'Trendy'},\n    {id: 3, label: 'March 2020 Assets'}\n  ];\n  let [folderId, setFolderId] = React.useState(null);\n  return (\n    <div>\n      <Breadcrumbs onAction={(a) => setFolderId(a)}>\n        {folders.map(f => <Item key={f.id}>{f.label}</Item>)}\n      </Breadcrumbs>\n      <p>You pressed folder ID: {folderId}</p>\n    </div>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let folders = [\n    { id: 1, label: 'Home' },\n    { id: 2, label: 'Trendy' },\n    { id: 3, label: 'March 2020 Assets' }\n  ];\n  let [folderId, setFolderId] = React.useState(null);\n  return (\n    <div>\n      <Breadcrumbs onAction={(a) => setFolderId(a)}>\n        {folders.map((f) => (\n          <Item key={f.id}>{f.label}</Item>\n        ))}\n      </Breadcrumbs>\n      <p>You pressed folder ID: {folderId}</p>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let folders = [\n    {\n      id: 1,\n      label: 'Home'\n    },\n    {\n      id: 2,\n      label: 'Trendy'\n    },\n    {\n      id: 3,\n      label:\n        'March 2020 Assets'\n    }\n  ];\n  let [\n    folderId,\n    setFolderId\n  ] = React.useState(\n    null\n  );\n  return (\n    <div>\n      <Breadcrumbs\n        onAction={(a) =>\n          setFolderId(a)}\n      >\n        {folders.map(\n          (f) => (\n            <Item\n              key={f.id}\n            >\n              {f.label}\n            </Item>\n          )\n        )}\n      </Breadcrumbs>\n      <p>\n        You pressed\n        folder ID:{' '}\n        {folderId}\n      </p>\n    </div>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item href=\"/\">Home</Item>\n  <Item href=\"/react-spectrum/\">React Spectrum</Item>\n  <Item href=\"/react-spectrum/Breadcrumbs.html\">Breadcrumbs</Item>\n</Breadcrumbs>",
                    "name": "Links#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item href=\"/\">Home</Item>\n  <Item href=\"/react-spectrum/\">React Spectrum</Item>\n  <Item href=\"/react-spectrum/Breadcrumbs.html\">\n    Breadcrumbs\n  </Item>\n</Breadcrumbs>",
                    "name": "Links#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item href=\"/\">\n    Home\n  </Item>\n  <Item href=\"/react-spectrum/\">\n    React Spectrum\n  </Item>\n  <Item href=\"/react-spectrum/Breadcrumbs.html\">\n    Breadcrumbs\n  </Item>\n</Breadcrumbs>",
                    "name": "Links#"
                },
                {
                    "source": "<Breadcrumbs size=\"S\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"S\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"S\">\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"M\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"M\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"M\">\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"L\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"L\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs size=\"L\">\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n</Breadcrumbs>",
                    "name": "Size#"
                },
                {
                    "source": "<Breadcrumbs isMultiline>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Multiline#"
                },
                {
                    "source": "<Breadcrumbs isMultiline>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Multiline#"
                },
                {
                    "source": "<Breadcrumbs\n  isMultiline\n>\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n  <Item key=\"march 2020 assets\">\n    March 2020 Assets\n  </Item>\n</Breadcrumbs>",
                    "name": "Multiline#"
                },
                {
                    "source": "<View overflow=\"hidden\" width=\"200px\">\n  <Breadcrumbs showRoot>\n    <Item key=\"home\">Home</Item>\n    <Item key=\"trendy\">Trendy</Item>\n    <Item key=\"2020 assets\">March 2020 Assets</Item>\n    <Item key=\"winter\">Winter</Item>\n    <Item key=\"holiday\">Holiday</Item>\n  </Breadcrumbs>\n</View>",
                    "name": "Root context#"
                },
                {
                    "source": "<View overflow=\"hidden\" width=\"200px\">\n  <Breadcrumbs showRoot>\n    <Item key=\"home\">Home</Item>\n    <Item key=\"trendy\">Trendy</Item>\n    <Item key=\"2020 assets\">March 2020 Assets</Item>\n    <Item key=\"winter\">Winter</Item>\n    <Item key=\"holiday\">Holiday</Item>\n  </Breadcrumbs>\n</View>",
                    "name": "Root context#"
                },
                {
                    "source": "<View\n  overflow=\"hidden\"\n  width=\"200px\"\n>\n  <Breadcrumbs\n    showRoot\n  >\n    <Item key=\"home\">\n      Home\n    </Item>\n    <Item key=\"trendy\">\n      Trendy\n    </Item>\n    <Item key=\"2020 assets\">\n      March 2020 Assets\n    </Item>\n    <Item key=\"winter\">\n      Winter\n    </Item>\n    <Item key=\"holiday\">\n      Holiday\n    </Item>\n  </Breadcrumbs>\n</View>",
                    "name": "Root context#"
                },
                {
                    "source": "<Breadcrumbs isDisabled>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Breadcrumbs isDisabled>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Breadcrumbs\n  isDisabled\n>\n  <Item key=\"home\">\n    Home\n  </Item>\n  <Item key=\"trendy\">\n    Trendy\n  </Item>\n  <Item key=\"march 2020 assets\">\n    March 2020 Assets\n  </Item>\n</Breadcrumbs>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">North America Spring Catalogue</Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">\n    Downloaded Screenshots and Assets (approval required)\n  </Item>\n  <Item key=\"streetwear\">Streetwear</Item>\n  <Item key=\"jackets\">Jackets</Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">\n    North America Spring Catalogue\n  </Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">\n    Downloaded Screenshots and Assets (approval required)\n  </Item>\n  <Item key=\"streetwear\">Streetwear</Item>\n  <Item key=\"jackets\">Jackets</Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                },
                {
                    "source": "<Breadcrumbs>\n  <Item key=\"shared\">\n    My Shared Documents\n  </Item>\n  <Item key=\"catalogue\">\n    North America\n    Spring Catalogue\n  </Item>\n  <Item key=\"march 2020\">\n    March 2020\n  </Item>\n  <Item key=\"assets\">\n    Downloaded\n    Screenshots and\n    Assets (approval\n    required)\n  </Item>\n  <Item key=\"streetwear\">\n    Streetwear\n  </Item>\n  <Item key=\"jackets\">\n    Jackets\n  </Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                },
                {
                    "source": "<Breadcrumbs showRoot>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">North America Spring Catalogue</Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">\n    Downloaded Screenshots and Assets (approval required)\n  </Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                },
                {
                    "source": "<Breadcrumbs showRoot>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">\n    North America Spring Catalogue\n  </Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">\n    Downloaded Screenshots and Assets (approval required)\n  </Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                },
                {
                    "source": "<Breadcrumbs showRoot>\n  <Item key=\"shared\">\n    My Shared Documents\n  </Item>\n  <Item key=\"catalogue\">\n    North America\n    Spring Catalogue\n  </Item>\n  <Item key=\"march 2020\">\n    March 2020\n  </Item>\n  <Item key=\"assets\">\n    Downloaded\n    Screenshots and\n    Assets (approval\n    required)\n  </Item>\n</Breadcrumbs>",
                    "name": "Visible items (overflow behavior)#"
                }
            ]
        },
        {
            "name": "Link",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Link.html",
            "examples": [
                {
                    "source": "<Link href=\"https://www.imdb.com/title/tt6348138/\" target=\"_blank\">\n  The missing link.\n</Link>",
                    "name": "Example#"
                },
                {
                    "source": "<Link\n  href=\"https://www.imdb.com/title/tt6348138/\"\n  target=\"_blank\"\n>\n  The missing link.\n</Link>",
                    "name": "Example#"
                },
                {
                    "source": "<Link\n  href=\"https://www.imdb.com/title/tt6348138/\"\n  target=\"_blank\"\n>\n  The missing link.\n</Link>",
                    "name": "Example#"
                },
                {
                    "source": "<Link href=\"https://adobe.com\" target=\"_blank\">Adobe.com</Link>",
                    "name": "Content#"
                },
                {
                    "source": "<Link href=\"https://adobe.com\" target=\"_blank\">\n  Adobe.com\n</Link>",
                    "name": "Content#"
                },
                {
                    "source": "<Link\n  href=\"https://adobe.com\"\n  target=\"_blank\"\n>\n  Adobe.com\n</Link>",
                    "name": "Content#"
                },
                {
                    "source": "<Link onPress={() => alert('Pressed link')}>Adobe</Link>",
                    "name": "JavaScript handled links#"
                },
                {
                    "source": "<Link onPress={() => alert('Pressed link')}>Adobe</Link>",
                    "name": "JavaScript handled links#"
                },
                {
                    "source": "<Link\n  onPress={() =>\n    alert(\n      'Pressed link'\n    )}\n>\n  Adobe\n</Link>",
                    "name": "JavaScript handled links#"
                },
                {
                    "source": "<Link onPress={e => alert(`clicked \"${e.target.textContent}\" Link`)}>\n  I forgot my password\n</Link>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Link\n  onPress={(e) =>\n    alert(`clicked \"${e.target.textContent}\" Link`)}\n>\n  I forgot my password\n</Link>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Link\n  onPress={(e) =>\n    alert(\n      `clicked \"${e.target.textContent}\" Link`\n    )}\n>\n  I forgot my password\n</Link>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<p>\n  Would you like to <Link variant=\"primary\">learn more</Link>{' '}\n  about this fine component?\n</p>",
                    "name": "Primary#"
                },
                {
                    "source": "<p>\n  Would you like to{' '}\n  <Link variant=\"primary\">learn more</Link>{' '}\n  about this fine component?\n</p>",
                    "name": "Primary#"
                },
                {
                    "source": "<p>\n  Would you like to\n  {' '}\n  <Link variant=\"primary\">\n    learn more\n  </Link>{' '}\n  about this fine\n  component?\n</p>",
                    "name": "Primary#"
                },
                {
                    "source": "<p>\n  Would you like to <Link variant=\"secondary\">learn more</Link>{' '}\n  about this fine component?\n</p>",
                    "name": "Secondary#"
                },
                {
                    "source": "<p>\n  Would you like to{' '}\n  <Link variant=\"secondary\">learn more</Link>{' '}\n  about this fine component?\n</p>",
                    "name": "Secondary#"
                },
                {
                    "source": "<p>\n  Would you like to\n  {' '}\n  <Link variant=\"secondary\">\n    learn more\n  </Link>{' '}\n  about this fine\n  component?\n</p>",
                    "name": "Secondary#"
                },
                {
                    "source": "<View backgroundColor=\"positive\" padding=\"size-300\">\n  <Link variant=\"overBackground\">Learn more here!</Link>\n</View>",
                    "name": "Over background#"
                },
                {
                    "source": "<View backgroundColor=\"positive\" padding=\"size-300\">\n  <Link variant=\"overBackground\">Learn more here!</Link>\n</View>",
                    "name": "Over background#"
                },
                {
                    "source": "<View\n  backgroundColor=\"positive\"\n  padding=\"size-300\"\n>\n  <Link variant=\"overBackground\">\n    Learn more here!\n  </Link>\n</View>",
                    "name": "Over background#"
                },
                {
                    "source": "<p>\n  Would you like to <Link isQuiet>learn more</Link> about this fine component?\n</p>",
                    "name": "Quiet#"
                },
                {
                    "source": "<p>\n  Would you like to <Link isQuiet>learn more</Link>{' '}\n  about this fine component?\n</p>",
                    "name": "Quiet#"
                },
                {
                    "source": "<p>\n  Would you like to\n  {' '}\n  <Link isQuiet>\n    learn more\n  </Link>{' '}\n  about this fine\n  component?\n</p>",
                    "name": "Quiet#"
                }
            ]
        },
        {
            "name": "Tabs",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Tabs.html",
            "examples": [
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">Founding of Rome</Item>\n    <Item key=\"MaR\">Monarchy and Republic</Item>\n    <Item key=\"Emp\">Empire</Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Example#"
                },
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">Founding of Rome</Item>\n    <Item key=\"MaR\">Monarchy and Republic</Item>\n    <Item key=\"Emp\">Empire</Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Example#"
                },
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">\n      Founding of Rome\n    </Item>\n    <Item key=\"MaR\">\n      Monarchy and\n      Republic\n    </Item>\n    <Item key=\"Emp\">\n      Empire\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque\n      cano, Troiae qui\n      primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus\n      Populusque\n      Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Example#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let tabs = [\n    {\n      id: 1,\n      name: 'Founding of Rome',\n      children: 'Arma virumque cano, Troiae qui primus ab oris.'\n    },\n    {\n      id: 2,\n      name: 'Monarchy and Republic',\n      children: 'Senatus Populusque Romanus.'\n    },\n    { id: 3, name: 'Empire', children: 'Alea jacta est.' }\n  ];\n  type Tab = typeof tabs[0];\n  let [tabId, setTabId] = React.useState<Key>(1);\n\n  return (\n    <>\n      <p>Current tab id: {tabId}</p>\n      <Tabs\n        aria-label=\"History of Ancient Rome\"\n        items={tabs}\n        onSelectionChange={setTabId}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let tabs = [\n    {\n      id: 1,\n      name: 'Founding of Rome',\n      children:\n        'Arma virumque cano, Troiae qui primus ab oris.'\n    },\n    {\n      id: 2,\n      name: 'Monarchy and Republic',\n      children: 'Senatus Populusque Romanus.'\n    },\n    { id: 3, name: 'Empire', children: 'Alea jacta est.' }\n  ];\n  type Tab = typeof tabs[0];\n  let [tabId, setTabId] = React.useState<Key>(1);\n\n  return (\n    <>\n      <p>Current tab id: {tabId}</p>\n      <Tabs\n        aria-label=\"History of Ancient Rome\"\n        items={tabs}\n        onSelectionChange={setTabId}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let tabs = [\n    {\n      id: 1,\n      name:\n        'Founding of Rome',\n      children:\n        'Arma virumque cano, Troiae qui primus ab oris.'\n    },\n    {\n      id: 2,\n      name:\n        'Monarchy and Republic',\n      children:\n        'Senatus Populusque Romanus.'\n    },\n    {\n      id: 3,\n      name: 'Empire',\n      children:\n        'Alea jacta est.'\n    }\n  ];\n  type Tab =\n    typeof tabs[0];\n  let [tabId, setTabId] =\n    React.useState<Key>(\n      1\n    );\n\n  return (\n    <>\n      <p>\n        Current tab id:\n        {' '}\n        {tabId}\n      </p>\n      <Tabs\n        aria-label=\"History of Ancient Rome\"\n        items={tabs}\n        onSelectionChange={setTabId}\n      >\n        <TabList>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item\n                .children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\"><Bookmark /><Text>Founding of Rome</Text></Item>\n    <Item key=\"MaR\"><Calendar /><Text>Monarchy and Republic</Text></Item>\n    <Item key=\"Emp\"><Dashboard /><Text>Empire</Text></Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Icons in tabs#"
                },
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">\n      <Bookmark />\n      <Text>Founding of Rome</Text>\n    </Item>\n    <Item key=\"MaR\">\n      <Calendar />\n      <Text>Monarchy and Republic</Text>\n    </Item>\n    <Item key=\"Emp\">\n      <Dashboard />\n      <Text>Empire</Text>\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Icons in tabs#"
                },
                {
                    "source": "<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">\n      <Bookmark />\n      <Text>\n        Founding of\n        Rome\n      </Text>\n    </Item>\n    <Item key=\"MaR\">\n      <Calendar />\n      <Text>\n        Monarchy and\n        Republic\n      </Text>\n    </Item>\n    <Item key=\"Emp\">\n      <Dashboard />\n      <Text>\n        Empire\n      </Text>\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque\n      cano, Troiae qui\n      primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus\n      Populusque\n      Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Icons in tabs#"
                },
                {
                    "source": "function Example() {\n  let [tabs, setTabs] = React.useState([\n    { name: 'Tab 1', children: 'Tab Body 1' },\n    { name: 'Tab 2', children: 'Tab Body 2' },\n    { name: 'Tab 3', children: 'Tab Body 3' }\n  ]);\n  type Tab = typeof tabs[0];\n\n  let addTab = () => {\n    let newTabs = [...tabs];\n    newTabs.push({\n      name: `Tab ${tabs.length + 1}`,\n      children: `Tab Body ${tabs.length + 1}`\n    });\n\n    setTabs(newTabs);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      let newTabs = [...tabs];\n      newTabs.pop();\n      setTabs(newTabs);\n    }\n  };\n\n  return (\n    <Tabs aria-label=\"Tab example\" items={tabs}>\n      <Flex>\n        <TabList flex=\"1 1 auto\" minWidth=\"0px\">\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <div\n          style={{\n            display: 'flex',\n            flex: '0 0 auto',\n            borderBottom:\n              'var(--spectrum-alias-border-size-thick) solid var(--spectrum-global-color-gray-300)'\n          }}\n        >\n          <ActionGroup\n            disabledKeys={tabs.length === 1 ? ['remove'] : undefined}\n            onAction={(val) => val === 'add' ? addTab() : removeTab()}\n          >\n            <Item key=\"add\">\n              Add Tab\n            </Item>\n            <Item key=\"remove\">\n              Remove Tab\n            </Item>\n          </ActionGroup>\n        </div>\n      </Flex>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Customizing layout#"
                },
                {
                    "source": "function Example() {\n  let [tabs, setTabs] = React.useState([\n    { name: 'Tab 1', children: 'Tab Body 1' },\n    { name: 'Tab 2', children: 'Tab Body 2' },\n    { name: 'Tab 3', children: 'Tab Body 3' }\n  ]);\n  type Tab = typeof tabs[0];\n\n  let addTab = () => {\n    let newTabs = [...tabs];\n    newTabs.push({\n      name: `Tab ${tabs.length + 1}`,\n      children: `Tab Body ${tabs.length + 1}`\n    });\n\n    setTabs(newTabs);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      let newTabs = [...tabs];\n      newTabs.pop();\n      setTabs(newTabs);\n    }\n  };\n\n  return (\n    <Tabs aria-label=\"Tab example\" items={tabs}>\n      <Flex>\n        <TabList flex=\"1 1 auto\" minWidth=\"0px\">\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <div\n          style={{\n            display: 'flex',\n            flex: '0 0 auto',\n            borderBottom:\n              'var(--spectrum-alias-border-size-thick) solid var(--spectrum-global-color-gray-300)'\n          }}\n        >\n          <ActionGroup\n            disabledKeys={tabs.length === 1\n              ? ['remove']\n              : undefined}\n            onAction={(val) =>\n              val === 'add' ? addTab() : removeTab()}\n          >\n            <Item key=\"add\">\n              Add Tab\n            </Item>\n            <Item key=\"remove\">\n              Remove Tab\n            </Item>\n          </ActionGroup>\n        </div>\n      </Flex>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Customizing layout#"
                },
                {
                    "source": "function Example() {\n  let [tabs, setTabs] =\n    React.useState([\n      {\n        name: 'Tab 1',\n        children:\n          'Tab Body 1'\n      },\n      {\n        name: 'Tab 2',\n        children:\n          'Tab Body 2'\n      },\n      {\n        name: 'Tab 3',\n        children:\n          'Tab Body 3'\n      }\n    ]);\n  type Tab =\n    typeof tabs[0];\n\n  let addTab = () => {\n    let newTabs = [\n      ...tabs\n    ];\n    newTabs.push({\n      name: `Tab ${\n        tabs.length + 1\n      }`,\n      children:\n        `Tab Body ${\n          tabs.length + 1\n        }`\n    });\n\n    setTabs(newTabs);\n  };\n\n  let removeTab = () => {\n    if (\n      tabs.length > 1\n    ) {\n      let newTabs = [\n        ...tabs\n      ];\n      newTabs.pop();\n      setTabs(newTabs);\n    }\n  };\n\n  return (\n    <Tabs\n      aria-label=\"Tab example\"\n      items={tabs}\n    >\n      <Flex>\n        <TabList\n          flex=\"1 1 auto\"\n          minWidth=\"0px\"\n        >\n          {(\n            item: Tab\n          ) => (\n            <Item\n              key={item\n                .name}\n            >\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <div\n          style={{\n            display:\n              'flex',\n            flex:\n              '0 0 auto',\n            borderBottom:\n              'var(--spectrum-alias-border-size-thick) solid var(--spectrum-global-color-gray-300)'\n          }}\n        >\n          <ActionGroup\n            disabledKeys={tabs\n                .length ===\n                1\n              ? [\n                'remove'\n              ]\n              : undefined}\n            onAction={(val) =>\n              val ===\n                  'add'\n                ? addTab()\n                : removeTab()}\n          >\n            <Item key=\"add\">\n              Add Tab\n            </Item>\n            <Item key=\"remove\">\n              Remove Tab\n            </Item>\n          </ActionGroup>\n        </div>\n      </Flex>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item\n              .children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Customizing layout#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    { id: 1, name: 'Keyboard Settings', children: 'No keyboard detected.' },\n    { id: 2, name: 'Mouse Settings', children: 'No mouse detected.' },\n    { id: 3, name: 'Gamepad Settings', children: 'No gamepad detected' }\n  ];\n  type Tab = typeof tabs[0];\n  let [tab, setTab] = React.useState<Key>(2);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <span id=\"label-2\">Settings (uncontrolled)</span>\n      <Tabs\n        aria-labelledby=\"label-2\"\n        items={tabs}\n        defaultSelectedKey={2}\n        marginBottom=\"size-400\"\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n      <span id=\"label-3\">Settings (controlled)</span>\n      <Tabs\n        aria-labelledby=\"label-3\"\n        items={tabs}\n        selectedKey={tab}\n        onSelectionChange={setTab}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      id: 1,\n      name: 'Keyboard Settings',\n      children: 'No keyboard detected.'\n    },\n    {\n      id: 2,\n      name: 'Mouse Settings',\n      children: 'No mouse detected.'\n    },\n    {\n      id: 3,\n      name: 'Gamepad Settings',\n      children: 'No gamepad detected'\n    }\n  ];\n  type Tab = typeof tabs[0];\n  let [tab, setTab] = React.useState<Key>(2);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <span id=\"label-2\">Settings (uncontrolled)</span>\n      <Tabs\n        aria-labelledby=\"label-2\"\n        items={tabs}\n        defaultSelectedKey={2}\n        marginBottom=\"size-400\"\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n      <span id=\"label-3\">Settings (controlled)</span>\n      <Tabs\n        aria-labelledby=\"label-3\"\n        items={tabs}\n        selectedKey={tab}\n        onSelectionChange={setTab}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      id: 1,\n      name:\n        'Keyboard Settings',\n      children:\n        'No keyboard detected.'\n    },\n    {\n      id: 2,\n      name:\n        'Mouse Settings',\n      children:\n        'No mouse detected.'\n    },\n    {\n      id: 3,\n      name:\n        'Gamepad Settings',\n      children:\n        'No gamepad detected'\n    }\n  ];\n  type Tab =\n    typeof tabs[0];\n  let [tab, setTab] =\n    React.useState<Key>(\n      2\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <span id=\"label-2\">\n        Settings\n        (uncontrolled)\n      </span>\n      <Tabs\n        aria-labelledby=\"label-2\"\n        items={tabs}\n        defaultSelectedKey={2}\n        marginBottom=\"size-400\"\n      >\n        <TabList>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item\n                .children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n      <span id=\"label-3\">\n        Settings\n        (controlled)\n      </span>\n      <Tabs\n        aria-labelledby=\"label-3\"\n        items={tabs}\n        selectedKey={tab}\n        onSelectionChange={setTab}\n      >\n        <TabList>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(\n            item: Tab\n          ) => (\n            <Item>\n              {item\n                .children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab = typeof tabs[0];\n  let [timePeriod, setTimePeriod] = React.useState<Key>('Triassic');\n\n  return (\n    <>\n      <p>Selected time period: {timePeriod}</p>\n      <Tabs\n        aria-label=\"Mesozoic time periods\"\n        items={tabs}\n        selectedKey={timePeriod}\n        onSelectionChange={setTimePeriod}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab = typeof tabs[0];\n  let [timePeriod, setTimePeriod] = React.useState<Key>(\n    'Triassic'\n  );\n\n  return (\n    <>\n      <p>Selected time period: {timePeriod}</p>\n      <Tabs\n        aria-label=\"Mesozoic time periods\"\n        items={tabs}\n        selectedKey={timePeriod}\n        onSelectionChange={setTimePeriod}\n      >\n        <TabList>\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab =\n    typeof tabs[0];\n  let [\n    timePeriod,\n    setTimePeriod\n  ] = React.useState<\n    Key\n  >('Triassic');\n\n  return (\n    <>\n      <p>\n        Selected time\n        period:{' '}\n        {timePeriod}\n      </p>\n      <Tabs\n        aria-label=\"Mesozoic time periods\"\n        items={tabs}\n        selectedKey={timePeriod}\n        onSelectionChange={setTimePeriod}\n      >\n        <TabList>\n          {(\n            item: Tab\n          ) => (\n            <Item\n              key={item\n                .name}\n            >\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(\n            item: Tab\n          ) => (\n            <Item\n              key={item\n                .name}\n            >\n              {item\n                .children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab = typeof tabs[0];\n\n  return (\n    <Tabs\n      aria-label=\"Mesozoic time periods\"\n      items={tabs}\n      keyboardActivation=\"manual\"\n    >\n      <TabList>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.name}\n          </Item>\n        )}\n      </TabList>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Keyboard Activation#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab = typeof tabs[0];\n\n  return (\n    <Tabs\n      aria-label=\"Mesozoic time periods\"\n      items={tabs}\n      keyboardActivation=\"manual\"\n    >\n      <TabList>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.name}\n          </Item>\n        )}\n      </TabList>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Keyboard Activation#"
                },
                {
                    "source": "function Example() {\n  let tabs = [\n    {\n      name: 'Triassic',\n      children:\n        'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'\n    },\n    {\n      name: 'Jurassic',\n      children:\n        'The Jurassic ranges from 200 million years to 145 million years ago.'\n    },\n    {\n      name: 'Cretaceous',\n      children:\n        'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'\n    }\n  ];\n  type Tab =\n    typeof tabs[0];\n\n  return (\n    <Tabs\n      aria-label=\"Mesozoic time periods\"\n      items={tabs}\n      keyboardActivation=\"manual\"\n    >\n      <TabList>\n        {(item: Tab) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </TabList>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item\n              .children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n",
                    "name": "Keyboard Activation#"
                },
                {
                    "source": "import {BrowserRouter, Outlet, Route, Routes, useLocation, useNavigate} from 'react-router-dom';\nimport {RouterProvider} from '@adobe/react-spectrum';\n\nfunction AppTabs() {\n  let { pathname } = useLocation();\n\n  return (\n    <Tabs selectedKey={pathname}>\n      <TabList aria-label=\"Tabs\">\n        <Item key=\"/\" href=\"/\">Home</Item>\n        <Item key=\"/shared\" href=\"/shared\">Shared</Item>\n        <Item key=\"/deleted\" href=\"/deleted\">Deleted</Item>\n      </TabList>\n      <TabPanels>\n        <Item key=\"/\">\n          <Outlet />\n        </Item>\n        <Item key=\"/shared\">\n          <Outlet />\n        </Item>\n        <Item key=\"/deleted\">\n          <Outlet />\n        </Item>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nfunction App() {\n  let navigate = useNavigate();\n  return (\n    <RouterProvider navigate={navigate}>\n      <Routes>\n        <Route path=\"/\" element={<AppTabs />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/shared\" element={<SharedPage />} />\n          <Route path=\"/deleted\" element={<DeletedPage />} />\n        </Route>\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>",
                    "name": "Links#"
                },
                {
                    "source": "import {\n  BrowserRouter,\n  Outlet,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate\n} from 'react-router-dom';\nimport {RouterProvider} from '@adobe/react-spectrum';\n\nfunction AppTabs() {\n  let { pathname } = useLocation();\n\n  return (\n    <Tabs selectedKey={pathname}>\n      <TabList aria-label=\"Tabs\">\n        <Item key=\"/\" href=\"/\">Home</Item>\n        <Item key=\"/shared\" href=\"/shared\">Shared</Item>\n        <Item key=\"/deleted\" href=\"/deleted\">Deleted</Item>\n      </TabList>\n      <TabPanels>\n        <Item key=\"/\">\n          <Outlet />\n        </Item>\n        <Item key=\"/shared\">\n          <Outlet />\n        </Item>\n        <Item key=\"/deleted\">\n          <Outlet />\n        </Item>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nfunction App() {\n  let navigate = useNavigate();\n  return (\n    <RouterProvider navigate={navigate}>\n      <Routes>\n        <Route path=\"/\" element={<AppTabs />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/shared\" element={<SharedPage />} />\n          <Route\n            path=\"/deleted\"\n            element={<DeletedPage />}\n          />\n        </Route>\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>",
                    "name": "Links#"
                },
                {
                    "source": "import {\n  BrowserRouter,\n  Outlet,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate\n} from 'react-router-dom';\nimport {RouterProvider} from '@adobe/react-spectrum';\n\nfunction AppTabs() {\n  let { pathname } =\n    useLocation();\n\n  return (\n    <Tabs\n      selectedKey={pathname}\n    >\n      <TabList aria-label=\"Tabs\">\n        <Item\n          key=\"/\"\n          href=\"/\"\n        >\n          Home\n        </Item>\n        <Item\n          key=\"/shared\"\n          href=\"/shared\"\n        >\n          Shared\n        </Item>\n        <Item\n          key=\"/deleted\"\n          href=\"/deleted\"\n        >\n          Deleted\n        </Item>\n      </TabList>\n      <TabPanels>\n        <Item key=\"/\">\n          <Outlet />\n        </Item>\n        <Item key=\"/shared\">\n          <Outlet />\n        </Item>\n        <Item key=\"/deleted\">\n          <Outlet />\n        </Item>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nfunction App() {\n  let navigate =\n    useNavigate();\n  return (\n    <RouterProvider\n      navigate={navigate}\n    >\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <AppTabs />\n          }\n        >\n          <Route\n            index\n            element={\n              <HomePage />\n            }\n          />\n          <Route\n            path=\"/shared\"\n            element={\n              <SharedPage />\n            }\n          />\n          <Route\n            path=\"/deleted\"\n            element={\n              <DeletedPage />\n            }\n          />\n        </Route>\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>",
                    "name": "Links#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log density example\" density=\"compact\">\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Density#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log density example\"\n  density=\"compact\"\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Density#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log density example\"\n  density=\"compact\"\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior\n      chat history with\n      John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior\n      chat history with\n      Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior\n      chat history with\n      Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Density#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log quiet example\" isQuiet>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log quiet example\" isQuiet>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log quiet example\"\n  isQuiet\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior\n      chat history with\n      John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior\n      chat history with\n      Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior\n      chat history with\n      Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Flex direction=\"column\" rowGap=\"size-150\">\n  <Tabs\n    aria-label=\"Chat log single tab disabled example\"\n    disabledKeys={['item2']}\n  >\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no prior chat history with John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no prior chat history with Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no prior chat history with Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n  <Tabs aria-label=\"Chat log all tabs disabled example\" isDisabled>\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no prior chat history with John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no prior chat history with Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no prior chat history with Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n</Flex>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Flex direction=\"column\" rowGap=\"size-150\">\n  <Tabs\n    aria-label=\"Chat log single tab disabled example\"\n    disabledKeys={['item2']}\n  >\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no prior chat history with John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no prior chat history with Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no prior chat history with Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n  <Tabs\n    aria-label=\"Chat log all tabs disabled example\"\n    isDisabled\n  >\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no prior chat history with John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no prior chat history with Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no prior chat history with Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n</Flex>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  rowGap=\"size-150\"\n>\n  <Tabs\n    aria-label=\"Chat log single tab disabled example\"\n    disabledKeys={[\n      'item2'\n    ]}\n  >\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no\n        prior chat\n        history with\n        John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no\n        prior chat\n        history with\n        Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no\n        prior chat\n        history with\n        Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n  <Tabs\n    aria-label=\"Chat log all tabs disabled example\"\n    isDisabled\n  >\n    <TabList>\n      <Item key=\"item1\">\n        John Doe\n      </Item>\n      <Item key=\"item2\">\n        Jane Doe\n      </Item>\n      <Item key=\"item3\">\n        Joe Bloggs\n      </Item>\n    </TabList>\n    <TabPanels>\n      <Item key=\"item1\">\n        There is no\n        prior chat\n        history with\n        John Doe.\n      </Item>\n      <Item key=\"item2\">\n        There is no\n        prior chat\n        history with\n        Jane Doe.\n      </Item>\n      <Item key=\"item3\">\n        There is no\n        prior chat\n        history with\n        Joe Bloggs.\n      </Item>\n    </TabPanels>\n  </Tabs>\n</Flex>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log orientation example\" orientation=\"vertical\">\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Orientation#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log orientation example\"\n  orientation=\"vertical\"\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Orientation#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log orientation example\"\n  orientation=\"vertical\"\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior\n      chat history with\n      John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior\n      chat history with\n      Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior\n      chat history with\n      Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Orientation#"
                },
                {
                    "source": "function Example() {\n  let [collapse, setCollapse] = React.useState(false);\n\n  return (\n    <>\n      <div\n        style={{\n          width: collapse ? '150px' : '300px',\n          marginBottom: '50px',\n          height: '150px',\n          maxWidth: '100%'\n        }}\n      >\n        <Tabs aria-label=\"Chat log collapse example\">\n          <TabList>\n            <Item key=\"item1\">\n              John Doe\n            </Item>\n            <Item key=\"item2\">\n              Jane Doe\n            </Item>\n            <Item key=\"item3\">\n              Joe Bloggs\n            </Item>\n          </TabList>\n          <TabPanels>\n            <Item key=\"item1\">\n              There is no prior chat history with John Doe.\n            </Item>\n            <Item key=\"item2\">\n              There is no prior chat history with Jane Doe.\n            </Item>\n            <Item key=\"item3\">\n              There is no prior chat history with Joe Bloggs.\n            </Item>\n          </TabPanels>\n        </Tabs>\n      </div>\n      <Button\n        variant=\"primary\"\n        onPress={() => setCollapse((collapse) => !collapse)}\n      >\n        Toggle tab container size.\n      </Button>\n    </>\n  );\n}\n",
                    "name": "Collapse (overflow behavior)#"
                },
                {
                    "source": "function Example() {\n  let [collapse, setCollapse] = React.useState(false);\n\n  return (\n    <>\n      <div\n        style={{\n          width: collapse ? '150px' : '300px',\n          marginBottom: '50px',\n          height: '150px',\n          maxWidth: '100%'\n        }}\n      >\n        <Tabs aria-label=\"Chat log collapse example\">\n          <TabList>\n            <Item key=\"item1\">\n              John Doe\n            </Item>\n            <Item key=\"item2\">\n              Jane Doe\n            </Item>\n            <Item key=\"item3\">\n              Joe Bloggs\n            </Item>\n          </TabList>\n          <TabPanels>\n            <Item key=\"item1\">\n              There is no prior chat history with John Doe.\n            </Item>\n            <Item key=\"item2\">\n              There is no prior chat history with Jane Doe.\n            </Item>\n            <Item key=\"item3\">\n              There is no prior chat history with Joe\n              Bloggs.\n            </Item>\n          </TabPanels>\n        </Tabs>\n      </div>\n      <Button\n        variant=\"primary\"\n        onPress={() => setCollapse((collapse) => !collapse)}\n      >\n        Toggle tab container size.\n      </Button>\n    </>\n  );\n}\n",
                    "name": "Collapse (overflow behavior)#"
                },
                {
                    "source": "function Example() {\n  let [\n    collapse,\n    setCollapse\n  ] = React.useState(\n    false\n  );\n\n  return (\n    <>\n      <div\n        style={{\n          width: collapse\n            ? '150px'\n            : '300px',\n          marginBottom:\n            '50px',\n          height:\n            '150px',\n          maxWidth:\n            '100%'\n        }}\n      >\n        <Tabs aria-label=\"Chat log collapse example\">\n          <TabList>\n            <Item key=\"item1\">\n              John Doe\n            </Item>\n            <Item key=\"item2\">\n              Jane Doe\n            </Item>\n            <Item key=\"item3\">\n              Joe Bloggs\n            </Item>\n          </TabList>\n          <TabPanels>\n            <Item key=\"item1\">\n              There is no\n              prior chat\n              history\n              with John\n              Doe.\n            </Item>\n            <Item key=\"item2\">\n              There is no\n              prior chat\n              history\n              with Jane\n              Doe.\n            </Item>\n            <Item key=\"item3\">\n              There is no\n              prior chat\n              history\n              with Joe\n              Bloggs.\n            </Item>\n          </TabPanels>\n        </Tabs>\n      </div>\n      <Button\n        variant=\"primary\"\n        onPress={() =>\n          setCollapse((\n            collapse\n          ) =>\n            !collapse\n          )}\n      >\n        Toggle tab\n        container size.\n      </Button>\n    </>\n  );\n}\n",
                    "name": "Collapse (overflow behavior)#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log emphasized example\" isEmphasized>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Tabs aria-label=\"Chat log emphasized example\" isEmphasized>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Emphasized#"
                },
                {
                    "source": "<Tabs\n  aria-label=\"Chat log emphasized example\"\n  isEmphasized\n>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior\n      chat history with\n      John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior\n      chat history with\n      Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior\n      chat history with\n      Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>",
                    "name": "Emphasized#"
                }
            ]
        }
    ],
    "Overlays": [
        {
            "name": "AlertDialog",
            "url": "https://react-spectrum.adobe.com/react-spectrum/AlertDialog.html",
            "examples": [
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    title=\"Low Disk Space\"\n    variant=\"warning\"\n    primaryActionLabel=\"Confirm\">\n    You are running low on disk space.\n    Delete unnecessary files to free up space.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    title=\"Low Disk Space\"\n    variant=\"warning\"\n    primaryActionLabel=\"Confirm\">\n    You are running low on disk space.\n    Delete unnecessary files to free up space.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Save\n  </ActionButton>\n  <AlertDialog\n    title=\"Low Disk Space\"\n    variant=\"warning\"\n    primaryActionLabel=\"Confirm\"\n  >\n    You are running low\n    on disk space.\n    Delete unnecessary\n    files to free up\n    space.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Register profile\"\n    primaryActionLabel=\"Register\"\n    secondaryActionLabel=\"Remind me later\"\n    cancelLabel=\"Cancel\">\n    You have not saved your profile information\n    for this account. Would you like to register now?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Register profile\"\n    primaryActionLabel=\"Register\"\n    secondaryActionLabel=\"Remind me later\"\n    cancelLabel=\"Cancel\">\n    You have not saved your profile information\n    for this account. Would you like to register now?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Exit\n  </ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Register profile\"\n    primaryActionLabel=\"Register\"\n    secondaryActionLabel=\"Remind me later\"\n    cancelLabel=\"Cancel\"\n  >\n    You have not saved\n    your profile\n    information for\n    this account. Would\n    you like to\n    register now?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Save file\"\n    primaryActionLabel=\"Save\"\n    cancelLabel=\"Cancel\"\n    autoFocusButton=\"primary\">\n    A file with the same name already exists. Overwrite?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Save file\"\n    primaryActionLabel=\"Save\"\n    cancelLabel=\"Cancel\"\n    autoFocusButton=\"primary\">\n    A file with the same name already exists. Overwrite?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Save\n  </ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Save file\"\n    primaryActionLabel=\"Save\"\n    cancelLabel=\"Cancel\"\n    autoFocusButton=\"primary\"\n  >\n    A file with the\n    same name already\n    exists. Overwrite?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Accessibility#"
                },
                {
                    "source": "function Example() {\n  let onPrimaryAction = () => alert('Primary button pressed.');\n  let onSecondaryAction = () => alert('Secondary button pressed.');\n  let alertCancel = () => alert('Cancel button pressed.');\n\n  return (\n    <DialogTrigger>\n      <ActionButton>\n        Publish\n      </ActionButton>\n      <AlertDialog\n        variant=\"confirmation\"\n        title=\"Confirm Publish\"\n        primaryActionLabel=\"Publish\"\n        secondaryActionLabel=\"Save as draft\"\n        cancelLabel=\"Cancel\"\n        onCancel={alertCancel}\n        onPrimaryAction={onPrimaryAction}\n        onSecondaryAction={onSecondaryAction}>\n        Are you sure you want to publish this document?\n      </AlertDialog>\n    </DialogTrigger>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let onPrimaryAction = () =>\n    alert('Primary button pressed.');\n  let onSecondaryAction = () =>\n    alert('Secondary button pressed.');\n  let alertCancel = () => alert('Cancel button pressed.');\n\n  return (\n    <DialogTrigger>\n      <ActionButton>\n        Publish\n      </ActionButton>\n      <AlertDialog\n        variant=\"confirmation\"\n        title=\"Confirm Publish\"\n        primaryActionLabel=\"Publish\"\n        secondaryActionLabel=\"Save as draft\"\n        cancelLabel=\"Cancel\"\n        onCancel={alertCancel}\n        onPrimaryAction={onPrimaryAction}\n        onSecondaryAction={onSecondaryAction}\n      >\n        Are you sure you want to publish this document?\n      </AlertDialog>\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let onPrimaryAction =\n    () =>\n      alert(\n        'Primary button pressed.'\n      );\n  let onSecondaryAction =\n    () =>\n      alert(\n        'Secondary button pressed.'\n      );\n  let alertCancel = () =>\n    alert(\n      'Cancel button pressed.'\n    );\n\n  return (\n    <DialogTrigger>\n      <ActionButton>\n        Publish\n      </ActionButton>\n      <AlertDialog\n        variant=\"confirmation\"\n        title=\"Confirm Publish\"\n        primaryActionLabel=\"Publish\"\n        secondaryActionLabel=\"Save as draft\"\n        cancelLabel=\"Cancel\"\n        onCancel={alertCancel}\n        onPrimaryAction={onPrimaryAction}\n        onSecondaryAction={onSecondaryAction}\n      >\n        Are you sure you\n        want to publish\n        this document?\n      </AlertDialog>\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Exit instance?\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\">\n    Exit dungeon instance and return to main hub?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Exit instance?\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\">\n    Exit dungeon instance and return to main hub?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Exit\n  </ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Exit instance?\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\"\n  >\n    Exit dungeon\n    instance and return\n    to main hub?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>New file</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Connect your account\"\n    primaryActionLabel=\"Continue\"\n    cancelLabel=\"Cancel\">\n    Please connect an existing account to sync any new files.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>New file</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Connect your account\"\n    primaryActionLabel=\"Continue\"\n    cancelLabel=\"Cancel\"\n  >\n    Please connect an existing account to sync any new\n    files.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    New file\n  </ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Connect your account\"\n    primaryActionLabel=\"Continue\"\n    cancelLabel=\"Cancel\"\n  >\n    Please connect an\n    existing account to\n    sync any new files.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Delete</ActionButton>\n  <AlertDialog\n    variant=\"destructive\"\n    title=\"Delete file\"\n    primaryActionLabel=\"Delete\"\n    cancelLabel=\"Cancel\">\n    This will permanently delete the selected file. Continue?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Delete</ActionButton>\n  <AlertDialog\n    variant=\"destructive\"\n    title=\"Delete file\"\n    primaryActionLabel=\"Delete\"\n    cancelLabel=\"Cancel\"\n  >\n    This will permanently delete the selected file.\n    Continue?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Delete\n  </ActionButton>\n  <AlertDialog\n    variant=\"destructive\"\n    title=\"Delete file\"\n    primaryActionLabel=\"Delete\"\n    cancelLabel=\"Cancel\"\n  >\n    This will\n    permanently delete\n    the selected file.\n    Continue?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Login</ActionButton>\n  <AlertDialog\n    variant=\"error\"\n    title=\"Unable to connect\"\n    primaryActionLabel=\"Retry\"\n    cancelLabel=\"Cancel\">\n    Something went wrong while connecting to the server.\n    Please try again in a couple minutes.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Login</ActionButton>\n  <AlertDialog\n    variant=\"error\"\n    title=\"Unable to connect\"\n    primaryActionLabel=\"Retry\"\n    cancelLabel=\"Cancel\">\n    Something went wrong while connecting to the server.\n    Please try again in a couple minutes.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Login\n  </ActionButton>\n  <AlertDialog\n    variant=\"error\"\n    title=\"Unable to connect\"\n    primaryActionLabel=\"Retry\"\n    cancelLabel=\"Cancel\"\n  >\n    Something went\n    wrong while\n    connecting to the\n    server. Please try\n    again in a couple\n    minutes.\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Enter</ActionButton>\n  <AlertDialog\n    variant=\"warning\"\n    title=\"Raid instance\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\">\n    The following encounter meant for parties of 4 or more. Enter anyways?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Enter</ActionButton>\n  <AlertDialog\n    variant=\"warning\"\n    title=\"Raid instance\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\"\n  >\n    The following encounter meant for parties of 4 or\n    more. Enter anyways?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Enter\n  </ActionButton>\n  <AlertDialog\n    variant=\"warning\"\n    title=\"Raid instance\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\"\n  >\n    The following\n    encounter meant for\n    parties of 4 or\n    more. Enter\n    anyways?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Variant#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isPrimaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Primary action disabled#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isPrimaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Primary action disabled#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Upgrade\n  </ActionButton>\n  <AlertDialog\n    isPrimaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    cancelLabel=\"Cancel\"\n  >\n    Upgrade\n    subscription for an\n    additional $14.99 a\n    month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Primary action disabled#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isSecondaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    secondaryActionLabel=\"Apply Coupon\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Secondary action disabled#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isSecondaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    secondaryActionLabel=\"Apply Coupon\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Secondary action disabled#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Upgrade\n  </ActionButton>\n  <AlertDialog\n    isSecondaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    secondaryActionLabel=\"Apply Coupon\"\n    cancelLabel=\"Cancel\"\n  >\n    Upgrade\n    subscription for an\n    additional $14.99 a\n    month?\n  </AlertDialog>\n</DialogTrigger>",
                    "name": "Secondary action disabled#"
                }
            ]
        },
        {
            "name": "ContextualHelp",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ContextualHelp.html",
            "examples": [
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>Need help?</Heading>\n  <Content>\n    <Text>\n      If you're having issues accessing your account, contact our customer\n      support team for help.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Example#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>Need help?</Heading>\n  <Content>\n    <Text>\n      If you're having issues accessing your account,\n      contact our customer support team for help.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Example#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>\n    Need help?\n  </Heading>\n  <Content>\n    <Text>\n      If you're having\n      issues accessing\n      your account,\n      contact our\n      customer support\n      team for help.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Example#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content>\n    <Text>\n      Segments identify who your visitors are, what devices and services they\n      use, where they navigated from, and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>Learn more about segments</Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Content#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content>\n    <Text>\n      Segments identify who your visitors are, what\n      devices and services they use, where they navigated\n      from, and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>Learn more about segments</Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Content#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>\n    What is a segment?\n  </Heading>\n  <Content>\n    <Text>\n      Segments identify\n      who your visitors\n      are, what devices\n      and services they\n      use, where they\n      navigated from,\n      and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>\n      Learn more about\n      segments\n    </Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Content#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\" placement=\"top start\">\n  <Heading>Placement</Heading>\n  <Content>\n    <Text>\n      The placement of this contextual help popover has been customized to use\n      top start.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Placement#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\" placement=\"top start\">\n  <Heading>Placement</Heading>\n  <Content>\n    <Text>\n      The placement of this contextual help popover has\n      been customized to use top start.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Placement#"
                },
                {
                    "source": "<ContextualHelp\n  variant=\"info\"\n  placement=\"top start\"\n>\n  <Heading>\n    Placement\n  </Heading>\n  <Content>\n    <Text>\n      The placement of\n      this contextual\n      help popover has\n      been customized\n      to use top start.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Placement#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <ContextualHelp\n        variant=\"info\"\n        onOpenChange={(isOpen) => setState(isOpen)}\n      >\n        <Heading>Permission required</Heading>\n        <Content>\n          <Text>\n            Your admin must grant you permission before you can create a\n            segment.\n          </Text>\n        </Content>\n      </ContextualHelp>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <ContextualHelp\n        variant=\"info\"\n        onOpenChange={(isOpen) => setState(isOpen)}\n      >\n        <Heading>Permission required</Heading>\n        <Content>\n          <Text>\n            Your admin must grant you permission before you\n            can create a segment.\n          </Text>\n        </Content>\n      </ContextualHelp>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] =\n    React.useState(\n      false\n    );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      gap=\"size-100\"\n    >\n      <ContextualHelp\n        variant=\"info\"\n        onOpenChange={(\n          isOpen\n        ) =>\n          setState(\n            isOpen\n          )}\n      >\n        <Heading>\n          Permission\n          required\n        </Heading>\n        <Content>\n          <Text>\n            Your admin\n            must grant\n            you\n            permission\n            before you\n            can create a\n            segment.\n          </Text>\n        </Content>\n      </ContextualHelp>\n      <Text>\n        Current open\n        state:{' '}\n        {state\n          .toString()}\n      </Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>Permission required</Heading>\n  <Content>\n    <Text>\n      Your admin must grant you permission before you can create a segment.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Info#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>Permission required</Heading>\n  <Content>\n    <Text>\n      Your admin must grant you permission before you can\n      create a segment.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Info#"
                },
                {
                    "source": "<ContextualHelp variant=\"info\">\n  <Heading>\n    Permission required\n  </Heading>\n  <Content>\n    <Text>\n      Your admin must\n      grant you\n      permission before\n      you can create a\n      segment.\n    </Text>\n  </Content>\n</ContextualHelp>",
                    "name": "Info#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content>\n    <Text>\n      Segments identify who your visitors are, what devices and services they\n      use, where they navigated from, and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>Learn more about segments</Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Help#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content>\n    <Text>\n      Segments identify who your visitors are, what\n      devices and services they use, where they navigated\n      from, and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>Learn more about segments</Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Help#"
                },
                {
                    "source": "<ContextualHelp variant=\"help\">\n  <Heading>\n    What is a segment?\n  </Heading>\n  <Content>\n    <Text>\n      Segments identify\n      who your visitors\n      are, what devices\n      and services they\n      use, where they\n      navigated from,\n      and much more.\n    </Text>\n  </Content>\n  <Footer>\n    <Link>\n      Learn more about\n      segments\n    </Link>\n  </Footer>\n</ContextualHelp>",
                    "name": "Help#"
                }
            ]
        },
        {
            "name": "Dialog",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Dialog.html",
            "examples": [
                {
                    "source": "import {ActionButton, Button, ButtonGroup, Content, Dialog, DialogTrigger, Divider, Header, Heading, Text} from '@adobe/react-spectrum';\n\n<DialogTrigger>\n  <ActionButton>Check connectivity</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Internet Speed Test</Heading>\n      <Header>Connection status: Connected</Header>\n      <Divider />\n      <Content>\n        <Text>\n          Start speed test?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close}>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  ActionButton,\n  Button,\n  ButtonGroup,\n  Content,\n  Dialog,\n  DialogTrigger,\n  Divider,\n  Header,\n  Heading,\n  Text\n} from '@adobe/react-spectrum';\n\n<DialogTrigger>\n  <ActionButton>Check connectivity</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Internet Speed Test</Heading>\n      <Header>Connection status: Connected</Header>\n      <Divider />\n      <Content>\n        <Text>\n          Start speed test?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button variant=\"accent\" onPress={close}>\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "import {\n  ActionButton,\n  Button,\n  ButtonGroup,\n  Content,\n  Dialog,\n  DialogTrigger,\n  Divider,\n  Header,\n  Heading,\n  Text\n} from '@adobe/react-spectrum';\n\n<DialogTrigger>\n  <ActionButton>\n    Check connectivity\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Internet Speed\n        Test\n      </Heading>\n      <Header>\n        Connection\n        status:\n        Connected\n      </Header>\n      <Divider />\n      <Content>\n        <Text>\n          Start speed\n          test?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Publish</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Publish 3 pages</Heading>\n      <Divider />\n      <Content>Confirm publish?</Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Publish</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Publish 3 pages</Heading>\n      <Divider />\n      <Content>Confirm publish?</Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Publish\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Publish 3 pages\n      </Heading>\n      <Divider />\n      <Content>\n        Confirm\n        publish?\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger isDismissable>\n  <ActionButton>Status</ActionButton>\n  <Dialog>\n    <Heading>Status</Heading>\n    <Divider />\n    <Content>Printer Status: Connected</Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger isDismissable>\n  <ActionButton>Status</ActionButton>\n  <Dialog>\n    <Heading>Status</Heading>\n    <Divider />\n    <Content>Printer Status: Connected</Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger\n  isDismissable\n>\n  <ActionButton>\n    Status\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Status\n    </Heading>\n    <Divider />\n    <Content>\n      Printer Status:\n      Connected\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        <Flex alignItems=\"center\" gap=\"size-100\">\n          <Book size=\"S\" />\n          <Text>\n            Register for newsletter\n          </Text>\n        </Flex>\n      </Heading>\n      <Header>\n        <Link>\n          <a href=\"//example.com\" target=\"_blank\">What is this?</a>\n        </Link>\n      </Header>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"First Name\" autoFocus />\n          <TextField label=\"Last Name\" />\n          <TextField label=\"Street Address\" />\n          <TextField label=\"City\" />\n        </Form>\n      </Content>\n      <Footer>\n        <Checkbox>\n          I want to receive updates for exclusive offers in my area.\n        </Checkbox>\n      </Footer>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close}>Register</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        <Flex alignItems=\"center\" gap=\"size-100\">\n          <Book size=\"S\" />\n          <Text>\n            Register for newsletter\n          </Text>\n        </Flex>\n      </Heading>\n      <Header>\n        <Link>\n          <a href=\"//example.com\" target=\"_blank\">\n            What is this?\n          </a>\n        </Link>\n      </Header>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"First Name\" autoFocus />\n          <TextField label=\"Last Name\" />\n          <TextField label=\"Street Address\" />\n          <TextField label=\"City\" />\n        </Form>\n      </Content>\n      <Footer>\n        <Checkbox>\n          I want to receive updates for exclusive offers\n          in my area.\n        </Checkbox>\n      </Footer>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button variant=\"accent\" onPress={close}>\n          Register\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Register\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        <Flex\n          alignItems=\"center\"\n          gap=\"size-100\"\n        >\n          <Book size=\"S\" />\n          <Text>\n            Register\n            for\n            newsletter\n          </Text>\n        </Flex>\n      </Heading>\n      <Header>\n        <Link>\n          <a\n            href=\"//example.com\"\n            target=\"_blank\"\n          >\n            What is\n            this?\n          </a>\n        </Link>\n      </Header>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField\n            label=\"First Name\"\n            autoFocus\n          />\n          <TextField label=\"Last Name\" />\n          <TextField label=\"Street Address\" />\n          <TextField label=\"City\" />\n        </Form>\n      </Content>\n      <Footer>\n        <Checkbox>\n          I want to\n          receive\n          updates for\n          exclusive\n          offers in my\n          area.\n        </Checkbox>\n      </Footer>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n        >\n          Register\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upload</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Image\n        slot=\"hero\"\n        alt=\"\"\n        src=\"https://i.imgur.com/Z7AzH2c.png\"\n        objectFit=\"cover\"\n      />\n      <Heading>Upload file</Heading>\n      <Divider />\n      <Content>Are you sure you want to upload this file?</Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Upload</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Image\n        slot=\"hero\"\n        alt=\"\"\n        src=\"https://i.imgur.com/Z7AzH2c.png\"\n        objectFit=\"cover\"\n      />\n      <Heading>Upload file</Heading>\n      <Divider />\n      <Content>\n        Are you sure you want to upload this file?\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Upload\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Image\n        slot=\"hero\"\n        alt=\"\"\n        src=\"https://i.imgur.com/Z7AzH2c.png\"\n        objectFit=\"cover\"\n      />\n      <Heading>\n        Upload file\n      </Heading>\n      <Divider />\n      <Content>\n        Are you sure\n        you want to\n        upload this\n        file?\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "function Example() {\n  let alertSave = (close) => {\n    close();\n    alert('Profile saved!');\n  };\n\n  let alertCancel = (close) => {\n    close();\n    alert('Profile not saved!');\n  };\n\n  return (\n    <DialogTrigger>\n      <ActionButton>Set Profile</ActionButton>\n      {(close) => (\n        <Dialog>\n          <Heading>Profile</Heading>\n          <Divider />\n          <ButtonGroup>\n            <Button variant=\"secondary\" onPress={() => alertCancel(close)}>\n              Cancel\n            </Button>\n            <Button autoFocus variant=\"accent\" onPress={() => alertSave(close)}>\n              Save\n            </Button>\n          </ButtonGroup>\n          <Content>\n            <Form>\n              <TextField label=\"Name\" />\n              <Checkbox>Make private</Checkbox>\n            </Form>\n          </Content>\n        </Dialog>\n      )}\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let alertSave = (close) => {\n    close();\n    alert('Profile saved!');\n  };\n\n  let alertCancel = (close) => {\n    close();\n    alert('Profile not saved!');\n  };\n\n  return (\n    <DialogTrigger>\n      <ActionButton>Set Profile</ActionButton>\n      {(close) => (\n        <Dialog>\n          <Heading>Profile</Heading>\n          <Divider />\n          <ButtonGroup>\n            <Button\n              variant=\"secondary\"\n              onPress={() => alertCancel(close)}\n            >\n              Cancel\n            </Button>\n            <Button\n              autoFocus\n              variant=\"accent\"\n              onPress={() => alertSave(close)}\n            >\n              Save\n            </Button>\n          </ButtonGroup>\n          <Content>\n            <Form>\n              <TextField label=\"Name\" />\n              <Checkbox>Make private</Checkbox>\n            </Form>\n          </Content>\n        </Dialog>\n      )}\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let alertSave = (\n    close\n  ) => {\n    close();\n    alert(\n      'Profile saved!'\n    );\n  };\n\n  let alertCancel = (\n    close\n  ) => {\n    close();\n    alert(\n      'Profile not saved!'\n    );\n  };\n\n  return (\n    <DialogTrigger>\n      <ActionButton>\n        Set Profile\n      </ActionButton>\n      {(close) => (\n        <Dialog>\n          <Heading>\n            Profile\n          </Heading>\n          <Divider />\n          <ButtonGroup>\n            <Button\n              variant=\"secondary\"\n              onPress={() =>\n                alertCancel(\n                  close\n                )}\n            >\n              Cancel\n            </Button>\n            <Button\n              autoFocus\n              variant=\"accent\"\n              onPress={() =>\n                alertSave(\n                  close\n                )}\n            >\n              Save\n            </Button>\n          </ButtonGroup>\n          <Content>\n            <Form>\n              <TextField label=\"Name\" />\n              <Checkbox>\n                Make\n                private\n              </Checkbox>\n            </Form>\n          </Content>\n        </Dialog>\n      )}\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let alertDismiss = (close) => {\n    close();\n    alert('Dialog dismissed.');\n  }\n  return (\n    <DialogTrigger isDismissable>\n      <ActionButton>Info</ActionButton>\n      {(close) => (\n        <Dialog onDismiss={() => alertDismiss(close)}>\n          <Heading>Version Info</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              Version 1.0.0, Copyright 2020\n            </Text>\n          </Content>\n        </Dialog>\n        )}\n    </DialogTrigger>\n  );\n}",
                    "name": "Dismissable dialogs#"
                },
                {
                    "source": "function Example() {\n  let alertDismiss = (close) => {\n    close();\n    alert('Dialog dismissed.');\n  }\n  return (\n    <DialogTrigger isDismissable>\n      <ActionButton>Info</ActionButton>\n      {(close) => (\n        <Dialog onDismiss={() => alertDismiss(close)}>\n          <Heading>Version Info</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              Version 1.0.0, Copyright 2020\n            </Text>\n          </Content>\n        </Dialog>\n        )}\n    </DialogTrigger>\n  );\n}",
                    "name": "Dismissable dialogs#"
                },
                {
                    "source": "function Example() {\n  let alertDismiss = (\n    close\n  ) => {\n    close();\n    alert(\n      'Dialog dismissed.'\n    );\n  };\n  return (\n    <DialogTrigger\n      isDismissable\n    >\n      <ActionButton>\n        Info\n      </ActionButton>\n      {(close) => (\n        <Dialog\n          onDismiss={() =>\n            alertDismiss(\n              close\n            )}\n        >\n          <Heading>\n            Version Info\n          </Heading>\n          <Divider />\n          <Content>\n            <Text>\n              Version\n              1.0.0,\n              Copyright\n              2020\n            </Text>\n          </Content>\n        </Dialog>\n      )}\n    </DialogTrigger>\n  );\n}\n",
                    "name": "Dismissable dialogs#"
                },
                {
                    "source": "<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>Trigger Modal</ActionButton>\n  <Dialog>\n    <Heading>Modal</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a modal.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>Trigger Modal</ActionButton>\n  <Dialog>\n    <Heading>Modal</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a modal.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger\n  isDismissable\n  type=\"modal\"\n>\n  <ActionButton>\n    Trigger Modal\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Modal\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a\n        modal.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Trigger Popover</ActionButton>\n  <Dialog>\n    <Heading>Popover</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Trigger Popover</ActionButton>\n  <Dialog>\n    <Heading>Popover</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>\n    Trigger Popover\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Popover\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a\n        popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>Trigger Tray</ActionButton>\n  <Dialog>\n    <Heading>Tray</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a tray.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>Trigger Tray</ActionButton>\n  <Dialog>\n    <Heading>Tray</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a tray.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>\n    Trigger Tray\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Tray\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a tray.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dialog types#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Small</ActionButton>\n  {(close) => (\n    <Dialog size=\"S\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Small</ActionButton>\n  {(close) => (\n    <Dialog size=\"S\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Small\n  </ActionButton>\n  {(close) => (\n    <Dialog size=\"S\">\n      <Heading>\n        Profile\n      </Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>\n            Make\n            private\n          </Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Medium</ActionButton>\n  {(close) => (\n    <Dialog size=\"M\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Medium</ActionButton>\n  {(close) => (\n    <Dialog size=\"M\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Medium\n  </ActionButton>\n  {(close) => (\n    <Dialog size=\"M\">\n      <Heading>\n        Profile\n      </Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>\n            Make\n            private\n          </Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Large</ActionButton>\n  {(close) => (\n    <Dialog size=\"L\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Large</ActionButton>\n  {(close) => (\n    <Dialog size=\"L\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Large\n  </ActionButton>\n  {(close) => (\n    <Dialog size=\"L\">\n      <Heading>\n        Profile\n      </Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          autoFocus\n          variant=\"accent\"\n          onPress={close}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>\n            Make\n            private\n          </Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Size#"
                }
            ]
        },
        {
            "name": "DialogContainer",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DialogContainer.html",
            "examples": [
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Delete />\n        <Text>Delete</Text>\n      </ActionButton>\n      <DialogContainer onDismiss={() => setOpen(false)} {...props}>\n        {isOpen &&\n          <AlertDialog\n            title=\"Delete\"\n            variant=\"destructive\"\n            primaryActionLabel=\"Delete\">\n            Are you sure you want to delete this item?\n          </AlertDialog>\n        }\n      </DialogContainer>\n    </>\n  );\n}",
                    "name": "Example#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Delete />\n        <Text>Delete</Text>\n      </ActionButton>\n      <DialogContainer\n        onDismiss={() => setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          (\n            <AlertDialog\n              title=\"Delete\"\n              variant=\"destructive\"\n              primaryActionLabel=\"Delete\"\n            >\n              Are you sure you want to delete this item?\n            </AlertDialog>\n          )}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <>\n      <ActionButton\n        onPress={() =>\n          setOpen(true)}\n      >\n        <Delete />\n        <Text>\n          Delete\n        </Text>\n      </ActionButton>\n      <DialogContainer\n        onDismiss={() =>\n          setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          (\n            <AlertDialog\n              title=\"Delete\"\n              variant=\"destructive\"\n              primaryActionLabel=\"Delete\"\n            >\n              Are you\n              sure you\n              want to\n              delete this\n              item?\n            </AlertDialog>\n          )}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Example#"
                },
                {
                    "source": "import {useDialogContainer} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [dialog, setDialog] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton aria-label=\"Actions\">\n          <More />\n        </ActionButton>\n        <Menu onAction={setDialog}>\n          <Item key=\"edit\">Edit...</Item>\n          <Item key=\"delete\">Delete...</Item>\n        </Menu>\n      </MenuTrigger>\n      <DialogContainer onDismiss={() => setDialog(null)}>\n        {dialog === 'edit' &&\n          <EditDialog />}\n        {dialog === 'delete' &&\n          (\n            <AlertDialog\n              title=\"Delete\"\n              variant=\"destructive\"\n              primaryActionLabel=\"Delete\"\n            >\n              Are you sure you want to delete this item?\n            </AlertDialog>\n          )}\n      </DialogContainer>\n    </>\n  );\n}\n\nfunction EditDialog() {\n  // This hook allows us to dismiss the dialog when the user\n  // presses one of the buttons (below).\n  let dialog = useDialogContainer();\n\n  return (\n    <Dialog>\n      <Heading>Edit</Heading>\n      <Divider />\n      <Content>\n        <Form labelPosition=\"side\" width=\"100%\">\n          <TextField autoFocus label=\"First Name\" defaultValue=\"John\" />\n          <TextField label=\"Last Name\" defaultValue=\"Smith\" />\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={dialog.dismiss}>Cancel</Button>\n        <Button variant=\"accent\" onPress={dialog.dismiss}>Save</Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n",
                    "name": "Dialog triggered by a menu item#"
                },
                {
                    "source": "import {useDialogContainer} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [dialog, setDialog] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton aria-label=\"Actions\">\n          <More />\n        </ActionButton>\n        <Menu onAction={setDialog}>\n          <Item key=\"edit\">Edit...</Item>\n          <Item key=\"delete\">Delete...</Item>\n        </Menu>\n      </MenuTrigger>\n      <DialogContainer onDismiss={() => setDialog(null)}>\n        {dialog === 'edit' &&\n          <EditDialog />}\n        {dialog === 'delete' &&\n          (\n            <AlertDialog\n              title=\"Delete\"\n              variant=\"destructive\"\n              primaryActionLabel=\"Delete\"\n            >\n              Are you sure you want to delete this item?\n            </AlertDialog>\n          )}\n      </DialogContainer>\n    </>\n  );\n}\n\nfunction EditDialog() {\n  // This hook allows us to dismiss the dialog when the user\n  // presses one of the buttons (below).\n  let dialog = useDialogContainer();\n\n  return (\n    <Dialog>\n      <Heading>Edit</Heading>\n      <Divider />\n      <Content>\n        <Form labelPosition=\"side\" width=\"100%\">\n          <TextField\n            autoFocus\n            label=\"First Name\"\n            defaultValue=\"John\"\n          />\n          <TextField\n            label=\"Last Name\"\n            defaultValue=\"Smith\"\n          />\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={dialog.dismiss}\n        >\n          Cancel\n        </Button>\n        <Button variant=\"accent\" onPress={dialog.dismiss}>\n          Save\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n",
                    "name": "Dialog triggered by a menu item#"
                },
                {
                    "source": "import {useDialogContainer} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [\n    dialog,\n    setDialog\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton aria-label=\"Actions\">\n          <More />\n        </ActionButton>\n        <Menu\n          onAction={setDialog}\n        >\n          <Item key=\"edit\">\n            Edit...\n          </Item>\n          <Item key=\"delete\">\n            Delete...\n          </Item>\n        </Menu>\n      </MenuTrigger>\n      <DialogContainer\n        onDismiss={() =>\n          setDialog(\n            null\n          )}\n      >\n        {dialog ===\n            'edit' &&\n          <EditDialog />}\n        {dialog ===\n            'delete' &&\n          (\n            <AlertDialog\n              title=\"Delete\"\n              variant=\"destructive\"\n              primaryActionLabel=\"Delete\"\n            >\n              Are you\n              sure you\n              want to\n              delete this\n              item?\n            </AlertDialog>\n          )}\n      </DialogContainer>\n    </>\n  );\n}\n\nfunction EditDialog() {\n  // This hook allows us to dismiss the dialog when the user\n  // presses one of the buttons (below).\n  let dialog =\n    useDialogContainer();\n\n  return (\n    <Dialog>\n      <Heading>\n        Edit\n      </Heading>\n      <Divider />\n      <Content>\n        <Form\n          labelPosition=\"side\"\n          width=\"100%\"\n        >\n          <TextField\n            autoFocus\n            label=\"First Name\"\n            defaultValue=\"John\"\n          />\n          <TextField\n            label=\"Last Name\"\n            defaultValue=\"Smith\"\n          />\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={dialog\n            .dismiss}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={dialog\n            .dismiss}\n        >\n          Save\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n",
                    "name": "Dialog triggered by a menu item#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreen\"\n        onDismiss={() => setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreen\"\n        onDismiss={() => setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <>\n      <ActionButton\n        onPress={() =>\n          setOpen(true)}\n      >\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreen\"\n        onDismiss={() =>\n          setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreenTakeover\"\n        onDismiss={() => setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen takeover#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreenTakeover\"\n        onDismiss={() => setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen takeover#"
                },
                {
                    "source": "function Example(props) {\n  let [isOpen, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <>\n      <ActionButton\n        onPress={() =>\n          setOpen(true)}\n      >\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer\n        type=\"fullscreenTakeover\"\n        onDismiss={() =>\n          setOpen(false)}\n        {...props}\n      >\n        {isOpen &&\n          <EditDialog />}\n      </DialogContainer>\n    </>\n  );\n}\n",
                    "name": "Full screen takeover#"
                }
            ]
        },
        {
            "name": "DialogTrigger",
            "url": "https://react-spectrum.adobe.com/react-spectrum/DialogTrigger.html",
            "examples": [
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Disk Status</ActionButton>\n  <Dialog>\n    <Heading>C://</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        50% disk space remaining.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Disk Status</ActionButton>\n  <Dialog>\n    <Heading>C://</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        50% disk space remaining.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>\n    Disk Status\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      C://\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        50% disk space\n        remaining.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Example#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Checkout</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Confirm checkout?</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          You have 5 items in your cart. Proceed to checkout?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>Checkout</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Confirm checkout?</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          You have 5 items in your cart. Proceed to\n          checkout?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger>\n  <ActionButton>\n    Checkout\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Confirm\n        checkout?\n      </Heading>\n      <Divider />\n      <Content>\n        <Text>\n          You have 5\n          items in your\n          cart. Proceed\n          to checkout?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Content#"
                },
                {
                    "source": "<DialogTrigger type=\"modal\">\n  <ActionButton>Unlink</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Unlinking email</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This will unlink your email from your profile \"TestUser\". Are you\n          sure?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Modal#"
                },
                {
                    "source": "<DialogTrigger type=\"modal\">\n  <ActionButton>Unlink</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Unlinking email</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This will unlink your email from your profile\n          \"TestUser\". Are you sure?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Modal#"
                },
                {
                    "source": "<DialogTrigger type=\"modal\">\n  <ActionButton>\n    Unlink\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Unlinking email\n      </Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This will\n          unlink your\n          email from\n          your profile\n          \"TestUser\".\n          Are you sure?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Modal#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Popover#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Popover#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\">\n  <ActionButton>\n    Info\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Version Info\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0,\n        Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Popover#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>Check Messages</ActionButton>\n  <Dialog>\n    <Heading>New Messages</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        You have 5 new messages.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Tray#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>Check Messages</ActionButton>\n  <Dialog>\n    <Heading>New Messages</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        You have 5 new messages.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Tray#"
                },
                {
                    "source": "<DialogTrigger type=\"tray\">\n  <ActionButton>\n    Check Messages\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      New Messages\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        You have 5 new\n        messages.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Tray#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreen\">\n  <ActionButton>See Details</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Package details</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit\n          amet tristique risus. In sit amet suscipit lorem. Orci varius\n          natoque penatibus et magnis dis parturient montes, nascetur\n          ridiculus mus. In condimentum imperdiet metus non condimentum. Duis\n          eu velit et quam accumsan tempus at id velit. Duis elementum\n          elementum purus, id tempus mauris posuere a. Nunc vestibulum sapien\n          pellentesque lectus commodo ornare.\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Buy</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreen\">\n  <ActionButton>See Details</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Package details</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur\n          adipiscing elit. Proin sit amet tristique risus.\n          In sit amet suscipit lorem. Orci varius natoque\n          penatibus et magnis dis parturient montes,\n          nascetur ridiculus mus. In condimentum imperdiet\n          metus non condimentum. Duis eu velit et quam\n          accumsan tempus at id velit. Duis elementum\n          elementum purus, id tempus mauris posuere a.\n          Nunc vestibulum sapien pellentesque lectus\n          commodo ornare.\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Buy\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreen\">\n  <ActionButton>\n    See Details\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Package details\n      </Heading>\n      <Divider />\n      <Content>\n        <Text>\n          Lorem ipsum\n          dolor sit\n          amet,\n          consectetur\n          adipiscing\n          elit. Proin\n          sit amet\n          tristique\n          risus. In sit\n          amet suscipit\n          lorem. Orci\n          varius\n          natoque\n          penatibus et\n          magnis dis\n          parturient\n          montes,\n          nascetur\n          ridiculus\n          mus. In\n          condimentum\n          imperdiet\n          metus non\n          condimentum.\n          Duis eu velit\n          et quam\n          accumsan\n          tempus at id\n          velit. Duis\n          elementum\n          elementum\n          purus, id\n          tempus mauris\n          posuere a.\n          Nunc\n          vestibulum\n          sapien\n          pellentesque\n          lectus\n          commodo\n          ornare.\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Buy\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreenTakeover\">\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Register a new account</Heading>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <TextField label=\"Email address\" />\n          <Checkbox>Make profile private</Checkbox>\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen takeover#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreenTakeover\">\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Register a new account</Heading>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <TextField label=\"Email address\" />\n          <Checkbox>Make profile private</Checkbox>\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen takeover#"
                },
                {
                    "source": "<DialogTrigger type=\"fullscreenTakeover\">\n  <ActionButton>\n    Register\n  </ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        Register a new\n        account\n      </Heading>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <TextField label=\"Email address\" />\n          <Checkbox>\n            Make\n            profile\n            private\n          </Checkbox>\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button\n          variant=\"secondary\"\n          onPress={close}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"accent\"\n          onPress={close}\n          autoFocus\n        >\n          Confirm\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>",
                    "name": "Fullscreen takeover#"
                },
                {
                    "source": "<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>User Status</ActionButton>\n  <Dialog>\n    <Heading>Status: Bob</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Last Login: December 12, 1989\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dismissable#"
                },
                {
                    "source": "<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>User Status</ActionButton>\n  <Dialog>\n    <Heading>Status: Bob</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Last Login: December 12, 1989\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dismissable#"
                },
                {
                    "source": "<DialogTrigger\n  isDismissable\n  type=\"modal\"\n>\n  <ActionButton>\n    User Status\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Status: Bob\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Last Login:\n        December 12,\n        1989\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Dismissable#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" mobileType=\"tray\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Mobile type#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" mobileType=\"tray\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Mobile type#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  mobileType=\"tray\"\n>\n  <ActionButton>\n    Info\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Version Info\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0,\n        Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Mobile type#"
                },
                {
                    "source": "function Example() {\n  let ref = React.useRef(null)\n\n  return (\n    <Flex gap=\"size-1000\">\n      <DialogTrigger type=\"popover\" targetRef={ref}>\n        <ActionButton>Trigger</ActionButton>\n        <Dialog>\n          <Heading>The Heading</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              This is a popover anchored to the span.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <span\n        ref={ref}\n        style={{width: '100px'}}>\n        Popover appears over here\n      </span>\n    </Flex>\n  );\n}",
                    "name": "Dialog anchor#"
                },
                {
                    "source": "function Example() {\n  let ref = React.useRef(null)\n\n  return (\n    <Flex gap=\"size-1000\">\n      <DialogTrigger type=\"popover\" targetRef={ref}>\n        <ActionButton>Trigger</ActionButton>\n        <Dialog>\n          <Heading>The Heading</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              This is a popover anchored to the span.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <span\n        ref={ref}\n        style={{width: '100px'}}>\n        Popover appears over here\n      </span>\n    </Flex>\n  );\n}",
                    "name": "Dialog anchor#"
                },
                {
                    "source": "function Example() {\n  let ref = React.useRef(\n    null\n  );\n\n  return (\n    <Flex gap=\"size-1000\">\n      <DialogTrigger\n        type=\"popover\"\n        targetRef={ref}\n      >\n        <ActionButton>\n          Trigger\n        </ActionButton>\n        <Dialog>\n          <Heading>\n            The Heading\n          </Heading>\n          <Divider />\n          <Content>\n            <Text>\n              This is a\n              popover\n              anchored to\n              the span.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <span\n        ref={ref}\n        style={{\n          width: '100px'\n        }}\n      >\n        Popover appears\n        over here\n      </span>\n    </Flex>\n  );\n}\n",
                    "name": "Dialog anchor#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"right top\">\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover placed to the right of its\n        trigger and offset so the arrow is at the top of the dialog.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"right top\">\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover placed to the right of its\n        trigger and offset so the arrow is at the top of\n        the dialog.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"right top\"\n>\n  <ActionButton>\n    Trigger\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      The Heading\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a\n        popover placed\n        to the right of\n        its trigger and\n        offset so the\n        arrow is at the\n        top of the\n        dialog.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"top\" offset={50}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 50px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"top\" offset={50}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 50px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"top\"\n  offset={50}\n>\n  <ActionButton>\n    Trigger\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Offset\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an\n        additional\n        50px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"top\" crossOffset={100}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Cross offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 100px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"top\"\n  crossOffset={100}\n>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Cross offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 100px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"top\"\n  crossOffset={100}\n>\n  <ActionButton>\n    Trigger\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      Cross offset\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an\n        additional\n        100px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DialogTrigger type=\"popover\" placement=\"bottom\">\n    <ActionButton>Default DialogTrigger</ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that will flip if it can't fully render below the\n          button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n   <DialogTrigger type=\"popover\" placement=\"bottom\" shouldFlip={false}>\n    <ActionButton>DialogTrigger with shouldFlip=false</ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that won't flip if it can't fully render below the\n          button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  <DialogTrigger type=\"popover\" placement=\"bottom\">\n    <ActionButton>Default DialogTrigger</ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that will flip if it can't\n          fully render below the button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n   <DialogTrigger\n    type=\"popover\"\n    placement=\"bottom\"\n    shouldFlip={false}\n  >\n    <ActionButton>\n      DialogTrigger with shouldFlip=false\n    </ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that won't flip if it can't\n          fully render below the button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  <DialogTrigger\n    type=\"popover\"\n    placement=\"bottom\"\n  >\n    <ActionButton>\n      Default\n      DialogTrigger\n    </ActionButton>\n    <Dialog>\n      <Heading>\n        The Heading\n      </Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a\n          popover that\n          will flip if\n          it can't\n          fully render\n          below the\n          button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n   <DialogTrigger\n    type=\"popover\"\n    placement=\"bottom\"\n    shouldFlip={false}\n  >\n    <ActionButton>\n      DialogTrigger\n      with\n      shouldFlip=false\n    </ActionButton>\n    <Dialog>\n      <Heading>\n        The Heading\n      </Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a\n          popover that\n          won't flip if\n          it can't\n          fully render\n          below the\n          button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n</Flex>",
                    "name": "Flipping#"
                },
                {
                    "source": "<DialogTrigger type=\"popover\" placement=\"top\" containerPadding={50}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Container padding#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"top\"\n  containerPadding={50}\n>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Container padding#"
                },
                {
                    "source": "<DialogTrigger\n  type=\"popover\"\n  placement=\"top\"\n  containerPadding={50}\n>\n  <ActionButton>\n    Trigger\n  </ActionButton>\n  <Dialog>\n    <Heading>\n      The Heading\n    </Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a\n        popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>",
                    "name": "Container padding#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <DialogTrigger\n        type=\"popover\"\n        placement=\"top\"\n        onOpenChange={(isOpen) => setState(isOpen)}\n      >\n        <ActionButton>Whispers</ActionButton>\n        <Dialog>\n          <Heading>Whispers and DMs</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              You have 0 new messages.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <DialogTrigger\n        type=\"popover\"\n        placement=\"top\"\n        onOpenChange={(isOpen) => setState(isOpen)}\n      >\n        <ActionButton>Whispers</ActionButton>\n        <Dialog>\n          <Heading>Whispers and DMs</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              You have 0 new messages.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [state, setState] =\n    React.useState(\n      false\n    );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      gap=\"size-100\"\n    >\n      <DialogTrigger\n        type=\"popover\"\n        placement=\"top\"\n        onOpenChange={(\n          isOpen\n        ) =>\n          setState(\n            isOpen\n          )}\n      >\n        <ActionButton>\n          Whispers\n        </ActionButton>\n        <Dialog>\n          <Heading>\n            Whispers and\n            DMs\n          </Heading>\n          <Divider />\n          <Content>\n            <Text>\n              You have 0\n              new\n              messages.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <Text>\n        Current open\n        state:{' '}\n        {state\n          .toString()}\n      </Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                }
            ]
        },
        {
            "name": "Tooltip",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Tooltip.html",
            "examples": [
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Edit Name\"><Edit /></ActionButton>\n  <Tooltip>Change Name</Tooltip>\n</TooltipTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Edit Name\">\n    <Edit />\n  </ActionButton>\n  <Tooltip>Change Name</Tooltip>\n</TooltipTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Edit Name\">\n    <Edit />\n  </ActionButton>\n  <Tooltip>\n    Change Name\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Examples#"
                },
                {
                    "source": "<TooltipTrigger delay={0}>\n  <ActionButton aria-label=\"Save\"><Save /></ActionButton>\n  <Tooltip>Saving applies your new settings right away.</Tooltip>\n</TooltipTrigger>",
                    "name": "Tooltip Delay#"
                },
                {
                    "source": "<TooltipTrigger delay={0}>\n  <ActionButton aria-label=\"Save\">\n    <Save />\n  </ActionButton>\n  <Tooltip>\n    Saving applies your new settings right away.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Tooltip Delay#"
                },
                {
                    "source": "<TooltipTrigger\n  delay={0}\n>\n  <ActionButton aria-label=\"Save\">\n    <Save />\n  </ActionButton>\n  <Tooltip>\n    Saving applies your\n    new settings right\n    away.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Tooltip Delay#"
                },
                {
                    "source": "<Flex gap=\"size-200\">\n  <TooltipTrigger>\n    <ActionButton>Hover me</ActionButton>\n    <Tooltip>I come up after a delay.</Tooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <ActionButton>Then hover me</ActionButton>\n    <Tooltip>If you did it quickly, I appear immediately.</Tooltip>\n  </TooltipTrigger>\n</Flex>",
                    "name": "Warmup / Cooldown#"
                },
                {
                    "source": "<Flex gap=\"size-200\">\n  <TooltipTrigger>\n    <ActionButton>Hover me</ActionButton>\n    <Tooltip>I come up after a delay.</Tooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <ActionButton>Then hover me</ActionButton>\n    <Tooltip>\n      If you did it quickly, I appear immediately.\n    </Tooltip>\n  </TooltipTrigger>\n</Flex>",
                    "name": "Warmup / Cooldown#"
                },
                {
                    "source": "<Flex gap=\"size-200\">\n  <TooltipTrigger>\n    <ActionButton>\n      Hover me\n    </ActionButton>\n    <Tooltip>\n      I come up after a\n      delay.\n    </Tooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <ActionButton>\n      Then hover me\n    </ActionButton>\n    <Tooltip>\n      If you did it\n      quickly, I appear\n      immediately.\n    </Tooltip>\n  </TooltipTrigger>\n</Flex>",
                    "name": "Warmup / Cooldown#"
                },
                {
                    "source": "<TooltipTrigger placement=\"end\">\n  <ActionButton aria-label=\"Foo\">Placement</ActionButton>\n  <Tooltip>\n    In left-to-right, this is on the right. In right-to-left, this is on the\n    left.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<TooltipTrigger placement=\"end\">\n  <ActionButton aria-label=\"Foo\">Placement</ActionButton>\n  <Tooltip>\n    In left-to-right, this is on the right. In\n    right-to-left, this is on the left.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<TooltipTrigger placement=\"end\">\n  <ActionButton aria-label=\"Foo\">\n    Placement\n  </ActionButton>\n  <Tooltip>\n    In left-to-right,\n    this is on the\n    right. In\n    right-to-left, this\n    is on the left.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Placement#"
                },
                {
                    "source": "<TooltipTrigger offset={50}>\n  <ActionButton aria-label=\"Offset from trigger\">Offset</ActionButton>\n  <Tooltip>This will shift up.</Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<TooltipTrigger offset={50}>\n  <ActionButton aria-label=\"Offset from trigger\">\n    Offset\n  </ActionButton>\n  <Tooltip>This will shift up.</Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<TooltipTrigger\n  offset={50}\n>\n  <ActionButton aria-label=\"Offset from trigger\">\n    Offset\n  </ActionButton>\n  <Tooltip>\n    This will shift up.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<TooltipTrigger crossOffset={100} placement=\"bottom\">\n  <ActionButton aria-label=\"Cross Offset from trigger\">\n    Cross Offset\n  </ActionButton>\n  <Tooltip>This will shift over to the right.</Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<TooltipTrigger crossOffset={100} placement=\"bottom\">\n  <ActionButton aria-label=\"Cross Offset from trigger\">\n    Cross Offset\n  </ActionButton>\n  <Tooltip>This will shift over to the right.</Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "<TooltipTrigger\n  crossOffset={100}\n  placement=\"bottom\"\n>\n  <ActionButton aria-label=\"Cross Offset from trigger\">\n    Cross Offset\n  </ActionButton>\n  <Tooltip>\n    This will shift\n    over to the right.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Offset and cross offset#"
                },
                {
                    "source": "function Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>\n        <ActionButton aria-label=\"Resize\"><Resize /></ActionButton>\n        <Tooltip>Resize text.</Tooltip>\n      </TooltipTrigger>\n      <Text>Tooltip is {isOpen ? 'showing' : 'not showing'}</Text>\n    </Flex>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <TooltipTrigger\n        isOpen={isOpen}\n        onOpenChange={setOpen}\n      >\n        <ActionButton aria-label=\"Resize\">\n          <Resize />\n        </ActionButton>\n        <Tooltip>Resize text.</Tooltip>\n      </TooltipTrigger>\n      <Text>\n        Tooltip is {isOpen ? 'showing' : 'not showing'}\n      </Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let [isOpen, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      gap=\"size-100\"\n    >\n      <TooltipTrigger\n        isOpen={isOpen}\n        onOpenChange={setOpen}\n      >\n        <ActionButton aria-label=\"Resize\">\n          <Resize />\n        </ActionButton>\n        <Tooltip>\n          Resize text.\n        </Tooltip>\n      </TooltipTrigger>\n      <Text>\n        Tooltip is{' '}\n        {isOpen\n          ? 'showing'\n          : 'not showing'}\n      </Text>\n    </Flex>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Approve\"><ThumbUp /></ActionButton>\n  <Tooltip variant=\"positive\" showIcon>Approve workflow.</Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Approve\">\n    <ThumbUp />\n  </ActionButton>\n  <Tooltip variant=\"positive\" showIcon>\n    Approve workflow.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Approve\">\n    <ThumbUp />\n  </ActionButton>\n  <Tooltip\n    variant=\"positive\"\n    showIcon\n  >\n    Approve workflow.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Information\"><Question /></ActionButton>\n  <Tooltip variant=\"info\" showIcon>More information menu.</Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Information\">\n    <Question />\n  </ActionButton>\n  <Tooltip variant=\"info\" showIcon>\n    More information menu.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Information\">\n    <Question />\n  </ActionButton>\n  <Tooltip\n    variant=\"info\"\n    showIcon\n  >\n    More information\n    menu.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Danger Will Robinson\"><Delete /></ActionButton>\n  <Tooltip variant=\"negative\" showIcon>Dangerous action.</Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Danger Will Robinson\">\n    <Delete />\n  </ActionButton>\n  <Tooltip variant=\"negative\" showIcon>\n    Dangerous action.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger>\n  <ActionButton aria-label=\"Danger Will Robinson\">\n    <Delete />\n  </ActionButton>\n  <Tooltip\n    variant=\"negative\"\n    showIcon\n  >\n    Dangerous action.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Visual options#"
                },
                {
                    "source": "<TooltipTrigger isDisabled>\n  <ActionButton\n    aria-label=\"Danger Will Robinson\"\n    onPress={() => alert('pressed trigger')}\n  >\n    <Delete />\n  </ActionButton>\n  <Tooltip variant=\"negative\" showIcon>Dangerous action.</Tooltip>\n</TooltipTrigger>",
                    "name": "Options#"
                },
                {
                    "source": "<TooltipTrigger isDisabled>\n  <ActionButton\n    aria-label=\"Danger Will Robinson\"\n    onPress={() => alert('pressed trigger')}\n  >\n    <Delete />\n  </ActionButton>\n  <Tooltip variant=\"negative\" showIcon>\n    Dangerous action.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Options#"
                },
                {
                    "source": "<TooltipTrigger\n  isDisabled\n>\n  <ActionButton\n    aria-label=\"Danger Will Robinson\"\n    onPress={() =>\n      alert(\n        'pressed trigger'\n      )}\n  >\n    <Delete />\n  </ActionButton>\n  <Tooltip\n    variant=\"negative\"\n    showIcon\n  >\n    Dangerous action.\n  </Tooltip>\n</TooltipTrigger>",
                    "name": "Options#"
                }
            ]
        }
    ],
    "Pickers": [
        {
            "name": "ComboBox",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ComboBox.html",
            "examples": [
                {
                    "source": "<ComboBox label=\"Favorite Animal\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Example#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Example#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\">\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [majorId, setMajorId] = React.useState(null);\n\n  return (\n    <>\n      <p>Topic id: {majorId}</p>\n      <ComboBox\n        label=\"Pick an engineering major\"\n        defaultItems={options}\n        onSelectionChange={setMajorId}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [majorId, setMajorId] = React.useState(null);\n\n  return (\n    <>\n      <p>Topic id: {majorId}</p>\n      <ComboBox\n        label=\"Pick an engineering major\"\n        defaultItems={options}\n        onSelectionChange={setMajorId}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      name: 'Aerospace'\n    },\n    {\n      id: 2,\n      name: 'Mechanical'\n    },\n    {\n      id: 3,\n      name: 'Civil'\n    },\n    {\n      id: 4,\n      name: 'Biomedical'\n    },\n    {\n      id: 5,\n      name: 'Nuclear'\n    },\n    {\n      id: 6,\n      name: 'Industrial'\n    },\n    {\n      id: 7,\n      name: 'Chemical'\n    },\n    {\n      id: 8,\n      name:\n        'Agricultural'\n    },\n    {\n      id: 9,\n      name: 'Electrical'\n    }\n  ];\n  let [\n    majorId,\n    setMajorId\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <p>\n        Topic id:{' '}\n        {majorId}\n      </p>\n      <ComboBox\n        label=\"Pick an engineering major\"\n        defaultItems={options}\n        onSelectionChange={setMajorId}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Adobe product (Uncontrolled)\"\n        defaultItems={options}\n        defaultInputValue=\"Adobe XD\">\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (Controlled)\"\n        defaultItems={options}\n        inputValue={value}\n        onInputChange={setValue}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Adobe product (Uncontrolled)\"\n        defaultItems={options}\n        defaultInputValue=\"Adobe XD\">\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (Controlled)\"\n        defaultItems={options}\n        inputValue={value}\n        onInputChange={setValue}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      name:\n        'Adobe Photoshop'\n    },\n    {\n      id: 2,\n      name: 'Adobe XD'\n    },\n    {\n      id: 3,\n      name:\n        'Adobe InDesign'\n    },\n    {\n      id: 4,\n      name:\n        'Adobe AfterEffects'\n    },\n    {\n      id: 5,\n      name:\n        'Adobe Illustrator'\n    },\n    {\n      id: 6,\n      name:\n        'Adobe Lightroom'\n    },\n    {\n      id: 7,\n      name:\n        'Adobe Premiere Pro'\n    },\n    {\n      id: 8,\n      name:\n        'Adobe Fresco'\n    },\n    {\n      id: 9,\n      name:\n        'Adobe Dreamweaver'\n    }\n  ];\n  let [value, setValue] =\n    React.useState(\n      'Adobe XD'\n    );\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <ComboBox\n        label=\"Adobe product (Uncontrolled)\"\n        defaultItems={options}\n        defaultInputValue=\"Adobe XD\"\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (Controlled)\"\n        defaultItems={options}\n        inputValue={value}\n        onInputChange={setValue}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n    </Flex>\n  );\n}\n",
                    "name": "Value#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { name: 'Apple' },\n    { name: 'Banana' },\n    { name: 'Orange' },\n    { name: 'Honeydew' },\n    { name: 'Grapes' },\n    { name: 'Watermelon' },\n    { name: 'Cantaloupe' },\n    { name: 'Pear' }\n  ];\n\n  return (\n    <>\n      <p>\n        Please indicate what fruit you would like included with your delivery.\n        If your desired choice does not appear in the list feel free to write\n        your own selection.\n      </p>\n      <ComboBox\n        label=\"Preferred fruit\"\n        defaultItems={options}\n        allowsCustomValue\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Custom Value#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { name: 'Apple' },\n    { name: 'Banana' },\n    { name: 'Orange' },\n    { name: 'Honeydew' },\n    { name: 'Grapes' },\n    { name: 'Watermelon' },\n    { name: 'Cantaloupe' },\n    { name: 'Pear' }\n  ];\n\n  return (\n    <>\n      <p>\n        Please indicate what fruit you would like included\n        with your delivery. If your desired choice does not\n        appear in the list feel free to write your own\n        selection.\n      </p>\n      <ComboBox\n        label=\"Preferred fruit\"\n        defaultItems={options}\n        allowsCustomValue\n      >\n        {(item) => <Item key={item.name}>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Custom Value#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { name: 'Apple' },\n    { name: 'Banana' },\n    { name: 'Orange' },\n    { name: 'Honeydew' },\n    { name: 'Grapes' },\n    {\n      name: 'Watermelon'\n    },\n    {\n      name: 'Cantaloupe'\n    },\n    { name: 'Pear' }\n  ];\n\n  return (\n    <>\n      <p>\n        Please indicate\n        what fruit you\n        would like\n        included with\n        your delivery. If\n        your desired\n        choice does not\n        appear in the\n        list feel free to\n        write your own\n        selection.\n      </p>\n      <ComboBox\n        label=\"Preferred fruit\"\n        defaultItems={options}\n        allowsCustomValue\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Custom Value#"
                },
                {
                    "source": "<Flex gap=\"size-200\" wrap>\n  <ComboBox\n    label=\"Ice cream flavor\"\n    name=\"iceCream\"\n    allowsCustomValue  >\n    <Item>Chocolate</Item>\n    <Item>Mint</Item>\n    <Item>Strawberry</Item>\n    <Item>Vanilla</Item>\n  </ComboBox>\n  <ComboBox\n    label=\"Favorite Animal\"\n    name=\"favoriteAnimalId\"\n    formValue=\"key\"  >\n    <Item key=\"panda\">Panda</Item>\n    <Item key=\"cat\">Cat</Item>\n    <Item key=\"dog\">Dog</Item>\n  </ComboBox>\n</Flex>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex gap=\"size-200\" wrap>\n  <ComboBox\n    label=\"Ice cream flavor\"\n    name=\"iceCream\"\n    allowsCustomValue  >\n    <Item>Chocolate</Item>\n    <Item>Mint</Item>\n    <Item>Strawberry</Item>\n    <Item>Vanilla</Item>\n  </ComboBox>\n  <ComboBox\n    label=\"Favorite Animal\"\n    name=\"favoriteAnimalId\"\n    formValue=\"key\"  >\n    <Item key=\"panda\">Panda</Item>\n    <Item key=\"cat\">Cat</Item>\n    <Item key=\"dog\">Dog</Item>\n  </ComboBox>\n</Flex>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Flex\n  gap=\"size-200\"\n  wrap\n>\n  <ComboBox\n    label=\"Ice cream flavor\"\n    name=\"iceCream\"\n    allowsCustomValue  >\n    <Item>\n      Chocolate\n    </Item>\n    <Item>Mint</Item>\n    <Item>\n      Strawberry\n    </Item>\n    <Item>\n      Vanilla\n    </Item>\n  </ComboBox>\n  <ComboBox\n    label=\"Favorite Animal\"\n    name=\"favoriteAnimalId\"\n    formValue=\"key\"  >\n    <Item key=\"panda\">\n      Panda\n    </Item>\n    <Item key=\"cat\">\n      Cat\n    </Item>\n    <Item key=\"dog\">\n      Dog\n    </Item>\n  </ComboBox>\n</Flex>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isRequired necessityIndicator=\"icon\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isRequired\n  necessityIndicator=\"icon\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isRequired\n  necessityIndicator=\"icon\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isRequired necessityIndicator=\"label\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" necessityIndicator=\"label\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  necessityIndicator=\"label\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  necessityIndicator=\"label\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Labeling#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [productId, setProductId] = React.useState<Key>(9);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Pick an Adobe product (uncontrolled)\"\n        defaultItems={options}\n        defaultSelectedKey={9}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (controlled)\"\n        defaultItems={options}\n        selectedKey={productId}\n        onSelectionChange={selected => setProductId(selected)}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Adobe Photoshop' },\n    { id: 2, name: 'Adobe XD' },\n    { id: 3, name: 'Adobe InDesign' },\n    { id: 4, name: 'Adobe AfterEffects' },\n    { id: 5, name: 'Adobe Illustrator' },\n    { id: 6, name: 'Adobe Lightroom' },\n    { id: 7, name: 'Adobe Premiere Pro' },\n    { id: 8, name: 'Adobe Fresco' },\n    { id: 9, name: 'Adobe Dreamweaver' }\n  ];\n  let [productId, setProductId] = React.useState<Key>(9);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Pick an Adobe product (uncontrolled)\"\n        defaultItems={options}\n        defaultSelectedKey={9}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (controlled)\"\n        defaultItems={options}\n        selectedKey={productId}\n        onSelectionChange={(selected) =>\n          setProductId(selected)}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {\n      id: 1,\n      name:\n        'Adobe Photoshop'\n    },\n    {\n      id: 2,\n      name: 'Adobe XD'\n    },\n    {\n      id: 3,\n      name:\n        'Adobe InDesign'\n    },\n    {\n      id: 4,\n      name:\n        'Adobe AfterEffects'\n    },\n    {\n      id: 5,\n      name:\n        'Adobe Illustrator'\n    },\n    {\n      id: 6,\n      name:\n        'Adobe Lightroom'\n    },\n    {\n      id: 7,\n      name:\n        'Adobe Premiere Pro'\n    },\n    {\n      id: 8,\n      name:\n        'Adobe Fresco'\n    },\n    {\n      id: 9,\n      name:\n        'Adobe Dreamweaver'\n    }\n  ];\n  let [\n    productId,\n    setProductId\n  ] = React.useState<\n    Key\n  >(9);\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <ComboBox\n        label=\"Pick an Adobe product (uncontrolled)\"\n        defaultItems={options}\n        defaultSelectedKey={9}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (controlled)\"\n        defaultItems={options}\n        selectedKey={productId}\n        onSelectionChange={(selected) =>\n          setProductId(\n            selected\n          )}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "<ComboBox label=\"Tech company websites\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ComboBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ComboBox label=\"Tech company websites\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">\n    Adobe\n  </Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">\n    Apple\n  </Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">\n    Google\n  </Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">\n    Microsoft\n  </Item>\n</ComboBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ComboBox label=\"Tech company websites\">\n  <Item\n    href=\"https://adobe.com/\"\n    target=\"_blank\"\n  >\n    Adobe\n  </Item>\n  <Item\n    href=\"https://apple.com/\"\n    target=\"_blank\"\n  >\n    Apple\n  </Item>\n  <Item\n    href=\"https://google.com/\"\n    target=\"_blank\"\n  >\n    Google\n  </Item>\n  <Item\n    href=\"https://microsoft.com/\"\n    target=\"_blank\"\n  >\n    Microsoft\n  </Item>\n</ComboBox>",
                    "name": "Links#"
                },
                {
                    "source": "<ComboBox label=\"Preferred fruit or vegetable\">\n  <Section title=\"Fruit\">\n    <Item key=\"Apple\">Apple</Item>\n    <Item key=\"Banana\">Banana</Item>\n    <Item key=\"Orange\">Orange</Item>\n    <Item key=\"Honeydew\">Honeydew</Item>\n    <Item key=\"Grapes\">Grapes</Item>\n    <Item key=\"Watermelon\">Watermelon</Item>\n    <Item key=\"Cantaloupe\">Cantaloupe</Item>\n    <Item key=\"Pear\">Pear</Item>\n  </Section>\n  <Section title=\"Vegetable\">\n    <Item key=\"Cabbage\">Cabbage</Item>\n    <Item key=\"Broccoli\">Broccoli</Item>\n    <Item key=\"Carrots\">Carrots</Item>\n    <Item key=\"Lettuce\">Lettuce</Item>\n    <Item key=\"Spinach\">Spinach</Item>\n    <Item key=\"Bok Choy\">Bok Choy</Item>\n    <Item key=\"Cauliflower\">Cauliflower</Item>\n    <Item key=\"Potatoes\">Potatoes</Item>\n  </Section>\n</ComboBox>",
                    "name": "Static items#"
                },
                {
                    "source": "<ComboBox label=\"Preferred fruit or vegetable\">\n  <Section title=\"Fruit\">\n    <Item key=\"Apple\">Apple</Item>\n    <Item key=\"Banana\">Banana</Item>\n    <Item key=\"Orange\">Orange</Item>\n    <Item key=\"Honeydew\">Honeydew</Item>\n    <Item key=\"Grapes\">Grapes</Item>\n    <Item key=\"Watermelon\">Watermelon</Item>\n    <Item key=\"Cantaloupe\">Cantaloupe</Item>\n    <Item key=\"Pear\">Pear</Item>\n  </Section>\n  <Section title=\"Vegetable\">\n    <Item key=\"Cabbage\">Cabbage</Item>\n    <Item key=\"Broccoli\">Broccoli</Item>\n    <Item key=\"Carrots\">Carrots</Item>\n    <Item key=\"Lettuce\">Lettuce</Item>\n    <Item key=\"Spinach\">Spinach</Item>\n    <Item key=\"Bok Choy\">Bok Choy</Item>\n    <Item key=\"Cauliflower\">Cauliflower</Item>\n    <Item key=\"Potatoes\">Potatoes</Item>\n  </Section>\n</ComboBox>",
                    "name": "Static items#"
                },
                {
                    "source": "<ComboBox label=\"Preferred fruit or vegetable\">\n  <Section title=\"Fruit\">\n    <Item key=\"Apple\">\n      Apple\n    </Item>\n    <Item key=\"Banana\">\n      Banana\n    </Item>\n    <Item key=\"Orange\">\n      Orange\n    </Item>\n    <Item key=\"Honeydew\">\n      Honeydew\n    </Item>\n    <Item key=\"Grapes\">\n      Grapes\n    </Item>\n    <Item key=\"Watermelon\">\n      Watermelon\n    </Item>\n    <Item key=\"Cantaloupe\">\n      Cantaloupe\n    </Item>\n    <Item key=\"Pear\">\n      Pear\n    </Item>\n  </Section>\n  <Section title=\"Vegetable\">\n    <Item key=\"Cabbage\">\n      Cabbage\n    </Item>\n    <Item key=\"Broccoli\">\n      Broccoli\n    </Item>\n    <Item key=\"Carrots\">\n      Carrots\n    </Item>\n    <Item key=\"Lettuce\">\n      Lettuce\n    </Item>\n    <Item key=\"Spinach\">\n      Spinach\n    </Item>\n    <Item key=\"Bok Choy\">\n      Bok Choy\n    </Item>\n    <Item key=\"Cauliflower\">\n      Cauliflower\n    </Item>\n    <Item key=\"Potatoes\">\n      Potatoes\n    </Item>\n  </Section>\n</ComboBox>",
                    "name": "Static items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <ComboBox label=\"Preferred fruit or vegetable\" defaultItems={options}>\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item key={item.name}>{item.name}</Item>}\n        </Section>\n      )}\n    </ComboBox>\n  );\n}",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      name: 'Fruit',\n      children: [\n        { name: 'Apple' },\n        { name: 'Banana' },\n        { name: 'Orange' },\n        { name: 'Honeydew' },\n        { name: 'Grapes' },\n        { name: 'Watermelon' },\n        { name: 'Cantaloupe' },\n        { name: 'Pear' }\n      ]\n    },\n    {\n      name: 'Vegetable',\n      children: [\n        { name: 'Cabbage' },\n        { name: 'Broccoli' },\n        { name: 'Carrots' },\n        { name: 'Lettuce' },\n        { name: 'Spinach' },\n        { name: 'Bok Choy' },\n        { name: 'Cauliflower' },\n        { name: 'Potatoes' }\n      ]\n    }\n  ];\n\n  return (\n    <ComboBox\n      label=\"Preferred fruit or vegetable\"\n      defaultItems={options}\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item.children}\n          title={item.name}\n        >\n          {(item) => (\n            <Item key={item.name}>{item.name}</Item>\n          )}\n        </Section>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      name: 'Fruit',\n      children: [\n        {\n          name: 'Apple'\n        },\n        {\n          name: 'Banana'\n        },\n        {\n          name: 'Orange'\n        },\n        {\n          name:\n            'Honeydew'\n        },\n        {\n          name: 'Grapes'\n        },\n        {\n          name:\n            'Watermelon'\n        },\n        {\n          name:\n            'Cantaloupe'\n        },\n        { name: 'Pear' }\n      ]\n    },\n    {\n      name: 'Vegetable',\n      children: [\n        {\n          name: 'Cabbage'\n        },\n        {\n          name:\n            'Broccoli'\n        },\n        {\n          name: 'Carrots'\n        },\n        {\n          name: 'Lettuce'\n        },\n        {\n          name: 'Spinach'\n        },\n        {\n          name:\n            'Bok Choy'\n        },\n        {\n          name:\n            'Cauliflower'\n        },\n        {\n          name:\n            'Potatoes'\n        }\n      ]\n    }\n  ];\n\n  return (\n    <ComboBox\n      label=\"Preferred fruit or vegetable\"\n      defaultItems={options}\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item\n            .children}\n          title={item\n            .name}\n        >\n          {(item) => (\n            <Item\n              key={item\n                .name}\n            >\n              {item.name}\n            </Item>\n          )}\n        </Section>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [value, setValue] = React.useState('');\n  let [majorId, setMajorId] = React.useState('');\n\n  let onSelectionChange = (id) => {\n    setMajorId(id);\n  };\n\n  let onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {majorId}</p>\n      <p>Current input text: {value}</p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [value, setValue] = React.useState('');\n  let [majorId, setMajorId] = React.useState('');\n\n  let onSelectionChange = (id) => {\n    setMajorId(id);\n  };\n\n  let onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {majorId}</p>\n      <p>Current input text: {value}</p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}",
                    "name": "Events#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      name: 'Aerospace'\n    },\n    {\n      id: 2,\n      name: 'Mechanical'\n    },\n    {\n      id: 3,\n      name: 'Civil'\n    },\n    {\n      id: 4,\n      name: 'Biomedical'\n    },\n    {\n      id: 5,\n      name: 'Nuclear'\n    },\n    {\n      id: 6,\n      name: 'Industrial'\n    },\n    {\n      id: 7,\n      name: 'Chemical'\n    },\n    {\n      id: 8,\n      name:\n        'Agricultural'\n    },\n    {\n      id: 9,\n      name: 'Electrical'\n    }\n  ];\n\n  let [value, setValue] =\n    React.useState('');\n  let [\n    majorId,\n    setMajorId\n  ] = React.useState('');\n\n  let onSelectionChange =\n    (id) => {\n      setMajorId(id);\n    };\n\n  let onInputChange = (\n    value\n  ) => {\n    setValue(value);\n  };\n\n  return (\n    <>\n      <p>\n        Current selected\n        major id:{' '}\n        {majorId}\n      </p>\n      <p>\n        Current input\n        text: {value}\n      </p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "import {useTreeData} from 'react-stately';\n\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aerospace' },\n    { id: 2, name: 'Mechanical' },\n    { id: 3, name: 'Civil' },\n    { id: 4, name: 'Biomedical' },\n    { id: 5, name: 'Nuclear' },\n    { id: 6, name: 'Industrial' },\n    { id: 7, name: 'Chemical' },\n    { id: 8, name: 'Agricultural' },\n    { id: 9, name: 'Electrical' }\n  ];\n\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: '',\n    inputValue: ''\n  });\n\n  let list = useTreeData({\n    initialItems: options\n  });\n\n  let onSelectionChange = (key) => {\n    setFieldState({\n      inputValue: list.getItem(key)?.value.name ?? '',\n      selectedKey: key\n    });\n  };\n\n  let onInputChange = (value) => {\n    setFieldState((prevState) => ({\n      inputValue: value,\n      selectedKey: value === '' ? null : prevState.selectedKey\n    }));\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {fieldState.selectedKey}</p>\n      <p>Current input text: {fieldState.inputValue}</p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={list.items}\n        selectedKey={fieldState.selectedKey}\n        inputValue={fieldState.inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => <Item>{item.value.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Fully controlled ComboBox#"
                },
                {
                    "source": "import {useTreeData} from 'react-stately';\n\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aerospace' },\n    { id: 2, name: 'Mechanical' },\n    { id: 3, name: 'Civil' },\n    { id: 4, name: 'Biomedical' },\n    { id: 5, name: 'Nuclear' },\n    { id: 6, name: 'Industrial' },\n    { id: 7, name: 'Chemical' },\n    { id: 8, name: 'Agricultural' },\n    { id: 9, name: 'Electrical' }\n  ];\n\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: '',\n    inputValue: ''\n  });\n\n  let list = useTreeData({\n    initialItems: options\n  });\n\n  let onSelectionChange = (key) => {\n    setFieldState({\n      inputValue: list.getItem(key)?.value.name ?? '',\n      selectedKey: key\n    });\n  };\n\n  let onInputChange = (value) => {\n    setFieldState((prevState) => ({\n      inputValue: value,\n      selectedKey: value === ''\n        ? null\n        : prevState.selectedKey\n    }));\n  };\n\n  return (\n    <>\n      <p>\n        Current selected major id: {fieldState.selectedKey}\n      </p>\n      <p>Current input text: {fieldState.inputValue}</p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={list.items}\n        selectedKey={fieldState.selectedKey}\n        inputValue={fieldState.inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => <Item>{item.value.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Fully controlled ComboBox#"
                },
                {
                    "source": "import {useTreeData} from 'react-stately';\n\nfunction Example() {\n  let options = [\n    {\n      id: 1,\n      name: 'Aerospace'\n    },\n    {\n      id: 2,\n      name: 'Mechanical'\n    },\n    {\n      id: 3,\n      name: 'Civil'\n    },\n    {\n      id: 4,\n      name: 'Biomedical'\n    },\n    {\n      id: 5,\n      name: 'Nuclear'\n    },\n    {\n      id: 6,\n      name: 'Industrial'\n    },\n    {\n      id: 7,\n      name: 'Chemical'\n    },\n    {\n      id: 8,\n      name:\n        'Agricultural'\n    },\n    {\n      id: 9,\n      name: 'Electrical'\n    }\n  ];\n\n  let [\n    fieldState,\n    setFieldState\n  ] = React.useState({\n    selectedKey: '',\n    inputValue: ''\n  });\n\n  let list = useTreeData(\n    {\n      initialItems:\n        options\n    }\n  );\n\n  let onSelectionChange =\n    (key) => {\n      setFieldState({\n        inputValue:\n          list.getItem(\n            key\n          )?.value\n            .name ?? '',\n        selectedKey: key\n      });\n    };\n\n  let onInputChange = (\n    value\n  ) => {\n    setFieldState(\n      (prevState) => ({\n        inputValue:\n          value,\n        selectedKey:\n          value === ''\n            ? null\n            : prevState\n              .selectedKey\n      })\n    );\n  };\n\n  return (\n    <>\n      <p>\n        Current selected\n        major id:{' '}\n        {fieldState\n          .selectedKey}\n      </p>\n      <p>\n        Current input\n        text:{' '}\n        {fieldState\n          .inputValue}\n      </p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={list\n          .items}\n        selectedKey={fieldState\n          .selectedKey}\n        inputValue={fieldState\n          .inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n      >\n        {(item) => (\n          <Item>\n            {item.value\n              .name}\n          </Item>\n        )}\n      </ComboBox>\n    </>\n  );\n}\n",
                    "name": "Fully controlled ComboBox#"
                },
                {
                    "source": "<ComboBox label=\"Select action\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified when a new episode\n      airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>",
                    "name": "Complex items#"
                },
                {
                    "source": "<ComboBox label=\"Select action\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">\n      Add to current watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">\n      Post a review for the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified\n      when a new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Complex items#"
                },
                {
                    "source": "<ComboBox label=\"Select action\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>\n      Add to queue\n    </Text>\n    <Text slot=\"description\">\n      Add to current\n      watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>\n      Add review\n    </Text>\n    <Text slot=\"description\">\n      Post a review for\n      the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>\n      Subscribe to\n      series\n    </Text>\n    <Text slot=\"description\">\n      Add series to\n      your subscription\n      list and be\n      notified when a\n      new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an\n      issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Complex items#"
                },
                {
                    "source": "<ComboBox label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</ComboBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "<ComboBox label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</ComboBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "<ComboBox label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</ComboBox>",
                    "name": "With avatars#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor, filterText }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(\n        cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor, filterText }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(\n        cursor ||\n          `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        { signal }\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list =\n    useAsyncList<\n      Character\n    >({\n      async load(\n        {\n          signal,\n          cursor,\n          filterText\n        }\n      ) {\n        if (cursor) {\n          cursor = cursor\n            .replace(\n              /^http:\\/\\//i,\n              'https://'\n            );\n        }\n\n        // If no cursor is available, then we're loading the first page,\n        // filtering the results returned via a query string that\n        // mirrors the ComboBox input text.\n        // Otherwise, the cursor is the next URL to load,\n        // as returned from the previous page.\n        let res =\n          await fetch(\n            cursor ||\n              `https://swapi.py4e.com/api/people/?search=${filterText}`,\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next\n        };\n      }\n    });\n\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list\n        .filterText}\n      onInputChange={list\n        .setFilterText}\n      loadingState={list\n        .loadingState}\n      onLoadMore={list\n        .loadMore}\n    >\n      {(item) => (\n        <Item\n          key={item.name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "interface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let isFocused = React.useRef(false);\n  let list = useAsyncList<Character>({\n    async load({ signal, cursor, filterText, selectedKeys }) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(\n        cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        { signal }\n      );\n      let json = await res.json();\n\n      let selectedText;\n      let selectedKey = selectedKeys !== 'all' &&\n        selectedKeys.values().next().value;\n\n      // If selectedKey exists and combobox is not focused, update the input value with the selected key text\n      // This allows the input value to be up to date when items load for the first time or the selected key text is updated server side.\n      if (!isFocused.current && selectedKey) {\n        let selectedItemName = json.results.find((item) =>\n          item.name === selectedKey\n        )?.name;\n        if (selectedItemName != null && selectedItemName !== filterText) {\n          selectedText = selectedItemName;\n        }\n      }\n\n      return {\n        items: json.results,\n        cursor: json.next,\n        filterText: selectedText ?? filterText\n      };\n    },\n    initialSelectedKeys: ['Luke Skywalker'],\n    getKey: (item) => item.name\n  });\n\n  let onSelectionChange = (key) => {\n    let itemText = list.getItem(key)?.name;\n    list.setSelectedKeys(new Set([key]));\n    list.setFilterText(itemText);\n  };\n\n  let onInputChange = (value) => {\n    // Clear key if user deletes all text in the field\n    if (value === '') {\n      list.setSelectedKeys(new Set([null]));\n    }\n    list.setFilterText(value);\n  };\n\n  let selectedKey = list.selectedKeys !== 'all' &&\n    list.selectedKeys.values().next().value;\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      onFocusChange={(focus) => isFocused.current = focus}\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={onInputChange}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "interface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let isFocused = React.useRef(false);\n  let list = useAsyncList<Character>({\n    async load(\n      { signal, cursor, filterText, selectedKeys }\n    ) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(\n        cursor ||\n          `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        { signal }\n      );\n      let json = await res.json();\n\n      let selectedText;\n      let selectedKey = selectedKeys !== 'all' &&\n        selectedKeys.values().next().value;\n\n      // If selectedKey exists and combobox is not focused, update the input value with the selected key text\n      // This allows the input value to be up to date when items load for the first time or the selected key text is updated server side.\n      if (!isFocused.current && selectedKey) {\n        let selectedItemName = json.results.find((item) =>\n          item.name === selectedKey\n        )?.name;\n        if (\n          selectedItemName != null &&\n          selectedItemName !== filterText\n        ) {\n          selectedText = selectedItemName;\n        }\n      }\n\n      return {\n        items: json.results,\n        cursor: json.next,\n        filterText: selectedText ?? filterText\n      };\n    },\n    initialSelectedKeys: ['Luke Skywalker'],\n    getKey: (item) => item.name\n  });\n\n  let onSelectionChange = (key) => {\n    let itemText = list.getItem(key)?.name;\n    list.setSelectedKeys(new Set([key]));\n    list.setFilterText(itemText);\n  };\n\n  let onInputChange = (value) => {\n    // Clear key if user deletes all text in the field\n    if (value === '') {\n      list.setSelectedKeys(new Set([null]));\n    }\n    list.setFilterText(value);\n  };\n\n  let selectedKey = list.selectedKeys !== 'all' &&\n    list.selectedKeys.values().next().value;\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      onFocusChange={(focus) => isFocused.current = focus}\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={onInputChange}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "interface Character {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let isFocused = React\n    .useRef(false);\n  let list =\n    useAsyncList<\n      Character\n    >({\n      async load(\n        {\n          signal,\n          cursor,\n          filterText,\n          selectedKeys\n        }\n      ) {\n        if (cursor) {\n          cursor = cursor\n            .replace(\n              /^http:\\/\\//i,\n              'https://'\n            );\n        }\n\n        // If no cursor is available, then we're loading the first page,\n        // filtering the results returned via a query string that\n        // mirrors the ComboBox input text.\n        // Otherwise, the cursor is the next URL to load,\n        // as returned from the previous page.\n        let res =\n          await fetch(\n            cursor ||\n              `https://swapi.py4e.com/api/people/?search=${filterText}`,\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n\n        let selectedText;\n        let selectedKey =\n          selectedKeys !==\n            'all' &&\n          selectedKeys\n            .values()\n            .next()\n            .value;\n\n        // If selectedKey exists and combobox is not focused, update the input value with the selected key text\n        // This allows the input value to be up to date when items load for the first time or the selected key text is updated server side.\n        if (\n          !isFocused\n            .current &&\n          selectedKey\n        ) {\n          let selectedItemName =\n            json.results\n              .find(\n                (item) =>\n                  item\n                    .name ===\n                    selectedKey\n              )?.name;\n          if (\n            selectedItemName !=\n              null &&\n            selectedItemName !==\n              filterText\n          ) {\n            selectedText =\n              selectedItemName;\n          }\n        }\n\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next,\n          filterText:\n            selectedText ??\n              filterText\n        };\n      },\n      initialSelectedKeys:\n        ['Luke Skywalker'],\n      getKey: (item) =>\n        item.name\n    });\n\n  let onSelectionChange =\n    (key) => {\n      let itemText = list\n        .getItem(key)\n        ?.name;\n      list\n        .setSelectedKeys(\n          new Set([key])\n        );\n      list.setFilterText(\n        itemText\n      );\n    };\n\n  let onInputChange = (\n    value\n  ) => {\n    // Clear key if user deletes all text in the field\n    if (value === '') {\n      list\n        .setSelectedKeys(\n          new Set([null])\n        );\n    }\n    list.setFilterText(\n      value\n    );\n  };\n\n  let selectedKey =\n    list.selectedKeys !==\n      'all' &&\n    list.selectedKeys\n      .values().next()\n      .value;\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      onFocusChange={(\n        focus\n      ) =>\n        isFocused\n          .current =\n            focus}\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}\n      items={list.items}\n      inputValue={list\n        .filterText}\n      onInputChange={onInputChange}\n      loadingState={list\n        .loadingState}\n      onLoadMore={list\n        .loadMore}\n    >\n      {(item) => (\n        <Item\n          key={item.name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <ComboBox label=\"Favorite animal\" name=\"animal\" isRequired>    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </ComboBox>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <ComboBox\n    label=\"Favorite animal\"\n    name=\"animal\"\n    isRequired\n  >    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </ComboBox>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <ComboBox\n    label=\"Favorite animal\"\n    name=\"animal\"\n    isRequired\n  >    <Item>\n      Aardvark\n    </Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>\n      Kangaroo\n    </Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </ComboBox>\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, email: 'fake@email.com' },\n    { id: 2, email: 'anotherfake@email.com' },\n    { id: 3, email: 'bob@email.com' },\n    { id: 4, email: 'joe@email.com' },\n    { id: 5, email: 'yourEmail@email.com' },\n    { id: 6, email: 'valid@email.com' },\n    { id: 7, email: 'spam@email.com' },\n    { id: 8, email: 'newsletter@email.com' },\n    { id: 9, email: 'subscribe@email.com' }\n  ];\n\n  let [showAll, setShowAll] = React.useState(false);\n  let [filterValue, setFilterValue] = React.useState('');\n  let { startsWith } = useFilter({ sensitivity: 'base' });\n  let filteredItems = React.useMemo(\n    () => options.filter((item) => startsWith(item.email, filterValue)),\n    [options, filterValue]\n  );\n\n  return (\n    <ComboBox\n      onOpenChange={(isOpen, menuTrigger) => {\n        // Show all items if menu is opened manually\n        // i.e. by the arrow keys or trigger button\n        if (menuTrigger === 'manual' && isOpen) {\n          setShowAll(true);\n        }\n      }}\n      width=\"size-3000\"\n      label=\"To:\"\n      items={showAll ? options : filteredItems}\n      inputValue={filterValue}\n      onInputChange={(value) => {\n        setShowAll(false);\n        setFilterValue(value);\n      }}\n      allowsCustomValue\n    >\n      {(item) => <Item>{item.email}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Custom Filtering#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, email: 'fake@email.com' },\n    { id: 2, email: 'anotherfake@email.com' },\n    { id: 3, email: 'bob@email.com' },\n    { id: 4, email: 'joe@email.com' },\n    { id: 5, email: 'yourEmail@email.com' },\n    { id: 6, email: 'valid@email.com' },\n    { id: 7, email: 'spam@email.com' },\n    { id: 8, email: 'newsletter@email.com' },\n    { id: 9, email: 'subscribe@email.com' }\n  ];\n\n  let [showAll, setShowAll] = React.useState(false);\n  let [filterValue, setFilterValue] = React.useState('');\n  let { startsWith } = useFilter({ sensitivity: 'base' });\n  let filteredItems = React.useMemo(\n    () =>\n      options.filter((item) =>\n        startsWith(item.email, filterValue)\n      ),\n    [options, filterValue]\n  );\n\n  return (\n    <ComboBox\n      onOpenChange={(isOpen, menuTrigger) => {\n        // Show all items if menu is opened manually\n        // i.e. by the arrow keys or trigger button\n        if (menuTrigger === 'manual' && isOpen) {\n          setShowAll(true);\n        }\n      }}\n      width=\"size-3000\"\n      label=\"To:\"\n      items={showAll ? options : filteredItems}\n      inputValue={filterValue}\n      onInputChange={(value) => {\n        setShowAll(false);\n        setFilterValue(value);\n      }}\n      allowsCustomValue\n    >\n      {(item) => <Item>{item.email}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Custom Filtering#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      email:\n        'fake@email.com'\n    },\n    {\n      id: 2,\n      email:\n        'anotherfake@email.com'\n    },\n    {\n      id: 3,\n      email:\n        'bob@email.com'\n    },\n    {\n      id: 4,\n      email:\n        'joe@email.com'\n    },\n    {\n      id: 5,\n      email:\n        'yourEmail@email.com'\n    },\n    {\n      id: 6,\n      email:\n        'valid@email.com'\n    },\n    {\n      id: 7,\n      email:\n        'spam@email.com'\n    },\n    {\n      id: 8,\n      email:\n        'newsletter@email.com'\n    },\n    {\n      id: 9,\n      email:\n        'subscribe@email.com'\n    }\n  ];\n\n  let [\n    showAll,\n    setShowAll\n  ] = React.useState(\n    false\n  );\n  let [\n    filterValue,\n    setFilterValue\n  ] = React.useState('');\n  let { startsWith } =\n    useFilter({\n      sensitivity: 'base'\n    });\n  let filteredItems =\n    React.useMemo(\n      () =>\n        options.filter(\n          (item) =>\n            startsWith(\n              item.email,\n              filterValue\n            )\n        ),\n      [\n        options,\n        filterValue\n      ]\n    );\n\n  return (\n    <ComboBox\n      onOpenChange={(\n        isOpen,\n        menuTrigger\n      ) => {\n        // Show all items if menu is opened manually\n        // i.e. by the arrow keys or trigger button\n        if (\n          menuTrigger ===\n            'manual' &&\n          isOpen\n        ) {\n          setShowAll(\n            true\n          );\n        }\n      }}\n      width=\"size-3000\"\n      label=\"To:\"\n      items={showAll\n        ? options\n        : filteredItems}\n      inputValue={filterValue}\n      onInputChange={(\n        value\n      ) => {\n        setShowAll(\n          false\n        );\n        setFilterValue(\n          value\n        );\n      }}\n      allowsCustomValue\n    >\n      {(item) => (\n        <Item>\n          {item.email}\n        </Item>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Custom Filtering#"
                },
                {
                    "source": "<ComboBox label=\"Select action\" menuTrigger=\"focus\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified when a new episode\n      airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox label=\"Select action\" menuTrigger=\"focus\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">\n      Add to current watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">\n      Post a review for the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified\n      when a new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox\n  label=\"Select action\"\n  menuTrigger=\"focus\"\n>\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>\n      Add to queue\n    </Text>\n    <Text slot=\"description\">\n      Add to current\n      watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>\n      Add review\n    </Text>\n    <Text slot=\"description\">\n      Post a review for\n      the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>\n      Subscribe to\n      series\n    </Text>\n    <Text slot=\"description\">\n      Add series to\n      your subscription\n      list and be\n      notified when a\n      new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an\n      issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox label=\"Select action\" menuTrigger=\"manual\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified when a new episode\n      airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox label=\"Select action\" menuTrigger=\"manual\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">\n      Add to current watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">\n      Post a review for the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">\n      Add series to your subscription list and be notified\n      when a new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox\n  label=\"Select action\"\n  menuTrigger=\"manual\"\n>\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>\n      Add to queue\n    </Text>\n    <Text slot=\"description\">\n      Add to current\n      watch queue.\n    </Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>\n      Add review\n    </Text>\n    <Text slot=\"description\">\n      Post a review for\n      the episode.\n    </Text>\n  </Item>\n  <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>\n      Subscribe to\n      series\n    </Text>\n    <Text slot=\"description\">\n      Add series to\n      your subscription\n      list and be\n      notified when a\n      new episode airs.\n    </Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">\n      Report an\n      issue/violation.\n    </Text>\n  </Item>\n</ComboBox>",
                    "name": "Trigger options#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isQuiet>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isQuiet>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isQuiet\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Quiet#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isDisabled>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isDisabled>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isDisabled\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Disabled#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" isReadOnly selectedKey=\"red panda\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Read only#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isReadOnly\n  selectedKey=\"red panda\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Read only#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  isReadOnly\n  selectedKey=\"red panda\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Read only#"
                },
                {
                    "source": "function Example() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let isValid = React.useMemo(() => animalId !== 2 && animalId !== 7, [\n    animalId\n  ]);\n\n  return (\n    <ComboBox\n      validationState={!animalId ? undefined : isValid ? 'valid' : 'invalid'}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId === 2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) => setAnimalId(selected)}\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let isValid = React.useMemo(\n    () => animalId !== 2 && animalId !== 7,\n    [animalId]\n  );\n\n  return (\n    <ComboBox\n      validationState={!animalId\n        ? undefined\n        : isValid\n        ? 'valid'\n        : 'invalid'}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId === 2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) =>\n        setAnimalId(selected)}\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState(\n    null\n  );\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n  let isValid = React\n    .useMemo(\n      () =>\n        animalId !== 2 &&\n        animalId !== 7,\n      [animalId]\n    );\n\n  return (\n    <ComboBox\n      validationState={!animalId\n        ? undefined\n        : isValid\n        ? 'valid'\n        : 'invalid'}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId ===\n          2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) =>\n        setAnimalId(\n          selected\n        )}\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </ComboBox>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<ComboBox\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Major changes</Heading>\n      <Content>\n        Once you have changed your major, you cannot change it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>Aerospace</Item>\n  <Item>Mechanical</Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>Industrial</Item>\n  <Item>Chemical</Item>\n  <Item>Agricultural</Item>\n  <Item>Electrical</Item>\n</ComboBox>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ComboBox\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Major changes</Heading>\n      <Content>\n        Once you have changed your major, you cannot\n        change it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>Aerospace</Item>\n  <Item>Mechanical</Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>Industrial</Item>\n  <Item>Chemical</Item>\n  <Item>Agricultural</Item>\n  <Item>Electrical</Item>\n</ComboBox>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<ComboBox\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Major changes\n      </Heading>\n      <Content>\n        Once you have\n        changed your\n        major, you\n        cannot change\n        it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>\n    Aerospace\n  </Item>\n  <Item>\n    Mechanical\n  </Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>\n    Industrial\n  </Item>\n  <Item>Chemical</Item>\n  <Item>\n    Agricultural\n  </Item>\n  <Item>\n    Electrical\n  </Item>\n</ComboBox>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" width=\"size-6000\" maxWidth=\"100%\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  width=\"size-6000\"\n  maxWidth=\"100%\"\n>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  width=\"size-6000\"\n  maxWidth=\"100%\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" direction=\"top\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Menu direction#"
                },
                {
                    "source": "<ComboBox label=\"Favorite Animal\" direction=\"top\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>",
                    "name": "Menu direction#"
                },
                {
                    "source": "<ComboBox\n  label=\"Favorite Animal\"\n  direction=\"top\"\n>\n  <Item key=\"red panda\">\n    Red Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n  <Item key=\"aardvark\">\n    Aardvark\n  </Item>\n  <Item key=\"kangaroo\">\n    Kangaroo\n  </Item>\n  <Item key=\"snake\">\n    Snake\n  </Item>\n</ComboBox>",
                    "name": "Menu direction#"
                }
            ]
        },
        {
            "name": "Picker",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Picker.html",
            "examples": [
                {
                    "source": "<Picker label=\"Choose frequency\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Example#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Example#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\">\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Example#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={setAnimalId}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </Picker>\n      <p>\n        Animal id:{' '}\n        {animalId}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Content#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isRequired necessityIndicator=\"icon\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isRequired\n  necessityIndicator=\"icon\"\n>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isRequired\n  necessityIndicator=\"icon\"\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isRequired necessityIndicator=\"label\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isRequired\n  necessityIndicator=\"label\"\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" necessityIndicator=\"label\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" necessityIndicator=\"label\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  necessityIndicator=\"label\"\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Labeling#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState<Key>(\"Bison\");\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Picker\n        label=\"Pick an animal (uncontrolled)\"\n        items={options}\n        defaultSelectedKey=\"Bison\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n\n      <Picker\n        label=\"Pick an animal (controlled)\"\n        items={options}\n        selectedKey={animal}\n        onSelectionChange={selected => setAnimal(selected)}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n    </Flex>\n  );\n}",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState<Key>(\"Bison\");\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Picker\n        label=\"Pick an animal (uncontrolled)\"\n        items={options}\n        defaultSelectedKey=\"Bison\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n\n      <Picker\n        label=\"Pick an animal (controlled)\"\n        items={options}\n        selectedKey={animal}\n        onSelectionChange={selected => setAnimal(selected)}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n    </Flex>\n  );\n}",
                    "name": "Selection#"
                },
                {
                    "source": "import type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    { name: 'Koala' },\n    { name: 'Kangaroo' },\n    { name: 'Platypus' },\n    {\n      name: 'Bald Eagle'\n    },\n    { name: 'Bison' },\n    { name: 'Skunk' }\n  ];\n  let [\n    animal,\n    setAnimal\n  ] = React.useState<\n    Key\n  >('Bison');\n\n  return (\n    <Flex\n      gap=\"size-150\"\n      wrap\n    >\n      <Picker\n        label=\"Pick an animal (uncontrolled)\"\n        items={options}\n        defaultSelectedKey=\"Bison\"\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </Picker>\n\n      <Picker\n        label=\"Pick an animal (controlled)\"\n        items={options}\n        selectedKey={animal}\n        onSelectionChange={(selected) =>\n          setAnimal(\n            selected\n          )}\n      >\n        {(item) => (\n          <Item\n            key={item\n              .name}\n          >\n            {item.name}\n          </Item>\n        )}\n      </Picker>\n    </Flex>\n  );\n}\n",
                    "name": "Selection#"
                },
                {
                    "source": "<Picker\n  label=\"Favorite Animal\"\n  name=\"favoriteAnimalId\">\n  <Item key=\"panda\">Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n</Picker>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Picker\n  label=\"Favorite Animal\"\n  name=\"favoriteAnimalId\">\n  <Item key=\"panda\">Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n</Picker>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Picker\n  label=\"Favorite Animal\"\n  name=\"favoriteAnimalId\">\n  <Item key=\"panda\">\n    Panda\n  </Item>\n  <Item key=\"cat\">\n    Cat\n  </Item>\n  <Item key=\"dog\">\n    Dog\n  </Item>\n</Picker>",
                    "name": "HTML forms#"
                },
                {
                    "source": "<Picker label=\"Project\">\n  <Item href=\"https://example.com/\" target=\"_blank\">Create new\u00e2\u0080\u00a6</Item>\n  <Item>Proposal</Item>\n  <Item>Budget</Item>\n  <Item>Onboarding</Item>\n</Picker>",
                    "name": "Links#"
                },
                {
                    "source": "<Picker label=\"Project\">\n  <Item href=\"https://example.com/\" target=\"_blank\">\n    Create new\u00e2\u0080\u00a6\n  </Item>\n  <Item>Proposal</Item>\n  <Item>Budget</Item>\n  <Item>Onboarding</Item>\n</Picker>",
                    "name": "Links#"
                },
                {
                    "source": "<Picker label=\"Project\">\n  <Item\n    href=\"https://example.com/\"\n    target=\"_blank\"\n  >\n    Create new\u00e2\u0080\u00a6\n  </Item>\n  <Item>Proposal</Item>\n  <Item>Budget</Item>\n  <Item>\n    Onboarding\n  </Item>\n</Picker>",
                    "name": "Links#"
                },
                {
                    "source": "<Picker label=\"Pick your favorite\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</Picker>",
                    "name": "Static items#"
                },
                {
                    "source": "<Picker label=\"Pick your favorite\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</Picker>",
                    "name": "Static items#"
                },
                {
                    "source": "<Picker label=\"Pick your favorite\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">\n      Aardvark\n    </Item>\n    <Item key=\"Kangaroo\">\n      Kangaroo\n    </Item>\n    <Item key=\"Snake\">\n      Snake\n    </Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">\n      Danni\n    </Item>\n    <Item key=\"Devon\">\n      Devon\n    </Item>\n    <Item key=\"Ross\">\n      Ross\n    </Item>\n  </Section>\n</Picker>",
                    "name": "Static items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      name: 'Australian',\n      children: [\n        { id: 2, name: 'Koala' },\n        { id: 3, name: 'Kangaroo' },\n        { id: 4, name: 'Platypus' }\n      ]\n    },\n    {\n      name: 'American',\n      children: [\n        { id: 6, name: 'Bald Eagle' },\n        { id: 7, name: 'Bison' },\n        { id: 8, name: 'Skunk' }\n      ]\n    }\n  ];\n\n  return (\n    <Picker\n      label=\"Pick an animal\"\n      items={options}\n      onSelectionChange={(selected) => alert(selected)}\n    >\n      {(item) => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {(item) => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </Picker>\n  );\n}\n",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      name: 'Australian',\n      children: [\n        { id: 2, name: 'Koala' },\n        { id: 3, name: 'Kangaroo' },\n        { id: 4, name: 'Platypus' }\n      ]\n    },\n    {\n      name: 'American',\n      children: [\n        { id: 6, name: 'Bald Eagle' },\n        { id: 7, name: 'Bison' },\n        { id: 8, name: 'Skunk' }\n      ]\n    }\n  ];\n\n  return (\n    <Picker\n      label=\"Pick an animal\"\n      items={options}\n      onSelectionChange={(selected) => alert(selected)}\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item.children}\n          title={item.name}\n        >\n          {(item) => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </Picker>\n  );\n}\n",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function Example() {\n  let options = [\n    {\n      name: 'Australian',\n      children: [\n        {\n          id: 2,\n          name: 'Koala'\n        },\n        {\n          id: 3,\n          name:\n            'Kangaroo'\n        },\n        {\n          id: 4,\n          name:\n            'Platypus'\n        }\n      ]\n    },\n    {\n      name: 'American',\n      children: [\n        {\n          id: 6,\n          name:\n            'Bald Eagle'\n        },\n        {\n          id: 7,\n          name: 'Bison'\n        },\n        {\n          id: 8,\n          name: 'Skunk'\n        }\n      ]\n    }\n  ];\n\n  return (\n    <Picker\n      label=\"Pick an animal\"\n      items={options}\n      onSelectionChange={(selected) =>\n        alert(selected)}\n    >\n      {(item) => (\n        <Section\n          key={item.name}\n          items={item\n            .children}\n          title={item\n            .name}\n        >\n          {(item) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </Section>\n      )}\n    </Picker>\n  );\n}\n",
                    "name": "Dynamic items#"
                },
                {
                    "source": "function StaticExample() {\n  let [frequency, setFrequency] = React.useState(null);\n\n  return (\n    <>\n      <Picker\n        label=\"Choose frequency\"\n        onSelectionChange={(selected) => setFrequency(selected)}\n      >\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </Picker>\n      <p>You selected {frequency}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function StaticExample() {\n  let [frequency, setFrequency] = React.useState(null);\n\n  return (\n    <>\n      <Picker\n        label=\"Choose frequency\"\n        onSelectionChange={(selected) =>\n          setFrequency(selected)}\n      >\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </Picker>\n      <p>You selected {frequency}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function StaticExample() {\n  let [\n    frequency,\n    setFrequency\n  ] = React.useState(\n    null\n  );\n\n  return (\n    <>\n      <Picker\n        label=\"Choose frequency\"\n        onSelectionChange={(selected) =>\n          setFrequency(\n            selected\n          )}\n      >\n        <Item key=\"Rarely\">\n          Rarely\n        </Item>\n        <Item key=\"Sometimes\">\n          Sometimes\n        </Item>\n        <Item key=\"Always\">\n          Always\n        </Item>\n      </Picker>\n      <p>\n        You selected{' '}\n        {frequency}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function DynamicExample() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={(selected) => setAnimalId(selected)}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Your favorite animal has id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function DynamicExample() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={(selected) =>\n          setAnimalId(selected)}\n      >\n        {(item) => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Your favorite animal has id: {animalId}</p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "function DynamicExample() {\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState(\n    null\n  );\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n\n  return (\n    <>\n      <Picker\n        label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={(selected) =>\n          setAnimalId(\n            selected\n          )}\n      >\n        {(item) => (\n          <Item>\n            {item.name}\n          </Item>\n        )}\n      </Picker>\n      <p>\n        Your favorite\n        animal has id:\n        {' '}\n        {animalId}\n      </p>\n    </>\n  );\n}\n",
                    "name": "Events#"
                },
                {
                    "source": "<Picker label=\"Options\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</Picker>",
                    "name": "Complex items#"
                },
                {
                    "source": "<Picker label=\"Options\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</Picker>",
                    "name": "Complex items#"
                },
                {
                    "source": "<Picker label=\"Options\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">\n        Read Only\n      </Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>\n        Write\n      </Text>\n      <Text slot=\"description\">\n        Read and Write\n        Only\n      </Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>\n        Admin\n      </Text>\n      <Text slot=\"description\">\n        Full access\n      </Text>\n    </Item>\n  </Section>\n</Picker>",
                    "name": "Complex items#"
                },
                {
                    "source": "<Picker label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</Picker>",
                    "name": "With avatars#"
                },
                {
                    "source": "<Picker label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</Picker>",
                    "name": "With avatars#"
                },
                {
                    "source": "<Picker label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</Picker>",
                    "name": "With avatars#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({ signal, cursor }) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {\n        signal\n      });\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Picker\n      label=\"Pick a Pokemon\"\n      items={list.items}\n      isLoading={list.isLoading}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </Picker>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({ signal, cursor }) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(\n        cursor || 'https://pokeapi.co/api/v2/pokemon',\n        { signal }\n      );\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Picker\n      label=\"Pick a Pokemon\"\n      items={list.items}\n      isLoading={list.isLoading}\n      onLoadMore={list.loadMore}\n    >\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </Picker>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {useAsyncList} from 'react-stately';\n\ninterface Pokemon {\n  name: string;\n}\n\nfunction AsyncLoadingExample() {\n  let list =\n    useAsyncList<\n      Pokemon\n    >({\n      async load(\n        {\n          signal,\n          cursor\n        }\n      ) {\n        // If no cursor is available, then we're loading the first page.\n        // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n        let res =\n          await fetch(\n            cursor ||\n              'https://pokeapi.co/api/v2/pokemon',\n            { signal }\n          );\n        let json =\n          await res\n            .json();\n        return {\n          items:\n            json.results,\n          cursor:\n            json.next\n        };\n      }\n    });\n\n  return (\n    <Picker\n      label=\"Pick a Pokemon\"\n      items={list.items}\n      isLoading={list\n        .isLoading}\n      onLoadMore={list\n        .loadMore}\n    >\n      {(item) => (\n        <Item\n          key={item.name}\n        >\n          {item.name}\n        </Item>\n      )}\n    </Picker>\n  );\n}\n",
                    "name": "Asynchronous loading#"
                },
                {
                    "source": "import {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <Picker label=\"Favorite animal\" name=\"animal\" isRequired>    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </Picker>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <Picker\n    label=\"Favorite animal\"\n    name=\"animal\"\n    isRequired\n  >    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </Picker>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">\n      Submit\n    </Button>\n    <Button type=\"reset\" variant=\"secondary\">\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "import {\n  Button,\n  ButtonGroup,\n  Form\n} from '@adobe/react-spectrum';\n\n<Form\n  validationBehavior=\"native\"\n  maxWidth=\"size-3000\"\n>\n  <Picker\n    label=\"Favorite animal\"\n    name=\"animal\"\n    isRequired\n  >    <Item>\n      Aardvark\n    </Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>\n      Kangaroo\n    </Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </Picker>\n  <ButtonGroup>\n    <Button\n      type=\"submit\"\n      variant=\"primary\"\n    >\n      Submit\n    </Button>\n    <Button\n      type=\"reset\"\n      variant=\"secondary\"\n    >\n      Reset\n    </Button>\n  </ButtonGroup>\n</Form>",
                    "name": "Validation#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isQuiet>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isQuiet>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isQuiet\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Quiet#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isDisabled>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Picker label=\"Choose frequency\" isDisabled>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Picker\n  label=\"Choose frequency\"\n  isDisabled\n>\n  <Item key=\"rarely\">\n    Rarely\n  </Item>\n  <Item key=\"sometimes\">\n    Sometimes\n  </Item>\n  <Item key=\"always\">\n    Always\n  </Item>\n</Picker>",
                    "name": "Disabled#"
                },
                {
                    "source": "function Example() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let isValid = React.useMemo(() => animalId !== 2 && animalId !== 7, [\n    animalId\n  ]);\n\n  return (\n    <Picker\n      isInvalid={!isValid}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId === 2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) => setAnimalId(selected)}\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </Picker>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n  let isValid = React.useMemo(\n    () => animalId !== 2 && animalId !== 7,\n    [animalId]\n  );\n\n  return (\n    <Picker\n      isInvalid={!isValid}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId === 2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) =>\n        setAnimalId(selected)}\n    >\n      {(item) => <Item>{item.name}</Item>}\n    </Picker>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "function Example() {\n  let [\n    animalId,\n    setAnimalId\n  ] = React.useState(\n    null\n  );\n  let options = [\n    {\n      id: 1,\n      name: 'Aardvark'\n    },\n    {\n      id: 2,\n      name: 'Cat'\n    },\n    {\n      id: 3,\n      name: 'Dog'\n    },\n    {\n      id: 4,\n      name: 'Kangaroo'\n    },\n    {\n      id: 5,\n      name: 'Koala'\n    },\n    {\n      id: 6,\n      name: 'Penguin'\n    },\n    {\n      id: 7,\n      name: 'Snake'\n    },\n    {\n      id: 8,\n      name: 'Turtle'\n    },\n    {\n      id: 9,\n      name: 'Wombat'\n    }\n  ];\n  let isValid = React\n    .useMemo(\n      () =>\n        animalId !== 2 &&\n        animalId !== 7,\n      [animalId]\n    );\n\n  return (\n    <Picker\n      isInvalid={!isValid}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId ===\n          2\n        ? 'The author of this example is a dog person.'\n        : \"Oh no it's a snake! Choose anything else.\"}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={(selected) =>\n        setAnimalId(\n          selected\n        )}\n    >\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </Picker>\n  );\n}\n",
                    "name": "Help text#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<Picker\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Major changes</Heading>\n      <Content>\n        Once you have changed your major, you cannot change it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>Aerospace</Item>\n  <Item>Mechanical</Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>Industrial</Item>\n  <Item>Chemical</Item>\n  <Item>Agricultural</Item>\n  <Item>Electrical</Item>\n</Picker>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<Picker\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Major changes</Heading>\n      <Content>\n        Once you have changed your major, you cannot\n        change it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>Aerospace</Item>\n  <Item>Mechanical</Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>Industrial</Item>\n  <Item>Chemical</Item>\n  <Item>Agricultural</Item>\n  <Item>Electrical</Item>\n</Picker>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<Picker\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>\n        Major changes\n      </Heading>\n      <Content>\n        Once you have\n        changed your\n        major, you\n        cannot change\n        it back.\n      </Content>\n    </ContextualHelp>\n  }\n>\n  <Item>\n    Aerospace\n  </Item>\n  <Item>\n    Mechanical\n  </Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>\n    Industrial\n  </Item>\n  <Item>Chemical</Item>\n  <Item>\n    Agricultural\n  </Item>\n  <Item>\n    Electrical\n  </Item>\n</Picker>",
                    "name": "Contextual help#"
                },
                {
                    "source": "<Flex direction=\"column\" rowGap=\"size-150\">\n  <Picker label=\"Choose frequency\" width=\"size-3600\" maxWidth=\"100%\">\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n\n  <Picker label=\"Choose animal\" menuWidth=\"size-6000\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<Flex direction=\"column\" rowGap=\"size-150\">\n  <Picker\n    label=\"Choose frequency\"\n    width=\"size-3600\"\n    maxWidth=\"100%\"\n  >\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n   <Picker label=\"Choose animal\" menuWidth=\"size-6000\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  rowGap=\"size-150\"\n>\n  <Picker\n    label=\"Choose frequency\"\n    width=\"size-3600\"\n    maxWidth=\"100%\"\n  >\n    <Item key=\"rarely\">\n      Rarely\n    </Item>\n    <Item key=\"sometimes\">\n      Sometimes\n    </Item>\n    <Item key=\"always\">\n      Always\n    </Item>\n  </Picker>\n   <Picker\n    label=\"Choose animal\"\n    menuWidth=\"size-6000\"\n  >\n    <Item key=\"Emu\">\n      Emu\n    </Item>\n    <Item key=\"Kangaroo\">\n      Kangaroo\n    </Item>\n    <Item key=\"Platypus\">\n      Platypus\n    </Item>\n  </Picker>\n</Flex>",
                    "name": "Custom widths#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-150\">\n  <Picker label=\"Choose frequency\" align=\"end\" menuWidth=\"size-3000\">\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n\n  <Picker label=\"Choose animal\" direction=\"top\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-150\">\n  <Picker\n    label=\"Choose frequency\"\n    align=\"end\"\n    menuWidth=\"size-3000\"\n  >\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n   <Picker label=\"Choose animal\" direction=\"top\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-150\"\n>\n  <Picker\n    label=\"Choose frequency\"\n    align=\"end\"\n    menuWidth=\"size-3000\"\n  >\n    <Item key=\"rarely\">\n      Rarely\n    </Item>\n    <Item key=\"sometimes\">\n      Sometimes\n    </Item>\n    <Item key=\"always\">\n      Always\n    </Item>\n  </Picker>\n   <Picker\n    label=\"Choose animal\"\n    direction=\"top\"\n  >\n    <Item key=\"Emu\">\n      Emu\n    </Item>\n    <Item key=\"Kangaroo\">\n      Kangaroo\n    </Item>\n    <Item key=\"Platypus\">\n      Platypus\n    </Item>\n  </Picker>\n</Flex>",
                    "name": "Align and direction#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <Picker\n      label=\"Frequency\"\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"rarely\">Rarely</Item>\n      <Item key=\"sometimes\">Sometimes</Item>\n      <Item key=\"always\">Always</Item>\n    </Picker>\n  );\n}",
                    "name": "Menu state#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <Picker\n      label=\"Frequency\"\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"rarely\">Rarely</Item>\n      <Item key=\"sometimes\">Sometimes</Item>\n      <Item key=\"always\">Always</Item>\n    </Picker>\n  );\n}",
                    "name": "Menu state#"
                },
                {
                    "source": "function Example() {\n  let [open, setOpen] =\n    React.useState(\n      false\n    );\n\n  return (\n    <Picker\n      label=\"Frequency\"\n      isOpen={open}\n      onOpenChange={setOpen}\n    >\n      <Item key=\"rarely\">\n        Rarely\n      </Item>\n      <Item key=\"sometimes\">\n        Sometimes\n      </Item>\n      <Item key=\"always\">\n        Always\n      </Item>\n    </Picker>\n  );\n}\n",
                    "name": "Menu state#"
                }
            ]
        }
    ],
    "Status": [
        {
            "name": "Badge",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Badge.html",
            "examples": [
                {
                    "source": "<Badge variant=\"positive\">Licensed</Badge>",
                    "name": "Example#"
                },
                {
                    "source": "<Badge variant=\"positive\">Licensed</Badge>",
                    "name": "Example#"
                },
                {
                    "source": "<Badge variant=\"positive\">\n  Licensed\n</Badge>",
                    "name": "Example#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CheckmarkCircle from '@spectrum-icons/workflow/CheckmarkCircle';\n\n<Badge variant=\"positive\">\n  <CheckmarkCircle aria-label=\"Done\" />\n  <Text>Icon + Label</Text>\n</Badge>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CheckmarkCircle from '@spectrum-icons/workflow/CheckmarkCircle';\n\n<Badge variant=\"positive\">\n  <CheckmarkCircle aria-label=\"Done\" />\n  <Text>Icon + Label</Text>\n</Badge>",
                    "name": "Content#"
                },
                {
                    "source": "import {Text} from '@adobe/react-spectrum';\nimport CheckmarkCircle from '@spectrum-icons/workflow/CheckmarkCircle';\n\n<Badge variant=\"positive\">\n  <CheckmarkCircle aria-label=\"Done\" />\n  <Text>\n    Icon + Label\n  </Text>\n</Badge>",
                    "name": "Content#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"positive\">\n    Green: Approved, Complete, Success, New, Purchased, Licensed\n  </Badge>\n  <Badge variant=\"info\">Blue: Active, In Use, Live, Published</Badge>\n  <Badge variant=\"negative\">Red: Error, Alert, Rejected, Failed</Badge>\n  <Badge variant=\"neutral\">\n    Gray: Archived, Deleted, Paused, Draft, Not Started, Ended\n  </Badge>\n</Flex>",
                    "name": "Variant#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"positive\">\n    Green: Approved, Complete, Success, New, Purchased,\n    Licensed\n  </Badge>\n  <Badge variant=\"info\">\n    Blue: Active, In Use, Live, Published\n  </Badge>\n  <Badge variant=\"negative\">\n    Red: Error, Alert, Rejected, Failed\n  </Badge>\n  <Badge variant=\"neutral\">\n    Gray: Archived, Deleted, Paused, Draft, Not Started,\n    Ended\n  </Badge>\n</Flex>",
                    "name": "Variant#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex\n  direction=\"column\"\n  gap={8}\n>\n  <Badge variant=\"positive\">\n    Green: Approved,\n    Complete, Success,\n    New, Purchased,\n    Licensed\n  </Badge>\n  <Badge variant=\"info\">\n    Blue: Active, In\n    Use, Live,\n    Published\n  </Badge>\n  <Badge variant=\"negative\">\n    Red: Error, Alert,\n    Rejected, Failed\n  </Badge>\n  <Badge variant=\"neutral\">\n    Gray: Archived,\n    Deleted, Paused,\n    Draft, Not Started,\n    Ended\n  </Badge>\n</Flex>",
                    "name": "Variant#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"seafoam\">Seafoam</Badge>\n  <Badge variant=\"indigo\">Indigo</Badge>\n  <Badge variant=\"purple\">Purple</Badge>\n  <Badge variant=\"fuchsia\">Fuchsia</Badge>\n  <Badge variant=\"magenta\">Magenta</Badge>\n  <Badge variant=\"yellow\">Yellow</Badge>\n</Flex>",
                    "name": "Variant#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"seafoam\">Seafoam</Badge>\n  <Badge variant=\"indigo\">Indigo</Badge>\n  <Badge variant=\"purple\">Purple</Badge>\n  <Badge variant=\"fuchsia\">Fuchsia</Badge>\n  <Badge variant=\"magenta\">Magenta</Badge>\n  <Badge variant=\"yellow\">Yellow</Badge>\n</Flex>",
                    "name": "Variant#"
                },
                {
                    "source": "import {Flex} from '@adobe/react-spectrum';\n\n<Flex\n  direction=\"column\"\n  gap={8}\n>\n  <Badge variant=\"seafoam\">\n    Seafoam\n  </Badge>\n  <Badge variant=\"indigo\">\n    Indigo\n  </Badge>\n  <Badge variant=\"purple\">\n    Purple\n  </Badge>\n  <Badge variant=\"fuchsia\">\n    Fuchsia\n  </Badge>\n  <Badge variant=\"magenta\">\n    Magenta\n  </Badge>\n  <Badge variant=\"yellow\">\n    Yellow\n  </Badge>\n</Flex>",
                    "name": "Variant#"
                }
            ]
        },
        {
            "name": "InlineAlert",
            "url": "https://react-spectrum.adobe.com/react-spectrum/InlineAlert.html",
            "examples": [
                {
                    "source": "<InlineAlert>\n  <Heading>Payment Information</Heading>\n  <Content>\n    Enter your billing address, shipping address, and payment method to\n    complete your purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Example#"
                },
                {
                    "source": "<InlineAlert>\n  <Heading>Payment Information</Heading>\n  <Content>\n    Enter your billing address, shipping address, and\n    payment method to complete your purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Example#"
                },
                {
                    "source": "<InlineAlert>\n  <Heading>\n    Payment Information\n  </Heading>\n  <Content>\n    Enter your billing\n    address, shipping\n    address, and\n    payment method to\n    complete your\n    purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Example#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>Payment Information</Heading>\n  <Content>\n    Enter your billing address, shipping address, and payment method to\n    complete your purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Content#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>Payment Information</Heading>\n  <Content>\n    Enter your billing address, shipping address, and\n    payment method to complete your purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Content#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>\n    Payment Information\n  </Heading>\n  <Content>\n    Enter your billing\n    address, shipping\n    address, and\n    payment method to\n    complete your\n    purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Content#"
                },
                {
                    "source": "<InlineAlert variant=\"info\">\n  <Heading>Accepted Payment Methods</Heading>\n  <Content>\n    Only major credit cards are accepted for payment. Direct debit is\n    currently unavailable.\n  </Content>\n</InlineAlert>",
                    "name": "Informative#"
                },
                {
                    "source": "<InlineAlert variant=\"info\">\n  <Heading>Accepted Payment Methods</Heading>\n  <Content>\n    Only major credit cards are accepted for payment.\n    Direct debit is currently unavailable.\n  </Content>\n</InlineAlert>",
                    "name": "Informative#"
                },
                {
                    "source": "<InlineAlert variant=\"info\">\n  <Heading>\n    Accepted Payment\n    Methods\n  </Heading>\n  <Content>\n    Only major credit\n    cards are accepted\n    for payment. Direct\n    debit is currently\n    unavailable.\n  </Content>\n</InlineAlert>",
                    "name": "Informative#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>Purchase completed</Heading>\n  <Content>\n    You'll get a confirmation email with your order details shortly.\n  </Content>\n</InlineAlert>",
                    "name": "Positive#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>Purchase completed</Heading>\n  <Content>\n    You'll get a confirmation email with your order\n    details shortly.\n  </Content>\n</InlineAlert>",
                    "name": "Positive#"
                },
                {
                    "source": "<InlineAlert variant=\"positive\">\n  <Heading>\n    Purchase completed\n  </Heading>\n  <Content>\n    You'll get a\n    confirmation email\n    with your order\n    details shortly.\n  </Content>\n</InlineAlert>",
                    "name": "Positive#"
                },
                {
                    "source": "<InlineAlert variant=\"notice\">\n  <Heading>Update payment information</Heading>\n  <Content>\n    The saved credit card for your account has expired. Update your payment\n    information to complete the purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Notice#"
                },
                {
                    "source": "<InlineAlert variant=\"notice\">\n  <Heading>Update payment information</Heading>\n  <Content>\n    The saved credit card for your account has expired.\n    Update your payment information to complete the\n    purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Notice#"
                },
                {
                    "source": "<InlineAlert variant=\"notice\">\n  <Heading>\n    Update payment\n    information\n  </Heading>\n  <Content>\n    The saved credit\n    card for your\n    account has\n    expired. Update\n    your payment\n    information to\n    complete the\n    purchase.\n  </Content>\n</InlineAlert>",
                    "name": "Notice#"
                },
                {
                    "source": "<InlineAlert variant=\"negative\">\n  <Heading>Unable to process payment</Heading>\n  <Content>\n    There was an error processing your payment. Please check that your credit\n    card information is correct, then try again.\n  </Content>\n</InlineAlert>",
                    "name": "Negative#"
                },
                {
                    "source": "<InlineAlert variant=\"negative\">\n  <Heading>Unable to process payment</Heading>\n  <Content>\n    There was an error processing your payment. Please\n    check that your credit card information is correct,\n    then try again.\n  </Content>\n</InlineAlert>",
                    "name": "Negative#"
                },
                {
                    "source": "<InlineAlert variant=\"negative\">\n  <Heading>\n    Unable to process\n    payment\n  </Heading>\n  <Content>\n    There was an error\n    processing your\n    payment. Please\n    check that your\n    credit card\n    information is\n    correct, then try\n    again.\n  </Content>\n</InlineAlert>",
                    "name": "Negative#"
                }
            ]
        },
        {
            "name": "LabeledValue",
            "url": "https://react-spectrum.adobe.com/react-spectrum/LabeledValue.html",
            "examples": [
                {
                    "source": "<LabeledValue label=\"File name\" value=\"Budget.xls\" />",
                    "name": "Example#"
                },
                {
                    "source": "<LabeledValue label=\"File name\" value=\"Budget.xls\" />",
                    "name": "Example#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File name\"\n  value=\"Budget.xls\"\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<LabeledValue label=\"Number of cookies\" value={1024} />",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue label=\"Number of cookies\" value={1024} />",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Number of cookies\"\n  value={1024}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File size\"\n  value={1.2}\n  formatOptions={{ style: 'unit', unit: 'megabyte' }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File size\"\n  value={1.2}\n  formatOptions={{ style: 'unit', unit: 'megabyte' }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File size\"\n  value={1.2}\n  formatOptions={{\n    style: 'unit',\n    unit: 'megabyte'\n  }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Price range\"\n  value={{ start: 150, end: 400 }}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n  }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Price range\"\n  value={{ start: 150, end: 400 }}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n  }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Price range\"\n  value={{\n    start: 150,\n    end: 400\n  }}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits:\n      0\n  }}\n/>",
                    "name": "Numbers#"
                },
                {
                    "source": "import {getLocalTimeZone, today} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Date modified\"\n  value={today(getLocalTimeZone()).subtract({ weeks: 1 })}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {\n  getLocalTimeZone,\n  today\n} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Date modified\"\n  value={today(getLocalTimeZone()).subtract({ weeks: 1 })}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {\n  getLocalTimeZone,\n  today\n} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Date modified\"\n  value={today(\n    getLocalTimeZone()\n  ).subtract({\n    weeks: 1\n  })}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {getLocalTimeZone, now} from '@internationalized/date';\n\n<LabeledValue label=\"Page load time\" value={now(getLocalTimeZone())} />",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {\n  getLocalTimeZone,\n  now\n} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Page load time\"\n  value={now(getLocalTimeZone())}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {\n  getLocalTimeZone,\n  now\n} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Page load time\"\n  value={now(\n    getLocalTimeZone()\n  )}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Business hours\"\n  value={{ start: new Time(8, 30), end: new Time(18) }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Business hours\"\n  value={{ start: new Time(8, 30), end: new Time(18) }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "import {Time} from '@internationalized/date';\n\n<LabeledValue\n  label=\"Business hours\"\n  value={{\n    start: new Time(\n      8,\n      30\n    ),\n    end: new Time(18)\n  }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Appointment date\"\n  value={new Date(2022, 6, 5)}\n  formatOptions={{ dateStyle: 'short' }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Appointment date\"\n  value={new Date(2022, 6, 5)}\n  formatOptions={{ dateStyle: 'short' }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Appointment date\"\n  value={new Date(\n    2022,\n    6,\n    5\n  )}\n  formatOptions={{\n    dateStyle: 'short'\n  }}\n/>",
                    "name": "Dates and times#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Pizza toppings\"\n  value={['Pepperoni', 'Pineapple', 'Mushroom', 'Garlic']}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Pizza toppings\"\n  value={['Pepperoni', 'Pineapple', 'Mushroom', 'Garlic']}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Pizza toppings\"\n  value={[\n    'Pepperoni',\n    'Pineapple',\n    'Mushroom',\n    'Garlic'\n  ]}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Interests\"\n  value={['Travel', 'Hiking', 'Snorkeling', 'Camping']}\n  formatOptions={{ type: 'unit' }}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Interests\"\n  value={['Travel', 'Hiking', 'Snorkeling', 'Camping']}\n  formatOptions={{ type: 'unit' }}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"Interests\"\n  value={[\n    'Travel',\n    'Hiking',\n    'Snorkeling',\n    'Camping'\n  ]}\n  formatOptions={{\n    type: 'unit'\n  }}\n/>",
                    "name": "Lists#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File name\"\n  value=\"Onboarding.pdf\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File name\"\n  value=\"Onboarding.pdf\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "<LabeledValue\n  label=\"File name\"\n  value=\"Onboarding.pdf\"\n  labelPosition=\"side\"\n  labelAlign=\"end\"\n/>",
                    "name": "Label alignment and position#"
                },
                {
                    "source": "import {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<LabeledValue\n  label=\"Aperture\"\n  value=\"f/1.5\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is the aperture?</Heading>\n      <Content>\n        The aperture setting controls the amount of light reaching the image\n        sensor.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<LabeledValue\n  label=\"Aperture\"\n  value=\"f/1.5\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is the aperture?</Heading>\n      <Content>\n        The aperture setting controls the amount of light\n        reaching the image sensor.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                },
                {
                    "source": "import {\n  Content,\n  ContextualHelp,\n  Heading\n} from '@adobe/react-spectrum';\n\n<LabeledValue\n  label=\"Aperture\"\n  value=\"f/1.5\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>\n        What is the\n        aperture?\n      </Heading>\n      <Content>\n        The aperture\n        setting\n        controls the\n        amount of light\n        reaching the\n        image sensor.\n      </Content>\n    </ContextualHelp>\n  }\n/>",
                    "name": "Contextual help#"
                }
            ]
        },
        {
            "name": "Meter",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Meter.html",
            "examples": [
                {
                    "source": "<Meter label=\"Storage space\" variant=\"positive\" value={35} />",
                    "name": "Example#"
                },
                {
                    "source": "<Meter\n  label=\"Storage space\"\n  variant=\"positive\"\n  value={35}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<Meter\n  label=\"Storage space\"\n  variant=\"positive\"\n  value={35}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<Meter\n  label=\"Storage space\"\n  value={25}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Storage space\"\n  value={25}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Storage space\"\n  value={25}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60}\n  variant=\"positive\" />",
                    "name": "Value#"
                },
                {
                    "source": "<Meter\n  label=\"Currency\"\n  formatOptions={{\n    style: 'currency',\n    currency: 'JPY'\n  }}\n  value={60}\n  variant=\"positive\"\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Meter label=\"Label\" value={25} variant=\"warning\" />\n  <Meter label=\"Label\" labelPosition=\"side\" value={25} variant=\"warning\" />\n  <Meter label=\"Label\" showValueLabel={false} value={25} variant=\"warning\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Meter label=\"Label\" value={25} variant=\"warning\" />\n  <Meter\n    label=\"Label\"\n    labelPosition=\"side\"\n    value={25}\n    variant=\"warning\"\n  />\n  <Meter\n    label=\"Label\"\n    showValueLabel={false}\n    value={25}\n    variant=\"warning\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Meter\n    label=\"Label\"\n    value={25}\n    variant=\"warning\"\n  />\n  <Meter\n    label=\"Label\"\n    labelPosition=\"side\"\n    value={25}\n    variant=\"warning\"\n  />\n  <Meter\n    label=\"Label\"\n    showValueLabel={false}\n    value={25}\n    variant=\"warning\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Meter\n  label=\"Progress\"\n  marginBottom=\"size-300\"\n  value={25}\n  valueLabel=\"1 of 4\"\n  variant=\"warning\"\n/>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Meter\n  label=\"Progress\"\n  marginBottom=\"size-300\"\n  value={25}\n  valueLabel=\"1 of 4\"\n  variant=\"warning\"\n/>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Meter\n  label=\"Progress\"\n  marginBottom=\"size-300\"\n  value={25}\n  valueLabel=\"1 of 4\"\n  variant=\"warning\"\n/>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Meter\n    label=\"Space used\"\n    showValueLabel={false}\n    value={90}\n    variant=\"critical\" />\n\n  <Meter\n    label=\"Space used\"\n    valueLabel=\"54 of 60GB\"\n    value={90} variant=\"critical\" />\n\n  <Meter\n    label=\"Space used\"\n    formatOptions={{style: 'percent', minimumFractionDigits: 2}}\n    value={89.123}\n    variant=\"critical\" />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Meter\n    label=\"Space used\"\n    showValueLabel={false}\n    value={90}\n    variant=\"critical\"\n  />\n   <Meter\n    label=\"Space used\"\n    valueLabel=\"54 of 60GB\"\n    value={90}\n    variant=\"critical\"\n  />\n   <Meter\n    label=\"Space used\"\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits: 2\n    }}\n    value={89.123}\n    variant=\"critical\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <Meter\n    label=\"Space used\"\n    showValueLabel={false}\n    value={90}\n    variant=\"critical\"\n  />\n   <Meter\n    label=\"Space used\"\n    valueLabel=\"54 of 60GB\"\n    value={90}\n    variant=\"critical\"\n  />\n   <Meter\n    label=\"Space used\"\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits:\n        2\n    }}\n    value={89.123}\n    variant=\"critical\"\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Meter label=\"Space used\" size=\"S\" value={90} variant=\"critical\" />\n  <Meter label=\"Space used\" size=\"L\" value={90} variant=\"critical\" />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Meter\n    label=\"Space used\"\n    size=\"S\"\n    value={90}\n    variant=\"critical\"\n  />\n  <Meter\n    label=\"Space used\"\n    size=\"L\"\n    value={90}\n    variant=\"critical\"\n  />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <Meter\n    label=\"Space used\"\n    size=\"S\"\n    value={90}\n    variant=\"critical\"\n  />\n  <Meter\n    label=\"Space used\"\n    size=\"L\"\n    value={90}\n    variant=\"critical\"\n  />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Meter label=\"Space used\" value={25} variant=\"positive\" />\n  <Meter label=\"Space used\" value={90} variant=\"critical\" />\n  <Meter label=\"Space used\" value={70} variant=\"warning\" />\n</Flex>",
                    "name": "Variants#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <Meter label=\"Space used\" value={25} variant=\"positive\" />\n  <Meter label=\"Space used\" value={90} variant=\"critical\" />\n  <Meter label=\"Space used\" value={70} variant=\"warning\" />\n</Flex>",
                    "name": "Variants#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <Meter\n    label=\"Space used\"\n    value={25}\n    variant=\"positive\"\n  />\n  <Meter\n    label=\"Space used\"\n    value={90}\n    variant=\"critical\"\n  />\n  <Meter\n    label=\"Space used\"\n    value={70}\n    variant=\"warning\"\n  />\n</Flex>",
                    "name": "Variants#"
                }
            ]
        },
        {
            "name": "ProgressBar",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ProgressBar.html",
            "examples": [
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  value={50}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={25} />",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={25} />",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  value={25}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" minValue={50} maxValue={150} value={100} />",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  formatOptions={{ style: 'currency', currency: 'JPY' }}\n  value={60}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  formatOptions={{ style: 'currency', currency: 'JPY' }}\n  value={60}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  formatOptions={{\n    style: 'currency',\n    currency: 'JPY'\n  }}\n  value={60}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  value={50}\n/>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" isIndeterminate />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressBar label=\"Loading\u00e2\u0080\u00a6\" isIndeterminate />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressBar\n  label=\"Loading\u00e2\u0080\u00a6\"\n  isIndeterminate\n/>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={30} />\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" labelPosition=\"side\" value={30} />\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" showValueLabel={false} value={30} />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" value={30} />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    labelPosition=\"side\"\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    showValueLabel={false}\n    value={30}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    labelPosition=\"side\"\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    showValueLabel={false}\n    value={30}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" showValueLabel={false} value={30} />\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" valueLabel=\"30 of 60 dogs\" value={30} />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    formatOptions={{ style: 'percent', minimumFractionDigits: 2 }}\n    value={30.123}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    showValueLabel={false}\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    valueLabel=\"30 of 60 dogs\"\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits: 2\n    }}\n    value={30.123}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  maxWidth=\"size-3000\"\n  gap=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    showValueLabel={false}\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    valueLabel=\"30 of 60 dogs\"\n    value={30}\n  />\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    formatOptions={{\n      style: 'percent',\n      minimumFractionDigits:\n        2\n    }}\n    value={30.123}\n  />\n</Flex>",
                    "name": "Labeling#"
                },
                {
                    "source": "<View backgroundColor=\"static-blue-700\" padding=\"size-300\">\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" staticColor=\"white\" value={5} />\n</View>\n<View backgroundColor=\"static-yellow-400\" padding=\"size-300\">\n  <ProgressBar label=\"Loading\u00e2\u0080\u00a6\" staticColor=\"black\" value={5} />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<View\n  backgroundColor=\"static-blue-700\"\n  padding=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"white\"\n    value={5}\n  />\n</View>\n<View\n  backgroundColor=\"static-yellow-400\"\n  padding=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"black\"\n    value={5}\n  />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<View\n  backgroundColor=\"static-blue-700\"\n  padding=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"white\"\n    value={5}\n  />\n</View>\n<View\n  backgroundColor=\"static-yellow-400\"\n  padding=\"size-300\"\n>\n  <ProgressBar\n    label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"black\"\n    value={5}\n  />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <ProgressBar label=\"Small\" size=\"S\" value={70} />\n  <ProgressBar label=\"Large\" size=\"L\" value={70} />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-300\">\n  <ProgressBar label=\"Small\" size=\"S\" value={70} />\n  <ProgressBar label=\"Large\" size=\"L\" value={70} />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-300\"\n>\n  <ProgressBar\n    label=\"Small\"\n    size=\"S\"\n    value={70}\n  />\n  <ProgressBar\n    label=\"Large\"\n    size=\"L\"\n    value={70}\n  />\n</Flex>",
                    "name": "Size#"
                }
            ]
        },
        {
            "name": "ProgressCircle",
            "url": "https://react-spectrum.adobe.com/react-spectrum/ProgressCircle.html",
            "examples": [
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  value={50}\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={25} />",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={25} />",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  value={25}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  minValue={50}\n  maxValue={150}\n  value={100}\n/>",
                    "name": "Value#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" value={50} />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  value={50}\n/>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" isIndeterminate />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" isIndeterminate />",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  isIndeterminate\n/>",
                    "name": "Indeterminate#"
                },
                {
                    "source": "<View backgroundColor=\"static-blue-700\" padding=\"size-300\">\n  <ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" staticColor=\"white\" isIndeterminate />\n</View>\n<View backgroundColor=\"static-yellow-400\" padding=\"size-300\">\n  <ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" staticColor=\"black\" isIndeterminate />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<View\n  backgroundColor=\"static-blue-700\"\n  padding=\"size-300\"\n>\n  <ProgressCircle\n    aria-label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"white\"\n    isIndeterminate\n  />\n</View>\n<View\n  backgroundColor=\"static-yellow-400\"\n  padding=\"size-300\"\n>\n  <ProgressCircle\n    aria-label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"black\"\n    isIndeterminate\n  />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<View\n  backgroundColor=\"static-blue-700\"\n  padding=\"size-300\"\n>\n  <ProgressCircle\n    aria-label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"white\"\n    isIndeterminate\n  />\n</View>\n<View\n  backgroundColor=\"static-yellow-400\"\n  padding=\"size-300\"\n>\n  <ProgressCircle\n    aria-label=\"Loading\u00e2\u0080\u00a6\"\n    staticColor=\"black\"\n    isIndeterminate\n  />\n</View>",
                    "name": "Static color#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  marginEnd=\"size-300\"\n  size=\"S\"\n  value={15}\n/>\n<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" marginEnd=\"size-300\" value={30} />\n<ProgressCircle aria-label=\"Loading\u00e2\u0080\u00a6\" size=\"L\" value={60} />",
                    "name": "Size#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  marginEnd=\"size-300\"\n  size=\"S\"\n  value={15}\n/>\n<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  marginEnd=\"size-300\"\n  value={30}\n/>\n<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  size=\"L\"\n  value={60}\n/>",
                    "name": "Size#"
                },
                {
                    "source": "<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  marginEnd=\"size-300\"\n  size=\"S\"\n  value={15}\n/>\n<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  marginEnd=\"size-300\"\n  value={30}\n/>\n<ProgressCircle\n  aria-label=\"Loading\u00e2\u0080\u00a6\"\n  size=\"L\"\n  value={60}\n/>",
                    "name": "Size#"
                }
            ]
        },
        {
            "name": "StatusLight",
            "url": "https://react-spectrum.adobe.com/react-spectrum/StatusLight.html",
            "examples": [
                {
                    "source": "<StatusLight variant=\"positive\">Ready</StatusLight>",
                    "name": "Example#"
                },
                {
                    "source": "<StatusLight variant=\"positive\">Ready</StatusLight>",
                    "name": "Example#"
                },
                {
                    "source": "<StatusLight variant=\"positive\">\n  Ready\n</StatusLight>",
                    "name": "Example#"
                },
                {
                    "source": "<StatusLight variant=\"positive\">Semantic color</StatusLight>\n<StatusLight variant=\"yellow\">Label color</StatusLight>",
                    "name": "Content#"
                },
                {
                    "source": "<StatusLight variant=\"positive\">Semantic color</StatusLight>\n<StatusLight variant=\"yellow\">Label color</StatusLight>",
                    "name": "Content#"
                },
                {
                    "source": "<StatusLight variant=\"positive\">\n  Semantic color\n</StatusLight>\n<StatusLight variant=\"yellow\">\n  Label color\n</StatusLight>",
                    "name": "Content#"
                },
                {
                    "source": "<StatusLight variant=\"neutral\">\n  Gray: Archived, Deleted, Paused, Draft, Not Started, Ended\n</StatusLight>\n<StatusLight variant=\"positive\">\n  Green: Approved, Complete, Success, New, Purchased, Licensed\n</StatusLight>\n<StatusLight variant=\"notice\">\n  Orange: Needs Approval, Pending, Scheduled, Syncing, Indexing, Processing\n</StatusLight>\n<StatusLight variant=\"negative\">\n  Red: Error, Alert, Rejected, Failed\n</StatusLight>\n<StatusLight variant=\"info\">\n  Blue: Active, In Use, Live, Published\n</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"neutral\">\n  Gray: Archived, Deleted, Paused, Draft, Not Started,\n  Ended\n</StatusLight>\n<StatusLight variant=\"positive\">\n  Green: Approved, Complete, Success, New, Purchased,\n  Licensed\n</StatusLight>\n<StatusLight variant=\"notice\">\n  Orange: Needs Approval, Pending, Scheduled, Syncing,\n  Indexing, Processing\n</StatusLight>\n<StatusLight variant=\"negative\">\n  Red: Error, Alert, Rejected, Failed\n</StatusLight>\n<StatusLight variant=\"info\">\n  Blue: Active, In Use, Live, Published\n</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"neutral\">\n  Gray: Archived,\n  Deleted, Paused,\n  Draft, Not Started,\n  Ended\n</StatusLight>\n<StatusLight variant=\"positive\">\n  Green: Approved,\n  Complete, Success,\n  New, Purchased,\n  Licensed\n</StatusLight>\n<StatusLight variant=\"notice\">\n  Orange: Needs\n  Approval, Pending,\n  Scheduled, Syncing,\n  Indexing, Processing\n</StatusLight>\n<StatusLight variant=\"negative\">\n  Red: Error, Alert,\n  Rejected, Failed\n</StatusLight>\n<StatusLight variant=\"info\">\n  Blue: Active, In Use,\n  Live, Published\n</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"indigo\">Indigo</StatusLight>\n<StatusLight variant=\"celery\">Celery</StatusLight>\n<StatusLight variant=\"magenta\">Magenta</StatusLight>\n<StatusLight variant=\"yellow\">Yellow</StatusLight>\n<StatusLight variant=\"fuchsia\">Fuchsia</StatusLight>\n<StatusLight variant=\"seafoam\">Seafoam</StatusLight>\n<StatusLight variant=\"chartreuse\">Chartreuse</StatusLight>\n<StatusLight variant=\"purple\">Purple</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"indigo\">Indigo</StatusLight>\n<StatusLight variant=\"celery\">Celery</StatusLight>\n<StatusLight variant=\"magenta\">Magenta</StatusLight>\n<StatusLight variant=\"yellow\">Yellow</StatusLight>\n<StatusLight variant=\"fuchsia\">Fuchsia</StatusLight>\n<StatusLight variant=\"seafoam\">Seafoam</StatusLight>\n<StatusLight variant=\"chartreuse\">Chartreuse</StatusLight>\n<StatusLight variant=\"purple\">Purple</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"indigo\">\n  Indigo\n</StatusLight>\n<StatusLight variant=\"celery\">\n  Celery\n</StatusLight>\n<StatusLight variant=\"magenta\">\n  Magenta\n</StatusLight>\n<StatusLight variant=\"yellow\">\n  Yellow\n</StatusLight>\n<StatusLight variant=\"fuchsia\">\n  Fuchsia\n</StatusLight>\n<StatusLight variant=\"seafoam\">\n  Seafoam\n</StatusLight>\n<StatusLight variant=\"chartreuse\">\n  Chartreuse\n</StatusLight>\n<StatusLight variant=\"purple\">\n  Purple\n</StatusLight>",
                    "name": "Variant#"
                },
                {
                    "source": "<StatusLight variant=\"yellow\" isDisabled>Yellow</StatusLight>",
                    "name": "Disabled#"
                },
                {
                    "source": "<StatusLight variant=\"yellow\" isDisabled>\n  Yellow\n</StatusLight>",
                    "name": "Disabled#"
                },
                {
                    "source": "<StatusLight\n  variant=\"yellow\"\n  isDisabled\n>\n  Yellow\n</StatusLight>",
                    "name": "Disabled#"
                }
            ]
        },
        {
            "name": "Toastbeta",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Toast.html",
            "examples": [
                {
                    "source": "<ToastContainer />",
                    "name": "Example#"
                },
                {
                    "source": "<ToastContainer />",
                    "name": "Example#"
                },
                {
                    "source": "<ToastContainer />",
                    "name": "Example#"
                },
                {
                    "source": "<Button\n  onPress={() => ToastQueue.positive('Toast is done!')}\n  variant=\"primary\">\n  Show toast\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<Button\n  onPress={() => ToastQueue.positive('Toast is done!')}\n  variant=\"primary\">\n  Show toast\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<Button\n  onPress={() =>\n    ToastQueue\n      .positive(\n        'Toast is done!'\n      )}\n  variant=\"primary\"\n>\n  Show toast\n</Button>",
                    "name": "Example#"
                },
                {
                    "source": "<ButtonGroup>\n  <Button\n    onPress={() => ToastQueue.neutral('Toast available')}    variant=\"secondary\">\n    Show Neutral Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.positive('Toast is done!')}    variant=\"primary\">\n    Show Positive Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.negative('Toast is burned!')}    variant=\"negative\">\n    Show Negative Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.info('Toasting\u00e2\u0080\u00a6')}    variant=\"accent\"\n    style=\"outline\">\n    Show Info Toast\n  </Button>\n</ButtonGroup>",
                    "name": "Content#"
                },
                {
                    "source": "<ButtonGroup>\n  <Button\n    onPress={() => ToastQueue.neutral('Toast available')}    variant=\"secondary\">\n    Show Neutral Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.positive('Toast is done!')}    variant=\"primary\">\n    Show Positive Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.negative('Toast is burned!')}    variant=\"negative\">\n    Show Negative Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.info('Toasting\u00e2\u0080\u00a6')}    variant=\"accent\"\n    style=\"outline\">\n    Show Info Toast\n  </Button>\n</ButtonGroup>",
                    "name": "Content#"
                },
                {
                    "source": "<ButtonGroup>\n  <Button\n    onPress={() =>\n      ToastQueue\n        .neutral(\n          'Toast available'\n        )}    variant=\"secondary\"\n  >\n    Show Neutral Toast\n  </Button>\n  <Button\n    onPress={() =>\n      ToastQueue\n        .positive(\n          'Toast is done!'\n        )}    variant=\"primary\"\n  >\n    Show Positive Toast\n  </Button>\n  <Button\n    onPress={() =>\n      ToastQueue\n        .negative(\n          'Toast is burned!'\n        )}    variant=\"negative\"\n  >\n    Show Negative Toast\n  </Button>\n  <Button\n    onPress={() =>\n      ToastQueue.info(\n        'Toasting\u00e2\u0080\u00a6'\n      )}    variant=\"accent\"\n    style=\"outline\"\n  >\n    Show Info Toast\n  </Button>\n</ButtonGroup>",
                    "name": "Content#"
                },
                {
                    "source": "<Button\n  onPress={() => ToastQueue.info('An update is available', {\n    actionLabel: 'Update',\n    onAction: () => alert('Updating!'),\n    shouldCloseOnAction: true  })}\n  variant=\"primary\">\n  Show toast\n</Button>",
                    "name": "Events#"
                },
                {
                    "source": "<Button\n  onPress={() => ToastQueue.info('An update is available', {\n    actionLabel: 'Update',\n    onAction: () => alert('Updating!'),\n    shouldCloseOnAction: true  })}\n  variant=\"primary\">\n  Show toast\n</Button>",
                    "name": "Events#"
                },
                {
                    "source": "<Button\n  onPress={() =>\n    ToastQueue.info(\n      'An update is available',\n      {\n        actionLabel:\n          'Update',\n        onAction: () =>\n          alert(\n            'Updating!'\n          ),\n        shouldCloseOnAction:\n          true      }\n    )}\n  variant=\"primary\"\n>\n  Show toast\n</Button>",
                    "name": "Events#"
                },
                {
                    "source": "<Button\n  onPress={() => ToastQueue.positive('Toast is done!', {timeout: 5000})}  variant=\"primary\">\n  Show toast\n</Button>",
                    "name": "Auto-dismiss#"
                },
                {
                    "source": "<Button\n  onPress={() =>\n    ToastQueue.positive('Toast is done!', {\n      timeout: 5000\n    })}  variant=\"primary\"\n>\n  Show toast\n</Button>",
                    "name": "Auto-dismiss#"
                },
                {
                    "source": "<Button\n  onPress={() =>\n    ToastQueue\n      .positive(\n        'Toast is done!',\n        {\n          timeout: 5000\n        }\n      )}  variant=\"primary\"\n>\n  Show toast\n</Button>",
                    "name": "Auto-dismiss#"
                },
                {
                    "source": "function Example() {\n  let [close, setClose] = React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!close) {\n          let close = ToastQueue.negative('Unable to save', {\n            onClose: () => setClose(null)\n          });          setClose(() => close);\n        } else {\n          close();        }\n      }}\n      variant=\"primary\"\n    >\n      {close ? 'Hide' : 'Show'} Toast\n    </Button>\n  );\n}\n",
                    "name": "Programmatic dismissal#"
                },
                {
                    "source": "function Example() {\n  let [close, setClose] = React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!close) {\n          let close = ToastQueue.negative(\n            'Unable to save',\n            { onClose: () => setClose(null) }\n          );          setClose(() => close);\n        } else {\n          close();        }\n      }}\n      variant=\"primary\"\n    >\n      {close ? 'Hide' : 'Show'} Toast\n    </Button>\n  );\n}\n",
                    "name": "Programmatic dismissal#"
                },
                {
                    "source": "function Example() {\n  let [close, setClose] =\n    React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!close) {\n          let close =\n            ToastQueue\n              .negative(\n                'Unable to save',\n                {\n                  onClose:\n                    () =>\n                      setClose(\n                        null\n                      )\n                }\n              );          setClose(() =>\n            close\n          );\n        } else {\n          close();        }\n      }}\n      variant=\"primary\"\n    >\n      {close\n        ? 'Hide'\n        : 'Show'} Toast\n    </Button>\n  );\n}\n",
                    "name": "Programmatic dismissal#"
                }
            ]
        }
    ],
    "Content": [
        {
            "name": "Avatar",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Avatar.html",
            "examples": [
                {
                    "source": "<Avatar src=\"https://i.imgur.com/kJOwAdv.png\" alt=\"default Adobe avatar\" />",
                    "name": "Example#"
                },
                {
                    "source": "<Avatar\n  src=\"https://i.imgur.com/kJOwAdv.png\"\n  alt=\"default Adobe avatar\"\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<Avatar\n  src=\"https://i.imgur.com/kJOwAdv.png\"\n  alt=\"default Adobe avatar\"\n/>",
                    "name": "Example#"
                },
                {
                    "source": "<Avatar\n  src=\"https://i.imgur.com/kJOwAdv.png\"\n  alt=\"default Adobe avatar\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Avatar\n  src=\"https://i.imgur.com/kJOwAdv.png\"\n  alt=\"default Adobe avatar\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Avatar\n  src=\"https://i.imgur.com/kJOwAdv.png\"\n  alt=\"default Adobe avatar\"\n  isDisabled\n/>",
                    "name": "Disabled#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  {[50, 75, 100, 200, 300, 400, 500, 600, 700].map((size) => (\n    <Avatar\n      src=\"https://i.imgur.com/kJOwAdv.png\"\n      alt=\"default Adobe avatar\"\n      size={`avatar-size-${size}`}\n    />\n  ))}\n  <Avatar\n    src=\"https://i.imgur.com/kJOwAdv.png\"\n    alt=\"avatar with custom size\"\n    size={50}\n  />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex gap=\"size-100\" wrap>\n  {[50, 75, 100, 200, 300, 400, 500, 600, 700].map(\n    (size) => (\n      <Avatar\n        src=\"https://i.imgur.com/kJOwAdv.png\"\n        alt=\"default Adobe avatar\"\n        size={`avatar-size-${size}`}\n      />\n    )\n  )}\n  <Avatar\n    src=\"https://i.imgur.com/kJOwAdv.png\"\n    alt=\"avatar with custom size\"\n    size={50}\n  />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex\n  gap=\"size-100\"\n  wrap\n>\n  {[\n    50,\n    75,\n    100,\n    200,\n    300,\n    400,\n    500,\n    600,\n    700\n  ].map((size) => (\n    <Avatar\n      src=\"https://i.imgur.com/kJOwAdv.png\"\n      alt=\"default Adobe avatar\"\n      size={`avatar-size-${size}`}\n    />\n  ))}\n  <Avatar\n    src=\"https://i.imgur.com/kJOwAdv.png\"\n    alt=\"avatar with custom size\"\n    size={50}\n  />\n</Flex>",
                    "name": "Size#"
                }
            ]
        },
        {
            "name": "Content",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Content.html",
            "examples": [
                {
                    "source": "<Content>Content is king</Content>",
                    "name": "Example#"
                },
                {
                    "source": "<Content>Content is king</Content>",
                    "name": "Example#"
                },
                {
                    "source": "<Content>\n  Content is king\n</Content>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "Divider",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Divider.html",
            "examples": [
                {
                    "source": "<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above</Text>\n  <Divider />\n  <Text>Content below</Text>\n</Flex>",
                    "name": "Horizontal#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above</Text>\n  <Divider />\n  <Text>Content below</Text>\n</Flex>",
                    "name": "Horizontal#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-125\"\n>\n  <Text>\n    Content above\n  </Text>\n  <Divider />\n  <Text>\n    Content below\n  </Text>\n</Flex>",
                    "name": "Horizontal#"
                },
                {
                    "source": "<Flex gap=\"size-125\">\n  <Text>Content left</Text>\n  <Divider orientation=\"vertical\" />\n  <Text>Content right</Text>\n</Flex>",
                    "name": "Vertical#"
                },
                {
                    "source": "<Flex gap=\"size-125\">\n  <Text>Content left</Text>\n  <Divider orientation=\"vertical\" />\n  <Text>Content right</Text>\n</Flex>",
                    "name": "Vertical#"
                },
                {
                    "source": "<Flex gap=\"size-125\">\n  <Text>\n    Content left\n  </Text>\n  <Divider orientation=\"vertical\" />\n  <Text>\n    Content right\n  </Text>\n</Flex>",
                    "name": "Vertical#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above large Divider</Text>\n  <Divider size=\"L\" />\n  <Text>Content above medium Divider</Text>\n  <Divider size=\"M\" />\n  <Text>Content above small Divider</Text>\n  <Divider size=\"S\" />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above large Divider</Text>\n  <Divider size=\"L\" />\n  <Text>Content above medium Divider</Text>\n  <Divider size=\"M\" />\n  <Text>Content above small Divider</Text>\n  <Divider size=\"S\" />\n</Flex>",
                    "name": "Size#"
                },
                {
                    "source": "<Flex\n  direction=\"column\"\n  gap=\"size-125\"\n>\n  <Text>\n    Content above large\n    Divider\n  </Text>\n  <Divider size=\"L\" />\n  <Text>\n    Content above\n    medium Divider\n  </Text>\n  <Divider size=\"M\" />\n  <Text>\n    Content above small\n    Divider\n  </Text>\n  <Divider size=\"S\" />\n</Flex>",
                    "name": "Size#"
                }
            ]
        },
        {
            "name": "Footer",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Footer.html",
            "examples": [
                {
                    "source": "<Footer>&copy; All rights reserved.</Footer>",
                    "name": "Example#"
                },
                {
                    "source": "<Footer>&copy; All rights reserved.</Footer>",
                    "name": "Example#"
                },
                {
                    "source": "<Footer>\n  &copy; All rights\n  reserved.\n</Footer>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "Header",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Header.html",
            "examples": [
                {
                    "source": "<Header>Cute cats</Header>",
                    "name": "Example#"
                },
                {
                    "source": "<Header>Cute cats</Header>",
                    "name": "Example#"
                },
                {
                    "source": "<Header>\n  Cute cats\n</Header>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "Heading",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Heading.html",
            "examples": [
                {
                    "source": "<Heading level={4}>Edit</Heading>",
                    "name": "Example#"
                },
                {
                    "source": "<Heading level={4}>Edit</Heading>",
                    "name": "Example#"
                },
                {
                    "source": "<Heading level={4}>\n  Edit\n</Heading>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "IllustratedMessage",
            "url": "https://react-spectrum.adobe.com/react-spectrum/IllustratedMessage.html",
            "examples": [
                {
                    "source": "import NotFound from '@spectrum-icons/illustrations/NotFound';\n\n<IllustratedMessage>\n  <NotFound />\n  <Heading>No results</Heading>\n  <Content>Try another search</Content>\n</IllustratedMessage>",
                    "name": "Example#"
                },
                {
                    "source": "import NotFound from '@spectrum-icons/illustrations/NotFound';\n\n<IllustratedMessage>\n  <NotFound />\n  <Heading>No results</Heading>\n  <Content>Try another search</Content>\n</IllustratedMessage>",
                    "name": "Example#"
                },
                {
                    "source": "import NotFound from '@spectrum-icons/illustrations/NotFound';\n\n<IllustratedMessage>\n  <NotFound />\n  <Heading>\n    No results\n  </Heading>\n  <Content>\n    Try another search\n  </Content>\n</IllustratedMessage>",
                    "name": "Example#"
                },
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\n\n<IllustratedMessage>\n  <Upload />\n  <Heading>Drag and Drop your file</Heading>\n  <Content>\n    Select a File from your computer<br /> or Search Adobe Stock\n  </Content>\n</IllustratedMessage>",
                    "name": "Content#"
                },
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\n\n<IllustratedMessage>\n  <Upload />\n  <Heading>Drag and Drop your file</Heading>\n  <Content>\n    Select a File from your computer<br />{' '}\n    or Search Adobe Stock\n  </Content>\n</IllustratedMessage>",
                    "name": "Content#"
                },
                {
                    "source": "import Upload from '@spectrum-icons/illustrations/Upload';\n\n<IllustratedMessage>\n  <Upload />\n  <Heading>\n    Drag and Drop your\n    file\n  </Heading>\n  <Content>\n    Select a File from\n    your computer<br />\n    {' '}\n    or Search Adobe\n    Stock\n  </Content>\n</IllustratedMessage>",
                    "name": "Content#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound aria-label=\"No results\" />\n</IllustratedMessage>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound aria-label=\"No results\" />\n</IllustratedMessage>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound aria-label=\"No results\" />\n</IllustratedMessage>",
                    "name": "Accessibility#"
                },
                {
                    "source": "import NoSearchResults from '@spectrum-icons/illustrations/NoSearchResults';\n\n<IllustratedMessage>\n  <NoSearchResults />\n  <Heading>No matching results</Heading>\n  <Content>Try another search.</Content>\n</IllustratedMessage>",
                    "name": "No search results#"
                },
                {
                    "source": "import NoSearchResults from '@spectrum-icons/illustrations/NoSearchResults';\n\n<IllustratedMessage>\n  <NoSearchResults />\n  <Heading>No matching results</Heading>\n  <Content>Try another search.</Content>\n</IllustratedMessage>",
                    "name": "No search results#"
                },
                {
                    "source": "import NoSearchResults from '@spectrum-icons/illustrations/NoSearchResults';\n\n<IllustratedMessage>\n  <NoSearchResults />\n  <Heading>\n    No matching results\n  </Heading>\n  <Content>\n    Try another search.\n  </Content>\n</IllustratedMessage>",
                    "name": "No search results#"
                },
                {
                    "source": "import Unauthorized from '@spectrum-icons/illustrations/Unauthorized';\n\n<IllustratedMessage>\n  <Unauthorized />\n  <Heading>Error 403: Access not allowed</Heading>\n  <Content>\n    You do not have permission to access this page. Try checking the URL or\n    visit a different page.\n  </Content>\n</IllustratedMessage>",
                    "name": "403 Forbidden#"
                },
                {
                    "source": "import Unauthorized from '@spectrum-icons/illustrations/Unauthorized';\n\n<IllustratedMessage>\n  <Unauthorized />\n  <Heading>Error 403: Access not allowed</Heading>\n  <Content>\n    You do not have permission to access this page. Try\n    checking the URL or visit a different page.\n  </Content>\n</IllustratedMessage>",
                    "name": "403 Forbidden#"
                },
                {
                    "source": "import Unauthorized from '@spectrum-icons/illustrations/Unauthorized';\n\n<IllustratedMessage>\n  <Unauthorized />\n  <Heading>\n    Error 403: Access\n    not allowed\n  </Heading>\n  <Content>\n    You do not have\n    permission to\n    access this page.\n    Try checking the\n    URL or visit a\n    different page.\n  </Content>\n</IllustratedMessage>",
                    "name": "403 Forbidden#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound />\n  <Heading>Error 404: Page not found</Heading>\n  <Content>\n    This page isn't available. Try checking the URL or visit a different page.\n  </Content>\n</IllustratedMessage>",
                    "name": "404 Not found#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound />\n  <Heading>Error 404: Page not found</Heading>\n  <Content>\n    This page isn't available. Try checking the URL or\n    visit a different page.\n  </Content>\n</IllustratedMessage>",
                    "name": "404 Not found#"
                },
                {
                    "source": "<IllustratedMessage>\n  <NotFound />\n  <Heading>\n    Error 404: Page not\n    found\n  </Heading>\n  <Content>\n    This page isn't\n    available. Try\n    checking the URL or\n    visit a different\n    page.\n  </Content>\n</IllustratedMessage>",
                    "name": "404 Not found#"
                },
                {
                    "source": "import Error from '@spectrum-icons/illustrations/Error';\n\n<IllustratedMessage>\n  <Error />\n  <Heading>Error 500: Internal server error</Heading>\n  <Content>Something went wrong. Please try again later.</Content>\n</IllustratedMessage>",
                    "name": "500 Internal server error#"
                },
                {
                    "source": "import Error from '@spectrum-icons/illustrations/Error';\n\n<IllustratedMessage>\n  <Error />\n  <Heading>Error 500: Internal server error</Heading>\n  <Content>\n    Something went wrong. Please try again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "500 Internal server error#"
                },
                {
                    "source": "import Error from '@spectrum-icons/illustrations/Error';\n\n<IllustratedMessage>\n  <Error />\n  <Heading>\n    Error 500: Internal\n    server error\n  </Heading>\n  <Content>\n    Something went\n    wrong. Please try\n    again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "500 Internal server error#"
                },
                {
                    "source": "import Unavailable from '@spectrum-icons/illustrations/Unavailable';\n\n<IllustratedMessage>\n  <Unavailable />\n  <Heading>Error 503: Service unavailable</Heading>\n  <Content>\n    This page isn't working. Try a different page or try again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "503 Service unavailable#"
                },
                {
                    "source": "import Unavailable from '@spectrum-icons/illustrations/Unavailable';\n\n<IllustratedMessage>\n  <Unavailable />\n  <Heading>Error 503: Service unavailable</Heading>\n  <Content>\n    This page isn't working. Try a different page or try\n    again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "503 Service unavailable#"
                },
                {
                    "source": "import Unavailable from '@spectrum-icons/illustrations/Unavailable';\n\n<IllustratedMessage>\n  <Unavailable />\n  <Heading>\n    Error 503: Service\n    unavailable\n  </Heading>\n  <Content>\n    This page isn't\n    working. Try a\n    different page or\n    try again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "503 Service unavailable#"
                },
                {
                    "source": "import Timeout from '@spectrum-icons/illustrations/Timeout';\n\n<IllustratedMessage>\n  <Timeout />\n  <Heading>Error 504: Server timeout</Heading>\n  <Content>The server took too long. Please try again later.</Content>\n</IllustratedMessage>",
                    "name": "504 Gateway timeout#"
                },
                {
                    "source": "import Timeout from '@spectrum-icons/illustrations/Timeout';\n\n<IllustratedMessage>\n  <Timeout />\n  <Heading>Error 504: Server timeout</Heading>\n  <Content>\n    The server took too long. Please try again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "504 Gateway timeout#"
                },
                {
                    "source": "import Timeout from '@spectrum-icons/illustrations/Timeout';\n\n<IllustratedMessage>\n  <Timeout />\n  <Heading>\n    Error 504: Server\n    timeout\n  </Heading>\n  <Content>\n    The server took too\n    long. Please try\n    again later.\n  </Content>\n</IllustratedMessage>",
                    "name": "504 Gateway timeout#"
                }
            ]
        },
        {
            "name": "Image",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Image.html",
            "examples": [
                {
                    "source": "<Image src=\"https://i.imgur.com/Z7AzH2c.png\" alt=\"Sky and roof\" />",
                    "name": "Examples#"
                },
                {
                    "source": "<Image\n  src=\"https://i.imgur.com/Z7AzH2c.png\"\n  alt=\"Sky and roof\"\n/>",
                    "name": "Examples#"
                },
                {
                    "source": "<Image\n  src=\"https://i.imgur.com/Z7AzH2c.png\"\n  alt=\"Sky and roof\"\n/>",
                    "name": "Examples#"
                },
                {
                    "source": "<Flex width=\"200px\">\n  <Image src=\"https://i.imgur.com/c3gTKSJ.jpg\" alt=\"\" />\n</Flex>",
                    "name": "Decorative#"
                },
                {
                    "source": "<Flex width=\"200px\">\n  <Image src=\"https://i.imgur.com/c3gTKSJ.jpg\" alt=\"\" />\n</Flex>",
                    "name": "Decorative#"
                },
                {
                    "source": "<Flex width=\"200px\">\n  <Image\n    src=\"https://i.imgur.com/c3gTKSJ.jpg\"\n    alt=\"\"\n  />\n</Flex>",
                    "name": "Decorative#"
                },
                {
                    "source": "<Flex width=\"100%\" height=\"200px\">\n  <Image\n    src=\"https://i.imgur.com/c3gTKSJ.jpg\"\n    alt=\"Eiffel Tower at sunset\"\n    objectFit=\"cover\" />\n</Flex>",
                    "name": "Object Fit#"
                },
                {
                    "source": "<Flex width=\"100%\" height=\"200px\">\n  <Image\n    src=\"https://i.imgur.com/c3gTKSJ.jpg\"\n    alt=\"Eiffel Tower at sunset\"\n    objectFit=\"cover\" />\n</Flex>",
                    "name": "Object Fit#"
                },
                {
                    "source": "<Flex\n  width=\"100%\"\n  height=\"200px\"\n>\n  <Image\n    src=\"https://i.imgur.com/c3gTKSJ.jpg\"\n    alt=\"Eiffel Tower at sunset\"\n    objectFit=\"cover\"\n  />\n</Flex>",
                    "name": "Object Fit#"
                }
            ]
        },
        {
            "name": "Keyboard",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Keyboard.html",
            "examples": [
                {
                    "source": "<Keyboard>\u00e2\u008c\u0098V</Keyboard>",
                    "name": "Example#"
                },
                {
                    "source": "<Keyboard>\u00e2\u008c\u0098V</Keyboard>",
                    "name": "Example#"
                },
                {
                    "source": "<Keyboard>\u00e2\u008c\u0098V</Keyboard>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "Text",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Text.html",
            "examples": [
                {
                    "source": "<Text>Paste</Text>",
                    "name": "Example#"
                },
                {
                    "source": "<Text>Paste</Text>",
                    "name": "Example#"
                },
                {
                    "source": "<Text>Paste</Text>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "View",
            "url": "https://react-spectrum.adobe.com/react-spectrum/View.html",
            "examples": [
                {
                    "source": "<View\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n  padding=\"size-250\">\n  <TextField label=\"Name\" />\n</View>",
                    "name": "Example#"
                },
                {
                    "source": "<View\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n  padding=\"size-250\">\n  <TextField label=\"Name\" />\n</View>",
                    "name": "Example#"
                },
                {
                    "source": "<View\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n  padding=\"size-250\"\n>\n  <TextField label=\"Name\" />\n</View>",
                    "name": "Example#"
                }
            ]
        },
        {
            "name": "Well",
            "url": "https://react-spectrum.adobe.com/react-spectrum/Well.html",
            "examples": [
                {
                    "source": "<Well>\n  Better a little which is well done, than a great deal imperfectly.\n</Well>",
                    "name": "Example#"
                },
                {
                    "source": "<Well>\n  Better a little which is well done, than a great deal\n  imperfectly.\n</Well>",
                    "name": "Example#"
                },
                {
                    "source": "<Well>\n  Better a little which\n  is well done, than a\n  great deal\n  imperfectly.\n</Well>",
                    "name": "Example#"
                },
                {
                    "source": "<Well>Well, well, well</Well>",
                    "name": "Content#"
                },
                {
                    "source": "<Well>Well, well, well</Well>",
                    "name": "Content#"
                },
                {
                    "source": "<Well>\n  Well, well, well\n</Well>",
                    "name": "Content#"
                },
                {
                    "source": "<Well role=\"region\" aria-labelledby=\"wellLabel\">\n  <h3 id=\"wellLabel\">Shipping Address</h3>\n  <p>601 Townsend Street<br /> San Francisco, CA 94103</p>\n</Well>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Well role=\"region\" aria-labelledby=\"wellLabel\">\n  <h3 id=\"wellLabel\">Shipping Address</h3>\n  <p>601 Townsend Street<br /> San Francisco, CA 94103</p>\n</Well>",
                    "name": "Accessibility#"
                },
                {
                    "source": "<Well\n  role=\"region\"\n  aria-labelledby=\"wellLabel\"\n>\n  <h3 id=\"wellLabel\">\n    Shipping Address\n  </h3>\n  <p>\n    601 Townsend\n    Street<br />{' '}\n    San Francisco, CA\n    94103\n  </p>\n</Well>",
                    "name": "Accessibility#"
                }
            ]
        }
    ]
}